using Bogus;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.TestKit.Infra;

/// <summary>
/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ TestKit —Å Bogus –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
/// <tags>bogus, realistic-data, faker, test-data</tags>
/// </summary>
public static class TestKitBogus
{
    private static readonly Faker _faker = new Faker("ru");

    #region User Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Bogus
    /// <tags>bogus, user, realistic, faker</tags>
    /// </summary>
    public static User CreateRealisticUser(long? userId = null)
    {
        var userFaker = new Faker<User>()
            .RuleFor(u => u.Id, f => userId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(u => u.IsBot, false)
            .RuleFor(u => u.FirstName, f => f.Name.FirstName())
            .RuleFor(u => u.LastName, f => f.Name.LastName())
            .RuleFor(u => u.Username, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))
            .RuleFor(u => u.LanguageCode, f => f.PickRandom("ru", "en", "es", "de"))
            .RuleFor(u => u.IsPremium, f => f.Random.Bool(0.1f)) // 10% –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            .RuleFor(u => u.AddedToAttachmentMenu, f => f.Random.Bool(0.05f)); // 5% —Å attachment menu

        return userFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    /// <tags>bogus, bot, realistic, faker</tags>
    /// </summary>
    public static User CreateRealisticBot(long? botId = null)
    {
        var botFaker = new Faker<User>()
            .RuleFor(u => u.Id, f => botId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(u => u.IsBot, true)
            .RuleFor(u => u.FirstName, f => f.PickRandom("TestBot", "HelperBot", "ServiceBot", "AdminBot"))
            .RuleFor(u => u.Username, (f, u) => u.FirstName.ToLowerInvariant())
            .RuleFor(u => u.CanJoinGroups, f => f.Random.Bool(0.8f))
            .RuleFor(u => u.CanReadAllGroupMessages, f => f.Random.Bool(0.6f))
            .RuleFor(u => u.SupportsInlineQueries, f => f.Random.Bool(0.3f));

        return botFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–∞–º–º–µ—Ä)
    /// <tags>bogus, suspicious-user, spammer, faker</tags>
    /// </summary>
    public static User CreateSuspiciousUser(long? userId = null)
    {
        var suspiciousFaker = new Faker<User>()
            .RuleFor(u => u.Id, f => userId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(u => u.IsBot, false)
            .RuleFor(u => u.FirstName, f => f.PickRandom(
                "üî•CRYPTO_EXPERTüî•", "üí∞MONEY_MAKERüí∞", "üìàTRADER_PROüìà", 
                "Anna", "Maria", "Elena")) // –ò–Ω–æ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
            .RuleFor(u => u.LastName, f => f.Random.Bool() ? f.Name.LastName() : null)
            .RuleFor(u => u.Username, (string?)null) // –ß–∞—Å—Ç–æ –±–µ–∑ username
            .RuleFor(u => u.LanguageCode, f => f.PickRandom("en", "ru", null))
            .RuleFor(u => u.IsPremium, f => f.Random.Bool(0.05f)); // –†–µ–∂–µ –ø—Ä–µ–º–∏—É–º

        return suspiciousFaker.Generate();
    }

    #endregion

    #region Chat Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É —Å Bogus
    /// <tags>bogus, group, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticGroup(long? chatId = null)
    {
        var groupFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -1000000000))
            .RuleFor(c => c.Type, ChatType.Group)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Random.Bool(0.3f) ? 
                f.Internet.UserName().ToLowerInvariant() : null); // 30% —Å username

        return groupFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
    /// <tags>bogus, supergroup, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticSupergroup(long? chatId = null)
    {
        var supergroupFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -1000000000))
            .RuleFor(c => c.Type, ChatType.Supergroup)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Random.Bool(0.7f) ? 
                f.Internet.UserName().ToLowerInvariant() : null); // 70% —Å username

        return supergroupFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    /// <tags>bogus, private-chat, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticPrivateChat(long? chatId = null)
    {
        var privateFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(c => c.Type, ChatType.Private)
            .RuleFor(c => c.FirstName, f => f.Name.FirstName())
            .RuleFor(c => c.LastName, f => f.Name.LastName())
            .RuleFor(c => c.Username, f => f.Random.Bool(0.6f) ? 
                f.Internet.UserName() : null); // 60% —Å username

        return privateFaker.Generate();
    }

    #endregion

    #region Message Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// <tags>bogus, message, realistic, faker</tags>
    /// </summary>
    public static Message CreateRealisticMessage(User? from = null, Chat? chat = null)
    {
        from ??= CreateRealisticUser();
        chat ??= CreateRealisticGroup();

        var messageFaker = new Faker<Message>()
            .RuleFor(m => m.From, from)
            .RuleFor(m => m.Chat, chat)
            .RuleFor(m => m.Date, f => f.Date.Recent(30)) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            .RuleFor(m => m.Text, f => f.PickRandom(
                f.Lorem.Sentence(),
                "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
                "–ö–∞–∫ –¥–µ–ª–∞?",
                "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è!",
                "–°–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º",
                "+1",
                "üëç",
                f.Lorem.Paragraph()));

        return messageFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
    /// <tags>bogus, spam-message, realistic, faker</tags>
    /// </summary>
    public static Message CreateSpamMessage(User? from = null, Chat? chat = null)
    {
        from ??= CreateSuspiciousUser();
        chat ??= CreateRealisticGroup();

        var spamTexts = new[]
        {
            "üî•üî•üî• –°–†–û–ß–ù–û! –ó–ê–†–ê–ë–û–¢–ê–ô 1000000$ –ó–ê –î–ï–ù–¨! üî•üî•üî• –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://scam.com",
            "üí∞üí∞üí∞ –ö–†–ò–ü–¢–û–ò–ù–í–ï–°–¢–ò–¶–ò–ò! –ü–†–ò–ë–´–õ–¨ 500% –í –ú–ï–°–Ø–¶! üí∞üí∞üí∞",
            "üöÄ–ù–û–í–ê–Ø –ú–û–ù–ï–¢–ê! –ö–£–ü–ò –°–ï–ô–ß–ê–°! –ó–ê–í–¢–†–ê –ë–£–î–ï–¢ –ü–û–ó–î–ù–û!üöÄ",
            "‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è –Ø –ó–ê–†–ê–ë–û–¢–ê–õ –ú–ò–õ–õ–ò–û–ù –ó–ê –ù–ï–î–ï–õ–Æ! –£–ó–ù–ê–ô –ö–ê–ö ‚û°Ô∏è bit.ly/scam",
            "üéÅ–ë–ï–°–ü–õ–ê–¢–ù–´–ï –î–ï–ù–¨–ì–ò! –ñ–ú–ò –°–Æ–î–ê!üéÅ"
        };

        var messageFaker = new Faker<Message>()
            .RuleFor(m => m.From, from)
            .RuleFor(m => m.Chat, chat)
            .RuleFor(m => m.Date, f => f.Date.Recent(1)) // –ù–µ–¥–∞–≤–Ω–æ
            .RuleFor(m => m.Text, f => f.PickRandom(spamTexts));

        return messageFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
    /// <tags>bogus, media-message, realistic, faker</tags>
    /// </summary>
    public static Message CreateMediaMessage(User? from = null, Chat? chat = null)
    {
        from ??= CreateRealisticUser();
        chat ??= CreateRealisticGroup();

        var message = CreateRealisticMessage(from, chat);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞
        var mediaType = _faker.PickRandom("photo", "video", "document", "sticker");
        switch (mediaType)
        {
            case "photo":
                message.Photo = new PhotoSize[]
                {
                    new PhotoSize { FileId = $"photo_{_faker.Random.AlphaNumeric(20)}", Width = 1280, Height = 720 }
                };
                break;
            case "video":
                message.Video = new Video { FileId = $"video_{_faker.Random.AlphaNumeric(20)}", Width = 1920, Height = 1080, Duration = 120 };
                break;
            case "document":
                message.Document = new Document { FileId = $"doc_{_faker.Random.AlphaNumeric(20)}", FileName = $"{_faker.System.FileName()}.pdf" };
                break;
            case "sticker":
                message.Sticker = new Sticker { FileId = $"sticker_{_faker.Random.AlphaNumeric(20)}", Width = 512, Height = 512 };
                break;
        }

        return message;
    }

    #endregion

    #region Collection Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /// <tags>bogus, users, collection, faker</tags>
    /// </summary>
    public static List<User> CreateUserList(int count = 5)
    {
        return Enumerable.Range(0, count)
            .Select(_ => CreateRealisticUser())
            .ToList();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
    /// <tags>bogus, message-history, conversation, faker</tags>
    /// </summary>
    public static List<Message> CreateConversation(Chat chat, List<User> participants, int messageCount = 10)
    {
        var messages = new List<Message>();
        
        for (int i = 0; i < messageCount; i++)
        {
            var from = _faker.PickRandom(participants);
            var message = CreateRealisticMessage(from, chat);
            message.Date = DateTime.UtcNow.AddMinutes(-messageCount + i); // –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
            messages.Add(message);
        }

        return messages;
    }

    #endregion
    
    #region Backward Compatibility Methods
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ (alias –¥–ª—è CreateSpamMessage)
    /// <tags>bogus, spam-message, realistic, faker</tags>
    /// </summary>
    public static Message CreateRealisticSpamMessage(User? from = null, Chat? chat = null) => CreateSpamMessage(from, chat);
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    /// <tags>bogus, bot-message, faker</tags>
    /// </summary>
    public static Message CreateBotMessage(User? from = null, Chat? chat = null)
    {
        var botUser = from ?? CreateRealisticBot();
        var messageChat = chat ?? CreateRealisticGroup();
        
        var messageFaker = new Faker<Message>()
            .RuleFor(m => m.MessageId, f => f.Random.Int(1, 10000))
            .RuleFor(m => m.Date, f => f.Date.Recent(7))
            .RuleFor(m => m.Chat, messageChat)
            .RuleFor(m => m.From, botUser)
            .RuleFor(m => m.Text, f => f.PickRandom("Bot message", "Service notification", "Automated response"))
            .RuleFor(m => m.IsAutomaticForward, false)
            .RuleFor(m => m.HasProtectedContent, false)
            .RuleFor(m => m.IsTopicMessage, false);

        return messageFaker.Generate();
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    /// <tags>bogus, start-command, faker</tags>
    /// </summary>
    public static Message CreateStartCommandMessage(User? from = null, Chat? chat = null)
    {
        var messageUser = from ?? CreateRealisticUser();
        var messageChat = chat ?? CreateRealisticGroup();
        
        var messageFaker = new Faker<Message>()
            .RuleFor(m => m.MessageId, f => f.Random.Int(1, 10000))
            .RuleFor(m => m.Date, f => f.Date.Recent(7))
            .RuleFor(m => m.Chat, messageChat)
            .RuleFor(m => m.From, messageUser)
            .RuleFor(m => m.Text, "/start")
            .RuleFor(m => m.IsAutomaticForward, false)
            .RuleFor(m => m.HasProtectedContent, false)
            .RuleFor(m => m.IsTopicMessage, false);

        return messageFaker.Generate();
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
    /// <tags>bogus, channel, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticChannel(long? chatId = null)
    {
        var channelFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -1000000000))
            .RuleFor(c => c.Type, ChatType.Channel)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Internet.UserName());

        return channelFaker.Generate();
    }
    
    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    /// <tags>bogus, spam-check, utility</tags>
    /// </summary>
    public static bool IsSpamText(string? text)
    {
        if (string.IsNullOrEmpty(text)) return false;
        
        var spamEmojis = new[] { "üî•", "üí∞", "üéÅ", "‚ö°", "üíé", "üöÄ", "üì±", "‚ùóÔ∏è" };
        var spamWords = new[] { "–≤–Ω–∏–º–∞–Ω–∏–µ", "–∑–∞—Ä–∞–±–æ—Ç–∞–ª", "–º–∏–ª–ª–∏–æ–Ω", "–¥–µ–Ω—å–≥–∏", "–±—ã—Å—Ç—Ä–æ", "—Å—Ä–æ—á–Ω–æ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "—Å–∫–∞–º", "bit.ly" };
        
        var lowerText = text.ToLowerInvariant();
        
        return spamEmojis.Any(p => text.Contains(p)) || 
               spamWords.Any(word => lowerText.Contains(word));
    }

    #endregion

    #region Utility Methods

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π Faker –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    /// <tags>bogus, faker, utility, base</tags>
    /// </summary>
    public static Faker GetFaker() => _faker;

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    /// <tags>bogus, russian-text, faker, utility</tags>
    /// </summary>
    public static string CreateRussianText(int sentences = 1)
    {
        return _faker.Lorem.Sentences(sentences);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π URL
    /// <tags>bogus, url, faker, utility</tags>
    /// </summary>
    public static string CreateRandomUrl()
    {
        return _faker.Internet.Url();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    /// <tags>bogus, date, faker, utility</tags>
    /// </summary>
    public static DateTime CreateRandomDate(int daysBack = 30)
    {
        return _faker.Date.Recent(daysBack);
    }

    #endregion
} 