{
  "generated": "2025-08-01T12:51:30.074736",
  "summary": {
    "components_count": 29,
    "methods_count": 351,
    "tags_count": 22,
    "categories": {
      "golden-master": 1,
      "core": 1,
      "mocks": 1,
      "specialized": 1,
      "autofixture": 1,
      "bogus": 1,
      "telegram": 1,
      "builders": 1,
      "infrastructure": 1
    }
  },
  "components": [
    {
      "file_path": "TestKit.GoldenMaster.cs",
      "file_name": "TestKit.GoldenMaster.cs",
      "class_name": "TestKitGoldenMaster",
      "class_description": "Golden Master инфраструктура для тестирования логики банов",
      "category": "golden-master",
      "methods": [
        {
          "name": "SetupGoldenMasterMocks",
          "return_type": "MessageHandlerTestFactory",
          "parameters": [
            "this MessageHandlerTestFactory factory"
          ],
          "description": "Создает стандартный набор моков для Golden Master тестов <tags>golden-master, mocks, test-setup</tags>",
          "tags": [
            "factory",
            "message",
            "golden-master",
            "mock",
            "setup"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandlerTestFactory SetupGoldenMasterMocks(this MessageHandlerTestFactory factory)",
          "line_number": 110
        },
        {
          "name": "CreateTemporaryBanScenario",
          "return_type": "BanScenario",
          "parameters": [],
          "description": "Создает сценарий временного бана <tags>golden-master, temporary-ban, scenario</tags>",
          "tags": [
            "factory",
            "ban",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public BanScenario CreateTemporaryBanScenario()",
          "line_number": 202
        },
        {
          "name": "CreatePermanentBanScenario",
          "return_type": "BanScenario",
          "parameters": [],
          "description": "Создает сценарий перманентного бана <tags>golden-master, permanent-ban, scenario</tags>",
          "tags": [
            "factory",
            "ban",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public BanScenario CreatePermanentBanScenario()",
          "line_number": 239
        },
        {
          "name": "CreatePrivateChatBanScenario",
          "return_type": "BanScenario",
          "parameters": [],
          "description": "Создает сценарий бана в приватном чате <tags>golden-master, private-chat, scenario</tags>",
          "tags": [
            "factory",
            "ban",
            "scenario",
            "chat"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public BanScenario CreatePrivateChatBanScenario()",
          "line_number": 276
        },
        {
          "name": "CreateNullMessageBanScenario",
          "return_type": "BanScenario",
          "parameters": [],
          "description": "Создает сценарий бана без сообщения <tags>golden-master, null-message, scenario</tags>",
          "tags": [
            "factory",
            "message",
            "scenario",
            "ban"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public BanScenario CreateNullMessageBanScenario()",
          "line_number": 312
        },
        {
          "name": "CreateBotBanScenario",
          "return_type": "BanScenario",
          "parameters": [],
          "description": "Создает сценарий бана бота <tags>golden-master, bot-ban, scenario</tags>",
          "tags": [
            "factory",
            "ban",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public BanScenario CreateBotBanScenario()",
          "line_number": 342
        },
        {
          "name": "CreateScenarioSet",
          "return_type": "List<BanScenario>",
          "parameters": [
            "int count = 20",
            "int baseSeed = 42"
          ],
          "description": "Создает набор разнообразных сценариев <tags>golden-master, scenario-set, variety</tags>",
          "tags": [
            "factory",
            "scenario",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<BanScenario> CreateScenarioSet(int count = 20, int baseSeed = 42)",
          "line_number": 390
        },
        {
          "name": "CreateExceptionScenarioSet",
          "return_type": "List<BanScenario>",
          "parameters": [
            "int count = 5",
            "int baseSeed = 100"
          ],
          "description": "Создает набор сценариев с исключениями <tags>golden-master, exception-scenarios, error-testing</tags>",
          "tags": [
            "factory",
            "scenario",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<BanScenario> CreateExceptionScenarioSet(int count = 5, int baseSeed = 100)",
          "line_number": 424
        }
      ],
      "lines_count": 439
    },
    {
      "file_path": "TestKit.UserJoinServiceBuilder.cs",
      "file_name": "TestKit.UserJoinServiceBuilder.cs",
      "class_name": "UserJoinServiceBuilder",
      "class_description": "Билдер для создания UserJoinService с настроенными зависимостями",
      "category": "core",
      "methods": [
        {
          "name": "WithStandardMocks",
          "return_type": "UserJoinServiceBuilder",
          "parameters": [],
          "description": "Настраивает стандартные моки для базового сценария <tags>builders, user-join-service, standard-mocks, fluent-api</tags>",
          "tags": [
            "builder",
            "user",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserJoinServiceBuilder WithStandardMocks()",
          "line_number": 47
        },
        {
          "name": "WithSuccessfulJoinScenario",
          "return_type": "UserJoinServiceBuilder",
          "parameters": [],
          "description": "Настраивает моки для сценария успешного присоединения пользователя <tags>builders, user-join-service, success-scenario, fluent-api</tags>",
          "tags": [
            "builder",
            "scenario",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserJoinServiceBuilder WithSuccessfulJoinScenario()",
          "line_number": 63
        },
        {
          "name": "WithBlacklistedUserScenario",
          "return_type": "UserJoinServiceBuilder",
          "parameters": [],
          "description": "Настраивает моки для сценария пользователя в блэклисте <tags>builders, user-join-service, blacklist-scenario, fluent-api</tags>",
          "tags": [
            "builder",
            "scenario",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserJoinServiceBuilder WithBlacklistedUserScenario()",
          "line_number": 73
        },
        {
          "name": "WithCaptchaScenario",
          "return_type": "UserJoinServiceBuilder",
          "parameters": [],
          "description": "Настраивает моки для сценария создания капчи <tags>builders, user-join-service, captcha-scenario, fluent-api</tags>",
          "tags": [
            "captcha",
            "builder",
            "scenario",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserJoinServiceBuilder WithCaptchaScenario()",
          "line_number": 83
        },
        {
          "name": "Build",
          "return_type": "UserJoinService",
          "parameters": [],
          "description": "Создает UserJoinService с настроенными зависимостями <tags>builders, user-join-service, build, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserJoinService Build()",
          "line_number": 93
        }
      ],
      "lines_count": 109
    },
    {
      "file_path": "TestKit.MessageHandlerBuilder.cs",
      "file_name": "TestKit.MessageHandlerBuilder.cs",
      "class_name": "MessageHandlerBuilder",
      "class_description": "Билдер для создания MessageHandler с настроенными зависимостями",
      "category": "core",
      "methods": [
        {
          "name": "WithModerationService",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "Action<ModerationServiceMockBuilder> configure"
          ],
          "description": "Настраивает модерационный сервис через билдер <tags>builders, message-handler, moderation-service, fluent-api</tags>",
          "tags": [
            "builder",
            "message",
            "moderation"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithModerationService(Action<ModerationServiceMockBuilder> configure)",
          "line_number": 52
        },
        {
          "name": "WithUserManager",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "Action<UserManagerMockBuilder> configure"
          ],
          "description": "Настраивает менеджер пользователей через билдер <tags>builders, message-handler, user-manager, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithUserManager(Action<UserManagerMockBuilder> configure)",
          "line_number": 71
        },
        {
          "name": "WithCaptchaService",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "Action<CaptchaServiceMockBuilder> configure"
          ],
          "description": "Настраивает сервис капчи через билдер <tags>builders, message-handler, captcha-service, fluent-api</tags>",
          "tags": [
            "captcha",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithCaptchaService(Action<CaptchaServiceMockBuilder> configure)",
          "line_number": 90
        },
        {
          "name": "WithAiChecks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "Action<AiChecksMockBuilder> configure"
          ],
          "description": "Настраивает AI проверки через билдер <tags>builders, message-handler, ai-checks, fluent-api</tags>",
          "tags": [
            "builder",
            "message",
            "ai"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithAiChecks(Action<AiChecksMockBuilder> configure)",
          "line_number": 107
        },
        {
          "name": "WithTelegramBot",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "Action<TelegramBotMockBuilder> configure"
          ],
          "description": "Настраивает Telegram бота через билдер <tags>builders, message-handler, telegram-bot, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "telegram"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithTelegramBot(Action<TelegramBotMockBuilder> configure)",
          "line_number": 124
        },
        {
          "name": "WithStandardMocks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [],
          "description": "Настраивает стандартные моки (базовая конфигурация) <tags>builders, message-handler, standard-mocks, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithStandardMocks()",
          "line_number": 153
        },
        {
          "name": "WithBanMocks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [],
          "description": "Настраивает моки для сценария бана <tags>builders, message-handler, ban-scenario, fluent-api</tags>",
          "tags": [
            "ban",
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithBanMocks()",
          "line_number": 191
        },
        {
          "name": "WithChannelMocks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [],
          "description": "Настраивает моки для сценария канала <tags>builders, message-handler, channel-scenario, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithChannelMocks()",
          "line_number": 213
        },
        {
          "name": "WithModerationMocks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "ModerationAction action = ModerationAction.Allow",
            "string reason = \"Test moderation\""
          ],
          "description": "Настраивает моки для сценария модерации <tags>builders, message-handler, moderation-scenario, fluent-api</tags>",
          "tags": [
            "builder",
            "message",
            "moderation",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithModerationMocks(ModerationAction action = ModerationAction.Allow, string reason = \"Test moderation\")",
          "line_number": 235
        },
        {
          "name": "WithAiMlMocks",
          "return_type": "MessageHandlerBuilder",
          "parameters": [
            "double probability = 0.8",
            "string reason = \"ML подозрение\""
          ],
          "description": "Настраивает моки для сценария AI/ML <tags>builders, message-handler, ai-ml-scenario, fluent-api</tags>",
          "tags": [
            "builder",
            "message",
            "ai",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerBuilder WithAiMlMocks(double probability = 0.8, string reason = \"ML подозрение\")",
          "line_number": 258
        },
        {
          "name": "Build",
          "return_type": "MessageHandler",
          "parameters": [],
          "description": "Создает MessageHandler с настроенными зависимостями <tags>builders, message-handler, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandler Build()",
          "line_number": 274
        },
        {
          "name": "BuildMock",
          "return_type": "Mock<IMessageHandler>",
          "parameters": [],
          "description": "Создает Mock<IMessageHandler> для прокси-сервисов <tags>builders, message-handler, proxy-services, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<IMessageHandler> BuildMock()",
          "line_number": 302
        }
      ],
      "lines_count": 359
    },
    {
      "file_path": "TestKit.Mocks.cs",
      "file_name": "TestKit.Mocks.cs",
      "class_name": "",
      "class_description": "",
      "category": "mocks",
      "methods": [
        {
          "name": "CreateMockBotClient",
          "return_type": "Mock<ITelegramBotClient>",
          "parameters": [],
          "description": "Создает мок ITelegramBotClient <tags>mock, telegram, bot-client, api</tags>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ITelegramBotClient> CreateMockBotClient()",
          "line_number": 56
        },
        {
          "name": "CreateTestBotClient",
          "return_type": "TelegramBotClient",
          "parameters": [],
          "description": "Создает реальный TelegramBotClient с унифицированным тестовым токеном Заменяет различные hardcoded токены в тестах <tags>telegram, bot-client, test-token, unified</tags>",
          "tags": [
            "factory",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static TelegramBotClient CreateTestBotClient()",
          "line_number": 71
        },
        {
          "name": "CreateTestToken",
          "return_type": "string",
          "parameters": [],
          "description": "Возвращает стандартный тестовый токен для всех тестов Унифицирует различные токены используемые в тестах <tags>telegram, test-token, unified</tags>",
          "tags": [
            "factory",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static string CreateTestToken()",
          "line_number": 81
        },
        {
          "name": "CreateMockBotClientWrapper",
          "return_type": "Mock<ITelegramBotClientWrapper>",
          "parameters": [],
          "description": "Создает мок ITelegramBotClientWrapper <tags>mock, telegram, bot-client-wrapper, api</tags>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ITelegramBotClientWrapper> CreateMockBotClientWrapper()",
          "line_number": 90
        },
        {
          "name": "CreateTestMessage",
          "return_type": "Message",
          "parameters": [
            "string text = \"Test message\""
          ],
          "description": "Создает тестовое сообщение <tags>mock, telegram, message, test-data</tags>",
          "tags": [
            "factory",
            "message",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateTestMessage(string text = \"Test message\")",
          "line_number": 111
        },
        {
          "name": "CreateTestUser",
          "return_type": "User",
          "parameters": [
            "string? username = \"test_user\"",
            "string? firstName = \"Test\"",
            "string? lastName = \"User\""
          ],
          "description": "Создает тестового пользователя",
          "tags": [
            "factory",
            "test-infrastructure",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateTestUser(string? username = \"test_user\", string? firstName = \"Test\", string? lastName = \"User\")",
          "line_number": 131
        },
        {
          "name": "CreateTestChat",
          "return_type": "Chat",
          "parameters": [
            "string? title = \"Test Chat\"",
            "ChatType type = ChatType.Group"
          ],
          "description": "Создает тестовый чат",
          "tags": [
            "factory",
            "test-infrastructure",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateTestChat(string? title = \"Test Chat\", ChatType type = ChatType.Group)",
          "line_number": 146
        },
        {
          "name": "CreateTestUpdate",
          "return_type": "Update",
          "parameters": [
            "Message? message = null"
          ],
          "description": "Создает тестовый Update",
          "tags": [
            "factory",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Update CreateTestUpdate(Message? message = null)",
          "line_number": 159
        },
        {
          "name": "CreateMockSpamHamClassifier",
          "return_type": "Mock<ISpamHamClassifier>",
          "parameters": [],
          "description": "Создает мок ISpamHamClassifier",
          "tags": [
            "factory",
            "spam",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ISpamHamClassifier> CreateMockSpamHamClassifier()",
          "line_number": 173
        },
        {
          "name": "CreateSpamHamClassifier",
          "return_type": "SpamHamClassifier",
          "parameters": [],
          "description": "Создает реальный SpamHamClassifier с мок-логгером",
          "tags": [
            "factory",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static SpamHamClassifier CreateSpamHamClassifier()",
          "line_number": 181
        },
        {
          "name": "CreateMockModerationService",
          "return_type": "Mock<IModerationService>",
          "parameters": [
            "ModerationAction action = ModerationAction.Allow",
            "string reason = \"Mock moderation\""
          ],
          "description": "Создает реальный SpamHamClassifier с мок-логгером",
          "tags": [
            "factory",
            "moderation",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IModerationService> CreateMockModerationService(ModerationAction action = ModerationAction.Allow, string reason = \"Mock moderation\")",
          "line_number": 187
        },
        {
          "name": "CreateMockCaptchaService",
          "return_type": "Mock<ICaptchaService>",
          "parameters": [],
          "description": "",
          "tags": [
            "captcha",
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ICaptchaService> CreateMockCaptchaService()",
          "line_number": 194
        },
        {
          "name": "CreateMockUserManager",
          "return_type": "Mock<IUserManager>",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "user",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IUserManager> CreateMockUserManager()",
          "line_number": 201
        },
        {
          "name": "CreateMockUserBanService",
          "return_type": "Mock<IUserBanService>",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "ban",
            "user",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IUserBanService> CreateMockUserBanService()",
          "line_number": 208
        },
        {
          "name": "CreateMockViolationTracker",
          "return_type": "Mock<IViolationTracker>",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IViolationTracker> CreateMockViolationTracker()",
          "line_number": 215
        },
        {
          "name": "CreateMockMessageService",
          "return_type": "Mock<IMessageService>",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "message",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IMessageService> CreateMockMessageService()",
          "line_number": 223
        },
        {
          "name": "CreateMockStatisticsService",
          "return_type": "Mock<IStatisticsService>",
          "parameters": [],
          "description": "<summary> Создает Mock IStatisticsService </summary>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IStatisticsService> CreateMockStatisticsService()",
          "line_number": 231
        },
        {
          "name": "CreateMockBotPermissionsService",
          "return_type": "Mock<IBotPermissionsService>",
          "parameters": [],
          "description": "<summary> Создает Mock IBotPermissionsService </summary>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IBotPermissionsService> CreateMockBotPermissionsService()",
          "line_number": 239
        },
        {
          "name": "CreateMockServiceProvider",
          "return_type": "Mock<IServiceProvider>",
          "parameters": [],
          "description": "<summary> Создает Mock IServiceProvider </summary>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IServiceProvider> CreateMockServiceProvider()",
          "line_number": 247
        },
        {
          "name": "CreateBanModerationService",
          "return_type": "Mock<IModerationService>",
          "parameters": [
            "string reason = \"Mock ban\""
          ],
          "description": "Создает мок IModerationService с предустановленным действием бана",
          "tags": [
            "factory",
            "ban",
            "moderation",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IModerationService> CreateBanModerationService(string reason = \"Mock ban\")",
          "line_number": 287
        },
        {
          "name": "CreateDeleteModerationService",
          "return_type": "Mock<IModerationService>",
          "parameters": [
            "string reason = \"Mock delete\""
          ],
          "description": "Создает мок IModerationService с предустановленным действием удаления",
          "tags": [
            "factory",
            "moderation",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IModerationService> CreateDeleteModerationService(string reason = \"Mock delete\")",
          "line_number": 295
        },
        {
          "name": "CreateSuccessfulCaptchaService",
          "return_type": "Mock<ICaptchaService>",
          "parameters": [],
          "description": "Создает мок ICaptchaService с предустановленным успешным ответом",
          "tags": [
            "captcha",
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ICaptchaService> CreateSuccessfulCaptchaService()",
          "line_number": 303
        },
        {
          "name": "CreateFailedCaptchaService",
          "return_type": "Mock<ICaptchaService>",
          "parameters": [],
          "description": "Создает мок ICaptchaService с предустановленным неуспешным ответом",
          "tags": [
            "captcha",
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<ICaptchaService> CreateFailedCaptchaService()",
          "line_number": 313
        },
        {
          "name": "CreateApprovedUserManager",
          "return_type": "Mock<IUserManager>",
          "parameters": [],
          "description": "Создает мок IUserManager с предустановленным одобренным пользователем",
          "tags": [
            "factory",
            "mock",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IUserManager> CreateApprovedUserManager()",
          "line_number": 323
        },
        {
          "name": "CreateUnapprovedUserManager",
          "return_type": "Mock<IUserManager>",
          "parameters": [],
          "description": "Создает мок IUserManager с предустановленным неодобренным пользователем",
          "tags": [
            "factory",
            "mock",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IUserManager> CreateUnapprovedUserManager()",
          "line_number": 333
        },
        {
          "name": "CreateBanTriggeringViolationTracker",
          "return_type": "Mock<IViolationTracker>",
          "parameters": [],
          "description": "Создает мок IViolationTracker с предустановленным триггером бана",
          "tags": [
            "factory",
            "ban",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IViolationTracker> CreateBanTriggeringViolationTracker()",
          "line_number": 343
        },
        {
          "name": "CreateSpamAiChecks",
          "return_type": "Mock<IAiChecks>",
          "parameters": [],
          "description": "Создает Mock IAiChecks для сценария \"спам\"",
          "tags": [
            "factory",
            "ai",
            "spam",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IAiChecks> CreateSpamAiChecks()",
          "line_number": 401
        },
        {
          "name": "CreateNormalAiChecks",
          "return_type": "Mock<IAiChecks>",
          "parameters": [],
          "description": "Создает Mock IAiChecks для сценария \"нормальное сообщение\"",
          "tags": [
            "factory",
            "ai",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IAiChecks> CreateNormalAiChecks()",
          "line_number": 414
        },
        {
          "name": "CreateSuspiciousUserAiChecks",
          "return_type": "Mock<IAiChecks>",
          "parameters": [],
          "description": "Создает Mock IAiChecks для сценария \"подозрительный пользователь\"",
          "tags": [
            "factory",
            "mock",
            "ai",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IAiChecks> CreateSuspiciousUserAiChecks()",
          "line_number": 427
        },
        {
          "name": "CreateErrorAiChecks",
          "return_type": "Mock<IAiChecks>",
          "parameters": [
            "Exception? exception = null"
          ],
          "description": "Создает Mock IAiChecks для сценария \"ошибка API\"",
          "tags": [
            "factory",
            "ai",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IAiChecks> CreateErrorAiChecks(Exception? exception = null)",
          "line_number": 440
        },
        {
          "name": "CreateMockAppConfig",
          "return_type": "Mock<IAppConfig>",
          "parameters": [],
          "description": "Создает мок IAppConfig с базовыми настройками",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IAppConfig> CreateMockAppConfig()",
          "line_number": 455
        },
        {
          "name": "CreateBotPermissionsServiceMock",
          "return_type": "Mock<IBotPermissionsService>",
          "parameters": [
            "bool isAdmin"
          ],
          "description": "Создает мок IBotPermissionsService с заданным значением isAdmin <tags>mock, bot-permissions, admin, test-infrastructure</tags>",
          "tags": [
            "factory",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IBotPermissionsService> CreateBotPermissionsServiceMock(bool isAdmin)",
          "line_number": 477
        },
        {
          "name": "CreateBotPermissionsServiceMockForChat",
          "return_type": "Mock<IBotPermissionsService>",
          "parameters": [
            "long adminChatId"
          ],
          "description": "Создает мок IBotPermissionsService, который возвращает true только для заданного chatId <tags>mock, bot-permissions, admin, test-infrastructure, chat-specific</tags>",
          "tags": [
            "factory",
            "chat",
            "mock"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static Mock<IBotPermissionsService> CreateBotPermissionsServiceMockForChat(long adminChatId)",
          "line_number": 491
        }
      ],
      "lines_count": 500
    },
    {
      "file_path": "TestKit.Specialized.cs",
      "file_name": "TestKit.Specialized.cs",
      "class_name": "Specialized",
      "class_description": "Специализированные генераторы для конкретных доменных областей",
      "category": "specialized",
      "methods": [
        {
          "name": "Valid",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Генераторы для работы с капчей <tags>captcha, moderation, user-verification</tags>",
          "tags": [
            "valid"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo Valid() => TestDataFactory.CreateValidCaptchaInfo();",
          "line_number": 38
        },
        {
          "name": "Expired",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Валидная капча для тестов <tags>captcha, valid, user-verification</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo Expired() => TestDataFactory.CreateExpiredCaptchaInfo();",
          "line_number": 44
        },
        {
          "name": "Bait",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Истекшая капча для тестов <tags>captcha, expired, user-verification</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo Bait() => TestDataFactory.CreateBaitCaptchaInfo();",
          "line_number": 50
        },
        {
          "name": "CorrectResult",
          "return_type": "bool",
          "parameters": [],
          "description": "Приманка-капча для тестов <tags>captcha, bait, user-verification</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool CorrectResult() => TestDataFactory.CreateCorrectCaptchaResult();",
          "line_number": 56
        },
        {
          "name": "IncorrectResult",
          "return_type": "bool",
          "parameters": [],
          "description": "Правильный результат капчи <tags>captcha, correct, result</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool IncorrectResult() => TestDataFactory.CreateIncorrectCaptchaResult();",
          "line_number": 62
        },
        {
          "name": "Allow",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Генераторы для результатов модерации <tags>moderation, ml, ai, spam-detection</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult Allow() => TestDataFactory.CreateAllowResult();",
          "line_number": 75
        },
        {
          "name": "Delete",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Результат модерации: разрешить сообщение <tags>moderation, allow, ml, ai</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult Delete() => TestDataFactory.CreateDeleteResult();",
          "line_number": 81
        },
        {
          "name": "Ban",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Результат модерации: удалить сообщение <tags>moderation, delete, ml, ai</tags>",
          "tags": [
            "ban"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult Ban() => TestDataFactory.CreateBanResult();",
          "line_number": 87
        },
        {
          "name": "ApproveCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Генераторы для админских действий <tags>admin, callback, moderation, admin-actions</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery ApproveCallback() => TestDataFactory.CreateAdminApproveCallback();",
          "line_number": 100
        },
        {
          "name": "BanCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Callback для одобрения пользователя админом <tags>admin, callback, approve, moderation</tags>",
          "tags": [
            "ban"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery BanCallback() => TestDataFactory.CreateAdminBanCallback();",
          "line_number": 106
        },
        {
          "name": "SkipCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Callback для бана пользователя админом <tags>admin, callback, ban, moderation</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery SkipCallback() => TestDataFactory.CreateAdminSkipCallback();",
          "line_number": 112
        },
        {
          "name": "Notification",
          "return_type": "Message",
          "parameters": [],
          "description": "Callback для пропуска пользователя админом <tags>admin, callback, skip, moderation</tags>",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message Notification() => TestDataFactory.CreateAdminNotificationMessage();",
          "line_number": 118
        },
        {
          "name": "StatsCommand",
          "return_type": "Message",
          "parameters": [],
          "description": "Уведомление для админов <tags>admin, notification, moderation</tags>",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message StatsCommand() => TestDataFactory.CreateStatsCommandMessage();",
          "line_number": 124
        },
        {
          "name": "HelpCommand",
          "return_type": "Message",
          "parameters": [],
          "description": "Команда статистики для админов <tags>admin, stats, command</tags>",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message HelpCommand() => TestDataFactory.CreateHelpCommandMessage();",
          "line_number": 130
        },
        {
          "name": "MemberJoined",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Генераторы для обновлений чата <tags>chat, updates, member-management</tags>",
          "tags": [
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberJoined() => TestDataFactory.CreateMemberJoined();",
          "line_number": 143
        },
        {
          "name": "MemberLeft",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Пользователь присоединился к чату <tags>chat, member, joined, updates</tags>",
          "tags": [
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberLeft() => TestDataFactory.CreateMemberLeft();",
          "line_number": 149
        },
        {
          "name": "MemberBanned",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Пользователь покинул чат <tags>chat, member, left, updates</tags>",
          "tags": [
            "ban",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberBanned() => TestDataFactory.CreateMemberBanned();",
          "line_number": 155
        },
        {
          "name": "MemberRestricted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Пользователь забанен в чате <tags>chat, member, banned, updates, ban</tags>",
          "tags": [
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberRestricted() => TestDataFactory.CreateMemberRestricted();",
          "line_number": 161
        },
        {
          "name": "MemberPromoted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Пользователь ограничен в чате <tags>chat, member, restricted, updates</tags>",
          "tags": [
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberPromoted() => TestDataFactory.CreateMemberPromoted();",
          "line_number": 167
        },
        {
          "name": "MemberDemoted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Пользователь повышен в чате <tags>chat, member, promoted, updates</tags>",
          "tags": [
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated MemberDemoted() => TestDataFactory.CreateMemberDemoted();",
          "line_number": 173
        },
        {
          "name": "Valid",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Генераторы для callback query'ев <tags>callback, query, interaction</tags>",
          "tags": [
            "valid"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery Valid() => TestDataFactory.CreateValidCallbackQuery();",
          "line_number": 186
        },
        {
          "name": "Invalid",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Валидный callback query <tags>callback, valid, interaction</tags>",
          "tags": [
            "invalid"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery Invalid() => TestDataFactory.CreateInvalidCallbackQuery();",
          "line_number": 192
        },
        {
          "name": "SuspiciousUser",
          "return_type": "Message",
          "parameters": [],
          "description": "Генераторы для специальных сообщений <tags>messages, special, domain-specific</tags>",
          "tags": [
            "message",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message SuspiciousUser() => TestDataFactory.CreateSuspiciousUserMessage();",
          "line_number": 205
        },
        {
          "name": "NewUserJoin",
          "return_type": "Message",
          "parameters": [
            "long userId = 12345"
          ],
          "description": "Сообщение от подозрительного пользователя <tags>messages, suspicious, user, ai-analysis</tags>",
          "tags": [
            "message",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message NewUserJoin(long userId = 12345) => TestDataFactory.CreateNewUserJoinMessage(userId);",
          "line_number": 211
        },
        {
          "name": "Bait",
          "return_type": "User",
          "parameters": [],
          "description": "Генераторы для специальных пользователей <tags>users, special, domain-specific</tags>",
          "tags": [
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User Bait() => TestDataFactory.CreateBaitUser();",
          "line_number": 313
        },
        {
          "name": "UserForBan",
          "return_type": "User",
          "parameters": [],
          "description": "Пользователь для тестов банов <tags>ban, user, integration, deprecated</tags>",
          "tags": [
            "ban",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User UserForBan() => TestDataFactory.CreateValidUser();",
          "line_number": 481
        },
        {
          "name": "ChatForBanTest",
          "return_type": "Chat",
          "parameters": [],
          "description": "Чат для тестов банов <tags>ban, chat, integration, deprecated</tags>",
          "tags": [
            "chat",
            "ban",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat ChatForBanTest() => TestDataFactory.CreateGroupChat();",
          "line_number": 488
        },
        {
          "name": "SpamMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Спам сообщение для тестов банов <tags>ban, spam, message, moderation, deprecated</tags>",
          "tags": [
            "message",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message SpamMessage() => TestDataFactory.CreateSpamMessage();",
          "line_number": 495
        },
        {
          "name": "ChannelMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Сообщение от канала для тестов банов <tags>ban, channel, message, moderation, deprecated</tags>",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message ChannelMessage() => TestDataFactory.CreateChannelMessage(-100123456789, -1009876543210);",
          "line_number": 502
        },
        {
          "name": "BanResult",
          "return_type": "ModerationResult",
          "parameters": [
            "string reason = \"Спам\""
          ],
          "description": "Результат модерации: бан <tags>ban, moderation, result, ml</tags>",
          "tags": [
            "ban"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult BanResult(string reason = \"Спам\") => new ModerationResult(ModerationAction.Ban, reason);",
          "line_number": 508
        },
        {
          "name": "DeleteResult",
          "return_type": "ModerationResult",
          "parameters": [
            "string reason = \"ML решил что это спам\""
          ],
          "description": "Результат модерации: бан <tags>ban, moderation, result, ml</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult DeleteResult(string reason = \"ML решил что это спам\") => new ModerationResult(ModerationAction.Delete, reason);",
          "line_number": 514
        },
        {
          "name": "AllowResult",
          "return_type": "ModerationResult",
          "parameters": [
            "string reason = \"Valid message\""
          ],
          "description": "Результат модерации: удаление <tags>ban, moderation, delete, result, ml</tags>",
          "tags": [],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult AllowResult(string reason = \"Valid message\") => new ModerationResult(ModerationAction.Allow, reason);",
          "line_number": 520
        },
        {
          "name": "ForBanTest",
          "return_type": "Chat",
          "parameters": [],
          "description": "Генераторы для чатов <tags>chat, domain-specific, test-scenarios</tags>",
          "tags": [
            "ban",
            "test-infrastructure",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat ForBanTest() => TestDataFactory.CreateGroupChat();",
          "line_number": 533
        },
        {
          "name": "ForChannelTest",
          "return_type": "Chat",
          "parameters": [],
          "description": "Чат для тестов банов <tags>chat, ban, integration</tags>",
          "tags": [
            "chat",
            "test-infrastructure"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat ForChannelTest()",
          "line_number": 539
        },
        {
          "name": "CompleteSetup",
          "return_type": "ModerationSetup",
          "parameters": [],
          "description": "Создает полный setup ModerationService со всеми реальными и мокированными зависимостями Заменяет ~45 строк дублированного кода в SetUp методах",
          "tags": [
            "setup"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationSetup CompleteSetup()",
          "line_number": 584
        },
        {
          "name": "MinimalSetup",
          "return_type": "ModerationSetup",
          "parameters": [],
          "description": "Создает минимальный setup только с необходимыми компонентами Для простых unit тестов где не нужны все зависимости",
          "tags": [
            "setup"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationSetup MinimalSetup()",
          "line_number": 646
        }
      ],
      "lines_count": 747
    },
    {
      "file_path": "TestKit.AutoFixture.cs",
      "file_name": "TestKit.AutoFixture.cs",
      "class_name": "TestKitAutoFixture",
      "class_description": "Расширение TestKit с AutoFixture для автоматического создания тестовых объектов",
      "category": "autofixture",
      "methods": [
        {
          "name": "CreateFixture",
          "return_type": "IFixture",
          "parameters": [],
          "description": "Расширение TestKit с AutoFixture для автоматического создания тестовых объектов <tags>autofixture, auto-generation, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "autofixture"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IFixture CreateFixture() => Infra.TestKitAutoFixture.CreateFixture();",
          "line_number": 23
        },
        {
          "name": "GetFixture",
          "return_type": "IFixture",
          "parameters": [],
          "description": "Создает настроенный AutoFixture с кастомизациями для Telegram-типов <tags>autofixture, customization, telegram, test-infrastructure</tags>",
          "tags": [
            "autofixture"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IFixture GetFixture() => Infra.TestKitAutoFixture.GetFixture();",
          "line_number": 29
        },
        {
          "name": "CreateMessageHandler",
          "return_type": "MessageHandler",
          "parameters": [],
          "description": "Заполняет свойства существующего объекта <tags>autofixture, populate, fill-properties, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandler CreateMessageHandler() => Infra.TestKitAutoFixture.CreateMessageHandler();",
          "line_number": 53
        },
        {
          "name": "CreateModerationService",
          "return_type": "ModerationService",
          "parameters": [],
          "description": "Создает MessageHandler с автозависимостями <tags>autofixture, message-handler, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "moderation"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationService CreateModerationService() => Infra.TestKitAutoFixture.CreateModerationService();",
          "line_number": 59
        },
        {
          "name": "CreateRealisticUsers",
          "return_type": "List<Telegram.Bot.Types.User>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает ModerationService с автозависимостями <tags>autofixture, moderation-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "collection",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.User> CreateRealisticUsers(int count = 3) => Infra.TestKitAutoFixture.CreateRealisticUsers(count);",
          "line_number": 65
        },
        {
          "name": "CreateRealisticMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает список реалистичных пользователей <tags>autofixture, users, realistic, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "bogus",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateRealisticMessages(int count = 3) => Infra.TestKitAutoFixture.CreateRealisticMessages(count);",
          "line_number": 71
        },
        {
          "name": "CreateCaptchaService",
          "return_type": "ICaptchaService",
          "parameters": [],
          "description": "Создает CaptchaService с автозависимостями <tags>autofixture, captcha-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ICaptchaService CreateCaptchaService() => Infra.TestKitAutoFixture.CreateCaptchaService();",
          "line_number": 116
        },
        {
          "name": "CreateUserManager",
          "return_type": "IUserManager",
          "parameters": [],
          "description": "Создает CaptchaService с автозависимостями <tags>autofixture, captcha-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IUserManager CreateUserManager() => Infra.TestKitAutoFixture.CreateUserManager();",
          "line_number": 122
        },
        {
          "name": "CreateManyMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает CallbackQueryUpdate <tags>autofixture, callback-query-update, telegram, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateManyMessages(int count = 3) => Infra.TestKitAutoFixture.CreateManyMessages(count);",
          "line_number": 146
        },
        {
          "name": "CreateManyUsers",
          "return_type": "List<Telegram.Bot.Types.User>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает много сообщений <tags>autofixture, many-messages, collection, test-infrastructure</tags>",
          "tags": [
            "factory",
            "collection",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.User> CreateManyUsers(int count = 3) => Infra.TestKitAutoFixture.CreateManyUsers(count);",
          "line_number": 152
        },
        {
          "name": "CreateManySpamMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает много пользователей <tags>autofixture, many-users, collection, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "spam",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateManySpamMessages(int count = 3) => Infra.TestKitAutoFixture.CreateManySpamMessages(count);",
          "line_number": 158
        }
      ],
      "lines_count": 167
    },
    {
      "file_path": "TestKit.Main.cs",
      "file_name": "TestKit.Main.cs",
      "class_name": "",
      "class_description": "",
      "category": "core",
      "methods": [
        {
          "name": "CreateValidMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает валидное сообщение <tags>message, valid, basic, telegram</tags>",
          "tags": [
            "valid",
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateValidMessage() => TestDataFactory.CreateValidMessage();",
          "line_number": 24
        },
        {
          "name": "CreateValidMessageWithId",
          "return_type": "Message",
          "parameters": [
            "long messageId = 123"
          ],
          "description": "Создает валидное сообщение <tags>message, valid, basic, telegram</tags>",
          "tags": [
            "valid",
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateValidMessageWithId(long messageId = 123) => TestDataFactory.CreateValidMessageWithId(messageId);",
          "line_number": 30
        },
        {
          "name": "CreateSpamMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает валидное сообщение с указанным ID <tags>message, valid, id, basic, telegram</tags>",
          "tags": [
            "factory",
            "message",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateSpamMessage() => TestDataFactory.CreateSpamMessage();",
          "line_number": 36
        },
        {
          "name": "CreateEmptyMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает спам-сообщение <tags>message, spam, moderation, ml</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateEmptyMessage() => TestDataFactory.CreateEmptyMessage();",
          "line_number": 42
        },
        {
          "name": "CreateLongMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает пустое сообщение <tags>message, empty, basic, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateLongMessage() => TestDataFactory.CreateLongMessage();",
          "line_number": 48
        },
        {
          "name": "CreateNullTextMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает длинное сообщение <tags>message, long, basic, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateNullTextMessage() => TestDataFactory.CreateNullTextMessage();",
          "line_number": 54
        },
        {
          "name": "CreateValidUser",
          "return_type": "User",
          "parameters": [],
          "description": "Создает сообщение с null текстом <tags>message, null-text, basic, telegram</tags>",
          "tags": [
            "valid",
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateValidUser() => TestDataFactory.CreateValidUser();",
          "line_number": 60
        },
        {
          "name": "CreateBotUser",
          "return_type": "User",
          "parameters": [],
          "description": "Создает валидного пользователя <tags>user, valid, basic, telegram</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateBotUser() => TestDataFactory.CreateBotUser();",
          "line_number": 66
        },
        {
          "name": "CreateAnonymousUser",
          "return_type": "User",
          "parameters": [],
          "description": "Создает бота-пользователя <tags>user, bot, basic, telegram</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateAnonymousUser() => TestDataFactory.CreateAnonymousUser();",
          "line_number": 72
        },
        {
          "name": "CreateGroupChat",
          "return_type": "Chat",
          "parameters": [],
          "description": "Создает анонимного пользователя <tags>user, anonymous, basic, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateGroupChat() => TestDataFactory.CreateGroupChat();",
          "line_number": 78
        },
        {
          "name": "CreateSupergroupChat",
          "return_type": "Chat",
          "parameters": [],
          "description": "Создает групповой чат <tags>chat, group, basic, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateSupergroupChat() => TestDataFactory.CreateSupergroupChat();",
          "line_number": 84
        },
        {
          "name": "CreateChannel",
          "return_type": "Chat",
          "parameters": [],
          "description": "Создает супергруппу <tags>chat, supergroup, basic, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateChannel() => ClubDoorman.Test.TestKit.TestKitBogus.CreateRealisticChannel();",
          "line_number": 90
        },
        {
          "name": "CreatePrivateChat",
          "return_type": "Chat",
          "parameters": [],
          "description": "Создает канал <tags>chat, channel, basic, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreatePrivateChat() => TestDataFactory.CreatePrivateChat();",
          "line_number": 96
        },
        {
          "name": "CreateTextMessage",
          "return_type": "Message",
          "parameters": [
            "long userId",
            "long chatId",
            "string text = \"Test message\""
          ],
          "description": "Создает приватный чат <tags>chat, private, basic, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateTextMessage(long userId, long chatId, string text = \"Test message\") => TestDataFactory.CreateTextMessage(userId, chatId, text);",
          "line_number": 102
        },
        {
          "name": "CreateChannelMessage",
          "return_type": "Message",
          "parameters": [
            "long senderChatId",
            "long chatId",
            "string text = \"Channel message\""
          ],
          "description": "Создает текстовое сообщение <tags>message, text, basic, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateChannelMessage(long senderChatId, long chatId, string text = \"Channel message\") => TestDataFactory.CreateChannelMessage(senderChatId, chatId, text);",
          "line_number": 108
        },
        {
          "name": "CreateNewUserJoinMessage",
          "return_type": "Message",
          "parameters": [
            "long userId = 12345"
          ],
          "description": "Создает сообщение канала <tags>message, channel, basic, telegram</tags>",
          "tags": [
            "factory",
            "message",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateNewUserJoinMessage(long userId = 12345) => TestDataFactory.CreateNewUserJoinMessage(userId);",
          "line_number": 114
        },
        {
          "name": "CreateSuspiciousUserMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает сообщение о присоединении нового пользователя <tags>message, new-user, join, member, telegram</tags>",
          "tags": [
            "factory",
            "message",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateSuspiciousUserMessage() => TestDataFactory.CreateSuspiciousUserMessage();",
          "line_number": 120
        },
        {
          "name": "CreateAdminNotificationMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает сообщение от подозрительного пользователя <tags>message, suspicious, user, ai-analysis, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateAdminNotificationMessage() => TestDataFactory.CreateAdminNotificationMessage();",
          "line_number": 126
        },
        {
          "name": "CreateStatsCommandMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает уведомление для админов <tags>message, admin, notification, moderation, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateStatsCommandMessage() => TestDataFactory.CreateStatsCommandMessage();",
          "line_number": 132
        },
        {
          "name": "CreateHelpCommandMessage",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает команду статистики <tags>message, admin, stats, command, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateHelpCommandMessage() => TestDataFactory.CreateHelpCommandMessage();",
          "line_number": 138
        },
        {
          "name": "CreateValidCallbackQuery",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Создает команду помощи <tags>message, admin, help, command, telegram</tags>",
          "tags": [
            "valid",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery CreateValidCallbackQuery() => TestDataFactory.CreateValidCallbackQuery();",
          "line_number": 144
        },
        {
          "name": "CreateInvalidCallbackQuery",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Создает валидный callback query <tags>callback, valid, interaction, telegram</tags>",
          "tags": [
            "invalid",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery CreateInvalidCallbackQuery() => TestDataFactory.CreateInvalidCallbackQuery();",
          "line_number": 150
        },
        {
          "name": "CreateAdminApproveCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Создает невалидный callback query <tags>callback, invalid, interaction, telegram</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery CreateAdminApproveCallback() => TestDataFactory.CreateAdminApproveCallback();",
          "line_number": 156
        },
        {
          "name": "CreateAdminBanCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Создает callback для одобрения админом <tags>callback, admin, approve, moderation, telegram</tags>",
          "tags": [
            "factory",
            "ban"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery CreateAdminBanCallback() => TestDataFactory.CreateAdminBanCallback();",
          "line_number": 162
        },
        {
          "name": "CreateAdminSkipCallback",
          "return_type": "CallbackQuery",
          "parameters": [],
          "description": "Создает callback для бана админом <tags>callback, admin, ban, moderation, telegram</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQuery CreateAdminSkipCallback() => TestDataFactory.CreateAdminSkipCallback();",
          "line_number": 168
        },
        {
          "name": "CreateMessageUpdate",
          "return_type": "Update",
          "parameters": [],
          "description": "Создает callback для пропуска админом <tags>callback, admin, skip, moderation, telegram</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Update CreateMessageUpdate() => TestDataFactory.CreateMessageUpdate();",
          "line_number": 174
        },
        {
          "name": "CreateCallbackQueryUpdate",
          "return_type": "Update",
          "parameters": [],
          "description": "Создает update с сообщением <tags>update, message, basic, telegram</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Update CreateCallbackQueryUpdate() => TestDataFactory.CreateCallbackQueryUpdate();",
          "line_number": 180
        },
        {
          "name": "CreateChatMemberUpdate",
          "return_type": "Update",
          "parameters": [],
          "description": "Создает update с callback query <tags>update, callback, interaction, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Update CreateChatMemberUpdate() => TestDataFactory.CreateChatMemberUpdate();",
          "line_number": 186
        },
        {
          "name": "CreateBaitCaptchaInfo",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Создает update с изменением участника чата <tags>update, chat-member, member-management, telegram</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo CreateBaitCaptchaInfo() => TestDataFactory.CreateBaitCaptchaInfo();",
          "line_number": 192
        },
        {
          "name": "CreateAllowResult",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Создает приманку-капчу <tags>captcha, bait, user-verification, moderation</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult CreateAllowResult() => TestDataFactory.CreateAllowResult();",
          "line_number": 198
        },
        {
          "name": "CreateDeleteResult",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Создает результат модерации: разрешить <tags>moderation, allow, result, ml, ai</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult CreateDeleteResult() => TestDataFactory.CreateDeleteResult();",
          "line_number": 204
        },
        {
          "name": "CreateBanResult",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Создает результат модерации: удалить <tags>moderation, delete, result, ml, ai</tags>",
          "tags": [
            "factory",
            "ban"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResult CreateBanResult() => TestDataFactory.CreateBanResult();",
          "line_number": 210
        },
        {
          "name": "CreateValidCaptchaInfo",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Создает результат модерации: забанить <tags>moderation, ban, result, ml, ai</tags>",
          "tags": [
            "captcha",
            "factory",
            "valid"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo CreateValidCaptchaInfo() => TestDataFactory.CreateValidCaptchaInfo();",
          "line_number": 216
        },
        {
          "name": "CreateExpiredCaptchaInfo",
          "return_type": "CaptchaInfo",
          "parameters": [],
          "description": "Создает валидную капчу <tags>captcha, valid, user-verification, moderation</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaInfo CreateExpiredCaptchaInfo() => TestDataFactory.CreateExpiredCaptchaInfo();",
          "line_number": 222
        },
        {
          "name": "CreateCorrectCaptchaResult",
          "return_type": "bool",
          "parameters": [],
          "description": "Создает истекшую капчу <tags>captcha, expired, user-verification, moderation</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool CreateCorrectCaptchaResult() => TestDataFactory.CreateCorrectCaptchaResult();",
          "line_number": 228
        },
        {
          "name": "CreateIncorrectCaptchaResult",
          "return_type": "bool",
          "parameters": [],
          "description": "Создает правильный результат капчи <tags>captcha, correct, result, user-verification</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool CreateIncorrectCaptchaResult() => TestDataFactory.CreateIncorrectCaptchaResult();",
          "line_number": 234
        },
        {
          "name": "CreateBaitUser",
          "return_type": "User",
          "parameters": [],
          "description": "Создает неправильный результат капчи <tags>captcha, incorrect, result, user-verification</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateBaitUser() => TestDataFactory.CreateBaitUser();",
          "line_number": 240
        },
        {
          "name": "CreateMemberJoined",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие присоединения участника <tags>chat-member, joined, member-management, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberJoined() => TestDataFactory.CreateMemberJoined();",
          "line_number": 250
        },
        {
          "name": "CreateMemberLeft",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие присоединения участника <tags>chat-member, joined, member-management, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberLeft() => TestDataFactory.CreateMemberLeft();",
          "line_number": 256
        },
        {
          "name": "CreateMemberBanned",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие выхода участника <tags>chat-member, left, member-management, telegram</tags>",
          "tags": [
            "factory",
            "ban",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberBanned() => TestDataFactory.CreateMemberBanned();",
          "line_number": 262
        },
        {
          "name": "CreateMemberRestricted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие бана участника <tags>chat-member, banned, member-management, ban, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberRestricted() => TestDataFactory.CreateMemberRestricted();",
          "line_number": 268
        },
        {
          "name": "CreateMemberPromoted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие ограничения участника <tags>chat-member, restricted, member-management, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberPromoted() => TestDataFactory.CreateMemberPromoted();",
          "line_number": 274
        },
        {
          "name": "CreateMemberDemoted",
          "return_type": "ChatMemberUpdated",
          "parameters": [],
          "description": "Создает событие повышения участника <tags>chat-member, promoted, member-management, telegram</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberUpdated CreateMemberDemoted() => TestDataFactory.CreateMemberDemoted();",
          "line_number": 280
        }
      ],
      "lines_count": 284
    },
    {
      "file_path": "TestKit.Bogus.cs",
      "file_name": "TestKit.Bogus.cs",
      "class_name": "TestKitBogus",
      "class_description": "Расширение TestKit с Bogus для генерации реалистичных тестовых данных",
      "category": "bogus",
      "methods": [
        {
          "name": "CreateRealisticUser",
          "return_type": "User",
          "parameters": [
            "long? userId = null"
          ],
          "description": "Создает реалистичного пользователя с Bogus <tags>bogus, user, realistic, faker</tags>",
          "tags": [
            "factory",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateRealisticUser(long? userId = null) => Infra.TestKitBogus.CreateRealisticUser(userId);",
          "line_number": 20
        },
        {
          "name": "CreateRealisticBot",
          "return_type": "User",
          "parameters": [
            "long? botId = null"
          ],
          "description": "Создает реалистичного пользователя с Bogus <tags>bogus, user, realistic, faker</tags>",
          "tags": [
            "factory",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateRealisticBot(long? botId = null) => Infra.TestKitBogus.CreateRealisticBot(botId);",
          "line_number": 26
        },
        {
          "name": "CreateSuspiciousUser",
          "return_type": "User",
          "parameters": [
            "long? userId = null"
          ],
          "description": "Создает бота с реалистичными данными <tags>bogus, bot, realistic, faker</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateSuspiciousUser(long? userId = null) => Infra.TestKitBogus.CreateSuspiciousUser(userId);",
          "line_number": 32
        },
        {
          "name": "CreateRealisticGroup",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает реалистичную группу с Bogus <tags>bogus, group, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticGroup(long? chatId = null) => Infra.TestKitBogus.CreateRealisticGroup(chatId);",
          "line_number": 42
        },
        {
          "name": "CreateRealisticSupergroup",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает реалистичную группу с Bogus <tags>bogus, group, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticSupergroup(long? chatId = null) => Infra.TestKitBogus.CreateRealisticSupergroup(chatId);",
          "line_number": 48
        },
        {
          "name": "CreateRealisticPrivateChat",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает реалистичный супергруппу <tags>bogus, supergroup, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticPrivateChat(long? chatId = null) => Infra.TestKitBogus.CreateRealisticPrivateChat(chatId);",
          "line_number": 54
        },
        {
          "name": "CreateRealisticMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает реалистичное сообщение <tags>bogus, message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateRealisticMessage(User? from = null, Chat? chat = null) => Infra.TestKitBogus.CreateRealisticMessage(from, chat);",
          "line_number": 64
        },
        {
          "name": "CreateSpamMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает реалистичное сообщение <tags>bogus, message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateSpamMessage(User? from = null, Chat? chat = null) => Infra.TestKitBogus.CreateSpamMessage(from, chat);",
          "line_number": 70
        },
        {
          "name": "CreateMediaMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает спам-сообщение <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateMediaMessage(User? from = null, Chat? chat = null) => Infra.TestKitBogus.CreateMediaMessage(from, chat);",
          "line_number": 76
        },
        {
          "name": "CreateUserList",
          "return_type": "List<User>",
          "parameters": [
            "int count = 5"
          ],
          "description": "Создает список случайных пользователей <tags>bogus, users, collection, faker</tags>",
          "tags": [
            "factory",
            "collection",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<User> CreateUserList(int count = 5) => Infra.TestKitBogus.CreateUserList(count);",
          "line_number": 86
        },
        {
          "name": "CreateConversation",
          "return_type": "List<Message>",
          "parameters": [
            "Chat chat",
            "List<User> participants",
            "int messageCount = 10"
          ],
          "description": "Создает список случайных пользователей <tags>bogus, users, collection, faker</tags>",
          "tags": [
            "factory",
            "message",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Message> CreateConversation(Chat chat, List<User> participants, int messageCount = 10) =>",
          "line_number": 92
        },
        {
          "name": "GetFaker",
          "return_type": "Faker",
          "parameters": [],
          "description": "Получает базовый Faker для дополнительных генераций <tags>bogus, faker, utility, base</tags>",
          "tags": [
            "fake"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Faker GetFaker() => Infra.TestKitBogus.GetFaker();",
          "line_number": 103
        },
        {
          "name": "CreateRussianText",
          "return_type": "string",
          "parameters": [
            "int sentences = 1"
          ],
          "description": "Получает базовый Faker для дополнительных генераций <tags>bogus, faker, utility, base</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static string CreateRussianText(int sentences = 1) => Infra.TestKitBogus.CreateRussianText(sentences);",
          "line_number": 109
        },
        {
          "name": "CreateRandomUrl",
          "return_type": "string",
          "parameters": [],
          "description": "Создает случайный текст на русском языке <tags>bogus, russian-text, faker, utility</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static string CreateRandomUrl() => Infra.TestKitBogus.CreateRandomUrl();",
          "line_number": 115
        },
        {
          "name": "CreateRandomDate",
          "return_type": "DateTime",
          "parameters": [
            "int daysBack = 30"
          ],
          "description": "Создает случайный URL <tags>bogus, url, faker, utility</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static DateTime CreateRandomDate(int daysBack = 30) => Infra.TestKitBogus.CreateRandomDate(daysBack);",
          "line_number": 121
        },
        {
          "name": "CreateRealisticSpamMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает спам-сообщение с реалистичными паттернами (alias) <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "spam",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateRealisticSpamMessage(User? from = null, Chat? chat = null) => Infra.TestKitBogus.CreateRealisticSpamMessage(from, chat);",
          "line_number": 131
        },
        {
          "name": "CreateRealisticChannel",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает спам-сообщение с реалистичными паттернами (alias) <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticChannel(long? chatId = null) => Infra.TestKitBogus.CreateRealisticChannel(chatId);",
          "line_number": 137
        },
        {
          "name": "IsSpamText",
          "return_type": "bool",
          "parameters": [
            "string? text"
          ],
          "description": "Создает реалистичный канал <tags>bogus, channel, realistic, faker</tags>",
          "tags": [
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool IsSpamText(string? text) => Infra.TestKitBogus.IsSpamText(text);",
          "line_number": 143
        }
      ],
      "lines_count": 146
    },
    {
      "file_path": "TestKit.Telegram.cs",
      "file_name": "TestKit.Telegram.cs",
      "class_name": "TestKitTelegram",
      "class_description": "Улучшенная работа с Telegram объектами для тестов",
      "category": "telegram",
      "methods": [
        {
          "name": "CreateFakeClient",
          "return_type": "FakeTelegramClient",
          "parameters": [],
          "description": "Создает FakeTelegramClient с предустановленными настройками <tags>telegram, fake-client, test-infrastructure</tags>",
          "tags": [
            "factory",
            "fake"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static FakeTelegramClient CreateFakeClient()",
          "line_number": 21
        },
        {
          "name": "CreateMessageFromEnvelope",
          "return_type": "Message",
          "parameters": [
            "FakeTelegramClient fakeClient",
            "MessageEnvelope envelope"
          ],
          "description": "Создает Message из MessageEnvelope через FakeTelegramClient <tags>telegram, message, message-envelope, fake-client, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateMessageFromEnvelope(FakeTelegramClient fakeClient, MessageEnvelope envelope)",
          "line_number": 105
        },
        {
          "name": "CreateUpdateFromEnvelope",
          "return_type": "Update",
          "parameters": [
            "FakeTelegramClient fakeClient",
            "MessageEnvelope envelope"
          ],
          "description": "Создает Update с Message из MessageEnvelope",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Update CreateUpdateFromEnvelope(FakeTelegramClient fakeClient, MessageEnvelope envelope)",
          "line_number": 114
        },
        {
          "name": "ResetMessageIdCounter",
          "return_type": "void",
          "parameters": [],
          "description": "Сбрасывает счетчик MessageId (для изоляции тестов)",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static void ResetMessageIdCounter()",
          "line_number": 246
        },
        {
          "name": "SetNextMessageId",
          "return_type": "void",
          "parameters": [
            "int messageId"
          ],
          "description": "Устанавливает следующий MessageId (для предсказуемых тестов)",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static void SetNextMessageId(int messageId)",
          "line_number": 254
        }
      ],
      "lines_count": 275
    },
    {
      "file_path": "TestKit.Facade.cs",
      "file_name": "TestKit.Facade.cs",
      "class_name": "",
      "class_description": "",
      "category": "core",
      "methods": [
        {
          "name": "CreateMessageHandlerFactory",
          "return_type": "MessageHandlerTestFactory",
          "parameters": [],
          "description": "Создает фабрику для MessageHandler <tags>factory, message-handler, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandlerTestFactory CreateMessageHandlerFactory() => new();",
          "line_number": 28
        },
        {
          "name": "CreateMessageHandlerBuilder",
          "return_type": "MessageHandlerBuilder",
          "parameters": [],
          "description": "Создает фабрику для MessageHandler <tags>factory, message-handler, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "builder"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandlerBuilder CreateMessageHandlerBuilder() => new();",
          "line_number": 34
        },
        {
          "name": "CreateModerationServiceFactory",
          "return_type": "ModerationServiceTestFactory",
          "parameters": [],
          "description": "Создает билдер для MessageHandler <tags>builder, message-handler, test-infrastructure, fluent-api</tags>",
          "tags": [
            "factory",
            "moderation"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationServiceTestFactory CreateModerationServiceFactory() => new();",
          "line_number": 40
        },
        {
          "name": "CreateCaptchaServiceFactory",
          "return_type": "CaptchaServiceTestFactory",
          "parameters": [],
          "description": "Создает фабрику для ModerationService <tags>factory, moderation-service, test-infrastructure</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaServiceTestFactory CreateCaptchaServiceFactory() => new();",
          "line_number": 46
        },
        {
          "name": "CreateCallbackQueryHandlerFactory",
          "return_type": "CallbackQueryHandlerTestFactory",
          "parameters": [],
          "description": "Создает фабрику для CaptchaService <tags>factory, captcha-service, test-infrastructure</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CallbackQueryHandlerTestFactory CreateCallbackQueryHandlerFactory() => new();",
          "line_number": 52
        },
        {
          "name": "CreateChatMemberHandlerFactory",
          "return_type": "ChatMemberHandlerTestFactory",
          "parameters": [],
          "description": "Создает фабрику для CallbackQueryHandler <tags>factory, callback-query-handler, test-infrastructure</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatMemberHandlerTestFactory CreateChatMemberHandlerFactory() => new();",
          "line_number": 58
        },
        {
          "name": "CreateServiceChatDispatcherFactory",
          "return_type": "ServiceChatDispatcherTestFactory",
          "parameters": [],
          "description": "Создает фабрику для ChatMemberHandler <tags>factory, chat-member-handler, test-infrastructure</tags>",
          "tags": [
            "factory",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ServiceChatDispatcherTestFactory CreateServiceChatDispatcherFactory() => new();",
          "line_number": 64
        },
        {
          "name": "CreateAppConfig",
          "return_type": "IAppConfig",
          "parameters": [],
          "description": "Создает фабрику для ServiceChatDispatcher <tags>factory, service-chat-dispatcher, test-infrastructure</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IAppConfig CreateAppConfig() => AppConfigTestFactory.CreateDefault();",
          "line_number": 70
        },
        {
          "name": "CreateAppConfigWithoutAi",
          "return_type": "IAppConfig",
          "parameters": [],
          "description": "Создает базовую конфигурацию приложения <tags>config, app-config, test-infrastructure</tags>",
          "tags": [
            "factory",
            "ai"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IAppConfig CreateAppConfigWithoutAi() => AppConfigTestFactory.CreateWithoutAi();",
          "line_number": 76
        },
        {
          "name": "CreateAiChecksFactory",
          "return_type": "AiChecksTestFactory",
          "parameters": [],
          "description": "Создает конфигурацию приложения без AI <tags>config, app-config, no-ai, test-infrastructure</tags>",
          "tags": [
            "factory",
            "ai"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static AiChecksTestFactory CreateAiChecksFactory() => new();",
          "line_number": 82
        },
        {
          "name": "CreateStatisticsServiceFactory",
          "return_type": "StatisticsServiceTestFactory",
          "parameters": [],
          "description": "Создает фабрику для AiChecks <tags>factory, ai-checks, ai, test-infrastructure</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static StatisticsServiceTestFactory CreateStatisticsServiceFactory() => new();",
          "line_number": 88
        },
        {
          "name": "CreateSpamHamClassifierFactory",
          "return_type": "SpamHamClassifierTestFactory",
          "parameters": [],
          "description": "Создает фабрику для StatisticsService <tags>factory, statistics-service, test-infrastructure</tags>",
          "tags": [
            "factory",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static SpamHamClassifierTestFactory CreateSpamHamClassifierFactory() => new();",
          "line_number": 94
        },
        {
          "name": "CreateMimicryClassifierFactory",
          "return_type": "MimicryClassifierTestFactory",
          "parameters": [],
          "description": "Создает фабрику для SpamHamClassifier <tags>factory, spam-ham-classifier, ml, test-infrastructure</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MimicryClassifierTestFactory CreateMimicryClassifierFactory() => new();",
          "line_number": 100
        },
        {
          "name": "CreateNotificationServiceBuilder",
          "return_type": "NotificationServiceBuilder",
          "parameters": [],
          "description": "Создает билдер для мока MessageHandler <tags>builders, message-handler, mocks, fluent-api</tags>",
          "tags": [
            "factory",
            "builder"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static NotificationServiceBuilder CreateNotificationServiceBuilder() => new();",
          "line_number": 152
        },
        {
          "name": "CreateUserJoinServiceBuilder",
          "return_type": "UserJoinServiceBuilder",
          "parameters": [],
          "description": "Создает билдер для NotificationService <tags>builders, notification-service, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static UserJoinServiceBuilder CreateUserJoinServiceBuilder() => new();",
          "line_number": 158
        },
        {
          "name": "CreateMessageHandlerWithDefaults",
          "return_type": "MessageHandler",
          "parameters": [],
          "description": "Создает MessageHandler с базовой настройкой для тестов",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandler CreateMessageHandlerWithDefaults()",
          "line_number": 244
        },
        {
          "name": "CreateMessageHandlerWithFake",
          "return_type": "MessageHandler",
          "parameters": [
            "FakeTelegramClient? fakeClient = null"
          ],
          "description": "Создает MessageHandler с FakeTelegramClient",
          "tags": [
            "factory",
            "message",
            "fake"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandler CreateMessageHandlerWithFake(FakeTelegramClient? fakeClient = null)",
          "line_number": 265
        },
        {
          "name": "CreateFakeClient",
          "return_type": "FakeTelegramClient",
          "parameters": [],
          "description": "Создает FakeTelegramClient для тестов",
          "tags": [
            "factory",
            "fake"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static FakeTelegramClient CreateFakeClient() => TestKitTelegram.CreateFakeClient();",
          "line_number": 278
        },
        {
          "name": "ResetMessageIdCounter",
          "return_type": "void",
          "parameters": [],
          "description": "Создает сценарий нового участника с FakeTelegramClient",
          "tags": [
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static void ResetMessageIdCounter() => TestKitTelegram.ResetMessageIdCounter();",
          "line_number": 313
        }
      ],
      "lines_count": 317
    },
    {
      "file_path": "TestCategories.cs",
      "file_name": "TestCategories.cs",
      "class_name": "TestCategories",
      "class_description": "Категории тестов для оптимизации CI/CD и параллельного выполнения",
      "category": "core",
      "methods": [],
      "lines_count": 164
    },
    {
      "file_path": "TestKit.Builders.cs",
      "file_name": "TestKit.Builders.cs",
      "class_name": "TestKitBuilders",
      "class_description": "Builders для создания тестовых данных в читаемом виде",
      "category": "builders",
      "methods": [
        {
          "name": "CreateMessage",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Builders для создания тестовых данных в читаемом виде <tags>builders, fluent-api, test-data, readable-tests</tags>",
          "tags": [
            "factory",
            "message",
            "builder"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageBuilder CreateMessage() => new MessageBuilder();",
          "line_number": 17
        },
        {
          "name": "CreateUser",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Создает builder для сообщения Telegram <tags>builders, message, telegram, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static UserBuilder CreateUser() => new UserBuilder();",
          "line_number": 23
        },
        {
          "name": "CreateChat",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Создает builder для пользователя Telegram <tags>builders, user, telegram, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatBuilder CreateChat() => new ChatBuilder();",
          "line_number": 29
        },
        {
          "name": "CreateModerationResult",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Создает builder для чата Telegram <tags>builders, chat, telegram, fluent-api</tags>",
          "tags": [
            "builder",
            "factory",
            "moderation"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResultBuilder CreateModerationResult() => new ModerationResultBuilder();",
          "line_number": 35
        },
        {
          "name": "WithText",
          "return_type": "MessageBuilder",
          "parameters": [
            "string text"
          ],
          "description": "Устанавливает текст сообщения <tags>builders, message, text, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder WithText(string text)",
          "line_number": 50
        },
        {
          "name": "FromUser",
          "return_type": "MessageBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Устанавливает отправителя сообщения <tags>builders, message, user, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder FromUser(long userId)",
          "line_number": 60
        },
        {
          "name": "FromUser",
          "return_type": "MessageBuilder",
          "parameters": [
            "User user"
          ],
          "description": "Устанавливает отправителя сообщения (полный объект) <tags>builders, message, user, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder FromUser(User user)",
          "line_number": 70
        },
        {
          "name": "InChat",
          "return_type": "MessageBuilder",
          "parameters": [
            "long chatId"
          ],
          "description": "Устанавливает чат <tags>builders, message, chat, fluent-api</tags>",
          "tags": [
            "chat",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder InChat(long chatId)",
          "line_number": 80
        },
        {
          "name": "InChat",
          "return_type": "MessageBuilder",
          "parameters": [
            "Chat chat"
          ],
          "description": "Устанавливает чат (полный объект) <tags>builders, message, chat, fluent-api</tags>",
          "tags": [
            "chat",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder InChat(Chat chat)",
          "line_number": 91
        },
        {
          "name": "WithMessageId",
          "return_type": "MessageBuilder",
          "parameters": [
            "int messageId"
          ],
          "description": "Устанавливает ID сообщения (только для чтения, не изменяет) <tags>builders, message, id, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder WithMessageId(int messageId)",
          "line_number": 101
        },
        {
          "name": "AsSpam",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Делает сообщение спамом <tags>builders, message, spam, moderation, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "spam"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder AsSpam()",
          "line_number": 114
        },
        {
          "name": "AsValid",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Делает сообщение валидным",
          "tags": [
            "valid",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder AsValid()",
          "line_number": 123
        },
        {
          "name": "Build",
          "return_type": "Message",
          "parameters": [],
          "description": "Создает сообщение",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public Message Build() => _message;",
          "line_number": 132
        },
        {
          "name": "WithId",
          "return_type": "UserBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Builder для создания пользователей Telegram",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithId(long userId)",
          "line_number": 150
        },
        {
          "name": "WithUsername",
          "return_type": "UserBuilder",
          "parameters": [
            "string username"
          ],
          "description": "Устанавливает имя пользователя",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithUsername(string username)",
          "line_number": 159
        },
        {
          "name": "WithFirstName",
          "return_type": "UserBuilder",
          "parameters": [
            "string firstName"
          ],
          "description": "Устанавливает имя",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithFirstName(string firstName)",
          "line_number": 168
        },
        {
          "name": "AsBot",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Делает пользователя ботом",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder AsBot()",
          "line_number": 177
        },
        {
          "name": "AsRegularUser",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Делает пользователя обычным пользователем",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder AsRegularUser()",
          "line_number": 186
        },
        {
          "name": "Build",
          "return_type": "User",
          "parameters": [],
          "description": "Создает пользователя",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public User Build() => _user;",
          "line_number": 195
        },
        {
          "name": "WithId",
          "return_type": "ChatBuilder",
          "parameters": [
            "long chatId"
          ],
          "description": "Builder для создания чатов Telegram",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithId(long chatId)",
          "line_number": 213
        },
        {
          "name": "WithType",
          "return_type": "ChatBuilder",
          "parameters": [
            "ChatType chatType"
          ],
          "description": "Устанавливает тип чата",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithType(ChatType chatType)",
          "line_number": 222
        },
        {
          "name": "WithTitle",
          "return_type": "ChatBuilder",
          "parameters": [
            "string title"
          ],
          "description": "Устанавливает название чата",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithTitle(string title)",
          "line_number": 231
        },
        {
          "name": "AsGroup",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Делает чат группой",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsGroup()",
          "line_number": 240
        },
        {
          "name": "AsSupergroup",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Делает чат супергруппой",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsSupergroup()",
          "line_number": 249
        },
        {
          "name": "AsPrivate",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Делает чат приватным",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsPrivate()",
          "line_number": 258
        },
        {
          "name": "Build",
          "return_type": "Chat",
          "parameters": [],
          "description": "Создает чат",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public Chat Build() => _chat;",
          "line_number": 267
        },
        {
          "name": "WithAction",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "ModerationAction action"
          ],
          "description": "Устанавливает действие модерации",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithAction(ModerationAction action)",
          "line_number": 287
        },
        {
          "name": "WithReason",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "string reason"
          ],
          "description": "Устанавливает причину",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithReason(string reason)",
          "line_number": 296
        },
        {
          "name": "WithConfidence",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "double confidence"
          ],
          "description": "Устанавливает уровень уверенности",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithConfidence(double confidence)",
          "line_number": 305
        },
        {
          "name": "AsAllow",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Делает результат \"Разрешить\"",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsAllow()",
          "line_number": 314
        },
        {
          "name": "AsDelete",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Делает результат \"Удалить\"",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsDelete()",
          "line_number": 324
        },
        {
          "name": "AsBan",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Делает результат \"Забанить\"",
          "tags": [
            "ban",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsBan()",
          "line_number": 334
        },
        {
          "name": "Build",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Создает результат модерации",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResult Build() => new ModerationResult(_action, _reason, _confidence);",
          "line_number": 344
        }
      ],
      "lines_count": 350
    },
    {
      "file_path": "TestKit.NotificationServiceBuilder.cs",
      "file_name": "TestKit.NotificationServiceBuilder.cs",
      "class_name": "NotificationServiceBuilder",
      "class_description": "Билдер для создания NotificationService с настроенными зависимостями",
      "category": "core",
      "methods": [
        {
          "name": "WithStandardMocks",
          "return_type": "NotificationServiceBuilder",
          "parameters": [],
          "description": "Настраивает стандартные моки для базового сценария <tags>builders, notification-service, standard-mocks, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public NotificationServiceBuilder WithStandardMocks()",
          "line_number": 46
        },
        {
          "name": "Build",
          "return_type": "NotificationService",
          "parameters": [],
          "description": "Создает NotificationService с настроенными зависимостями <tags>builders, notification-service, build, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public NotificationService Build()",
          "line_number": 62
        }
      ],
      "lines_count": 84
    },
    {
      "file_path": "TestKit.BuilderTests.cs",
      "file_name": "TestKit.BuilderTests.cs",
      "class_name": "TestKitBuilderTests",
      "class_description": "Тесты для новых билдеров",
      "category": "core",
      "methods": [
        {
          "name": "MessageHandlerBuilder_WithStandardMocks_CreatesValidHandler",
          "return_type": "void",
          "parameters": [],
          "description": "Тесты для новых билдеров <tags>tests, builders, fluent-api, test-infrastructure</tags>",
          "tags": [
            "valid",
            "factory",
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void MessageHandlerBuilder_WithStandardMocks_CreatesValidHandler()",
          "line_number": 23
        },
        {
          "name": "MessageHandlerBuilder_WithBanMocks_CreatesHandlerWithBanConfiguration",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "message",
            "builder",
            "ban",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void MessageHandlerBuilder_WithBanMocks_CreatesHandlerWithBanConfiguration()",
          "line_number": 36
        },
        {
          "name": "MessageHandlerBuilder_WithModerationService_CreatesHandlerWithCustomModeration",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "moderation",
            "factory",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void MessageHandlerBuilder_WithModerationService_CreatesHandlerWithCustomModeration()",
          "line_number": 51
        },
        {
          "name": "MessageHandlerBuilder_WithUserManager_CreatesHandlerWithCustomUserManager",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void MessageHandlerBuilder_WithUserManager_CreatesHandlerWithCustomUserManager()",
          "line_number": 66
        },
        {
          "name": "ModerationServiceMockBuilder_ThatBansUsers_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "ban",
            "builder",
            "user",
            "mock",
            "moderation"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void ModerationServiceMockBuilder_ThatBansUsers_CreatesCorrectMock()",
          "line_number": 81
        },
        {
          "name": "ModerationServiceMockBuilder_ThatAllowsMessages_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "message",
            "builder",
            "mock",
            "moderation"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void ModerationServiceMockBuilder_ThatAllowsMessages_CreatesCorrectMock()",
          "line_number": 94
        },
        {
          "name": "UserManagerMockBuilder_ThatApprovesUser_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "builder",
            "user",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void UserManagerMockBuilder_ThatApprovesUser_CreatesCorrectMock()",
          "line_number": 107
        },
        {
          "name": "CaptchaServiceMockBuilder_ThatSucceeds_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "captcha",
            "factory",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void CaptchaServiceMockBuilder_ThatSucceeds_CreatesCorrectMock()",
          "line_number": 121
        },
        {
          "name": "AiChecksMockBuilder_ThatApprovesPhoto_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "ai",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void AiChecksMockBuilder_ThatApprovesPhoto_CreatesCorrectMock()",
          "line_number": 134
        },
        {
          "name": "TelegramBotMockBuilder_ThatSendsMessageSuccessfully_CreatesCorrectMock",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "message",
            "builder",
            "mock",
            "telegram"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void TelegramBotMockBuilder_ThatSendsMessageSuccessfully_CreatesCorrectMock()",
          "line_number": 147
        },
        {
          "name": "MessageHandlerBuilder_ComplexScenario_CreatesValidHandler",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "valid",
            "factory",
            "message",
            "builder",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void MessageHandlerBuilder_ComplexScenario_CreatesValidHandler()",
          "line_number": 160
        },
        {
          "name": "ModerationScenarios_CompleteSetup_WorksCorrectly",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "setup",
            "moderation",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void ModerationScenarios_CompleteSetup_WorksCorrectly()",
          "line_number": 186
        },
        {
          "name": "ModerationScenarios_MinimalSetup_WorksCorrectly",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "setup",
            "moderation",
            "scenario"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void ModerationScenarios_MinimalSetup_WorksCorrectly()",
          "line_number": 209
        },
        {
          "name": "ModerationScenarios_MockedSetup_WorksCorrectly",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "setup",
            "moderation",
            "scenario",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void ModerationScenarios_MockedSetup_WorksCorrectly()",
          "line_number": 228
        },
        {
          "name": "CreateTestBotClient_ReturnsValidClient",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "valid",
            "factory",
            "test-infrastructure"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void CreateTestBotClient_ReturnsValidClient()",
          "line_number": 252
        },
        {
          "name": "CreateTestToken_ReturnsConsistentToken",
          "return_type": "void",
          "parameters": [],
          "description": "",
          "tags": [
            "factory",
            "test-infrastructure"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public void CreateTestToken_ReturnsConsistentToken()",
          "line_number": 265
        }
      ],
      "lines_count": 276
    },
    {
      "file_path": "Builders/TestKitBuilders.cs",
      "file_name": "TestKitBuilders.cs",
      "class_name": "TestKitBuilders",
      "class_description": "Builders для создания тестовых данных в читаемом виде",
      "category": "builders",
      "methods": [
        {
          "name": "CreateMessage",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Builders для создания тестовых данных в читаемом виде <tags>builders, fluent-api, test-data, readable-tests</tags>",
          "tags": [
            "factory",
            "message",
            "builder"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageBuilder CreateMessage() => new MessageBuilder();",
          "line_number": 16
        },
        {
          "name": "CreateUser",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Создает builder для сообщения Telegram <tags>builders, message, telegram, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static UserBuilder CreateUser() => new UserBuilder();",
          "line_number": 22
        },
        {
          "name": "CreateChat",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Создает builder для пользователя Telegram <tags>builders, user, telegram, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "chat"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ChatBuilder CreateChat() => new ChatBuilder();",
          "line_number": 28
        },
        {
          "name": "CreateModerationResult",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Создает builder для чата Telegram <tags>builders, chat, telegram, fluent-api</tags>",
          "tags": [
            "builder",
            "factory",
            "moderation"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationResultBuilder CreateModerationResult() => new ModerationResultBuilder();",
          "line_number": 34
        }
      ],
      "lines_count": 35
    },
    {
      "file_path": "Builders/MessageBuilder.cs",
      "file_name": "MessageBuilder.cs",
      "class_name": "MessageBuilder",
      "class_description": "Builder для создания сообщений Telegram",
      "category": "builders",
      "methods": [
        {
          "name": "WithText",
          "return_type": "MessageBuilder",
          "parameters": [
            "string text"
          ],
          "description": "Устанавливает текст сообщения <tags>builders, message, text, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder WithText(string text)",
          "line_number": 18
        },
        {
          "name": "FromUser",
          "return_type": "MessageBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Устанавливает отправителя сообщения <tags>builders, message, user, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder FromUser(long userId)",
          "line_number": 28
        },
        {
          "name": "FromUser",
          "return_type": "MessageBuilder",
          "parameters": [
            "User user"
          ],
          "description": "Устанавливает отправителя сообщения (полный объект) <tags>builders, message, user, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder FromUser(User user)",
          "line_number": 38
        },
        {
          "name": "InChat",
          "return_type": "MessageBuilder",
          "parameters": [
            "long chatId"
          ],
          "description": "Устанавливает чат <tags>builders, message, chat, fluent-api</tags>",
          "tags": [
            "chat",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder InChat(long chatId)",
          "line_number": 48
        },
        {
          "name": "InChat",
          "return_type": "MessageBuilder",
          "parameters": [
            "Chat chat"
          ],
          "description": "Устанавливает чат (полный объект) <tags>builders, message, chat, fluent-api</tags>",
          "tags": [
            "chat",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder InChat(Chat chat)",
          "line_number": 59
        },
        {
          "name": "AsSpam",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Устанавливает сообщение как спам <tags>builders, message, spam, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "spam"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder AsSpam()",
          "line_number": 71
        },
        {
          "name": "AsValid",
          "return_type": "MessageBuilder",
          "parameters": [],
          "description": "Устанавливает сообщение как валидное <tags>builders, message, valid, fluent-api</tags>",
          "tags": [
            "valid",
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageBuilder AsValid()",
          "line_number": 81
        },
        {
          "name": "Build",
          "return_type": "Message",
          "parameters": [],
          "description": "Строит сообщение <tags>builders, message, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public Message Build() => _message;",
          "line_number": 91
        }
      ],
      "lines_count": 98
    },
    {
      "file_path": "Builders/UserBuilder.cs",
      "file_name": "UserBuilder.cs",
      "class_name": "UserBuilder",
      "class_description": "Builder для создания пользователей Telegram",
      "category": "builders",
      "methods": [
        {
          "name": "WithId",
          "return_type": "UserBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Устанавливает ID пользователя <tags>builders, user, id, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithId(long userId)",
          "line_number": 18
        },
        {
          "name": "WithUsername",
          "return_type": "UserBuilder",
          "parameters": [
            "string username"
          ],
          "description": "Устанавливает username пользователя <tags>builders, user, username, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithUsername(string username)",
          "line_number": 28
        },
        {
          "name": "WithFirstName",
          "return_type": "UserBuilder",
          "parameters": [
            "string firstName"
          ],
          "description": "Устанавливает имя пользователя <tags>builders, user, firstname, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder WithFirstName(string firstName)",
          "line_number": 38
        },
        {
          "name": "AsBot",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Устанавливает пользователя как бота <tags>builders, user, bot, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder AsBot()",
          "line_number": 48
        },
        {
          "name": "AsRegularUser",
          "return_type": "UserBuilder",
          "parameters": [],
          "description": "Устанавливает пользователя как обычного пользователя <tags>builders, user, regular, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserBuilder AsRegularUser()",
          "line_number": 60
        },
        {
          "name": "Build",
          "return_type": "User",
          "parameters": [],
          "description": "Строит пользователя <tags>builders, user, build, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public User Build() => _user;",
          "line_number": 70
        }
      ],
      "lines_count": 77
    },
    {
      "file_path": "Builders/ChatBuilder.cs",
      "file_name": "ChatBuilder.cs",
      "class_name": "ChatBuilder",
      "class_description": "Builder для создания чатов Telegram",
      "category": "builders",
      "methods": [
        {
          "name": "WithId",
          "return_type": "ChatBuilder",
          "parameters": [
            "long chatId"
          ],
          "description": "Устанавливает ID чата <tags>builders, chat, id, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithId(long chatId)",
          "line_number": 19
        },
        {
          "name": "WithType",
          "return_type": "ChatBuilder",
          "parameters": [
            "ChatType chatType"
          ],
          "description": "Устанавливает тип чата <tags>builders, chat, type, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithType(ChatType chatType)",
          "line_number": 29
        },
        {
          "name": "WithTitle",
          "return_type": "ChatBuilder",
          "parameters": [
            "string title"
          ],
          "description": "Устанавливает название чата <tags>builders, chat, title, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder WithTitle(string title)",
          "line_number": 39
        },
        {
          "name": "AsGroup",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Устанавливает чат как группу <tags>builders, chat, group, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsGroup()",
          "line_number": 49
        },
        {
          "name": "AsSupergroup",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Устанавливает чат как супергруппу <tags>builders, chat, supergroup, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsSupergroup()",
          "line_number": 59
        },
        {
          "name": "AsPrivate",
          "return_type": "ChatBuilder",
          "parameters": [],
          "description": "Устанавливает чат как приватный <tags>builders, chat, private, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ChatBuilder AsPrivate()",
          "line_number": 69
        },
        {
          "name": "Build",
          "return_type": "Chat",
          "parameters": [],
          "description": "Строит чат <tags>builders, chat, build, fluent-api</tags>",
          "tags": [
            "chat",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public Chat Build() => _chat;",
          "line_number": 79
        }
      ],
      "lines_count": 86
    },
    {
      "file_path": "Builders/ModerationResultBuilder.cs",
      "file_name": "ModerationResultBuilder.cs",
      "class_name": "ModerationResultBuilder",
      "class_description": "Builder для создания результатов модерации",
      "category": "builders",
      "methods": [
        {
          "name": "WithAction",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "ModerationAction action"
          ],
          "description": "Устанавливает действие модерации <tags>builders, moderation-result, action, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithAction(ModerationAction action)",
          "line_number": 19
        },
        {
          "name": "WithReason",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "string reason"
          ],
          "description": "Устанавливает причину модерации <tags>builders, moderation-result, reason, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithReason(string reason)",
          "line_number": 29
        },
        {
          "name": "WithConfidence",
          "return_type": "ModerationResultBuilder",
          "parameters": [
            "double confidence"
          ],
          "description": "Устанавливает уверенность в результате <tags>builders, moderation-result, confidence, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder WithConfidence(double confidence)",
          "line_number": 39
        },
        {
          "name": "AsAllow",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Устанавливает результат как разрешение <tags>builders, moderation-result, allow, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsAllow()",
          "line_number": 49
        },
        {
          "name": "AsDelete",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Устанавливает результат как удаление <tags>builders, moderation-result, delete, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsDelete()",
          "line_number": 60
        },
        {
          "name": "AsBan",
          "return_type": "ModerationResultBuilder",
          "parameters": [],
          "description": "Устанавливает результат как бан <tags>builders, moderation-result, ban, fluent-api</tags>",
          "tags": [
            "ban",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResultBuilder AsBan()",
          "line_number": 71
        },
        {
          "name": "Build",
          "return_type": "ModerationResult",
          "parameters": [],
          "description": "Строит результат модерации <tags>builders, moderation-result, build, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationResult Build() => new ModerationResult(_action, _reason, _confidence);",
          "line_number": 82
        }
      ],
      "lines_count": 89
    },
    {
      "file_path": "Infra/TestKitAutoFixture.cs",
      "file_name": "TestKitAutoFixture.cs",
      "class_name": "TestKitAutoFixture",
      "class_description": "Расширение TestKit с AutoFixture для автоматического создания тестовых объектов",
      "category": "infrastructure",
      "methods": [
        {
          "name": "CreateFixture",
          "return_type": "IFixture",
          "parameters": [],
          "description": "Создает настроенный AutoFixture с кастомизациями для Telegram-типов <tags>autofixture, customization, telegram, test-infrastructure</tags>",
          "tags": [
            "factory",
            "autofixture"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IFixture CreateFixture()",
          "line_number": 24
        },
        {
          "name": "GetFixture",
          "return_type": "IFixture",
          "parameters": [],
          "description": "Получает глобальный экземпляр AutoFixture <tags>autofixture, global, singleton, test-infrastructure</tags>",
          "tags": [
            "autofixture"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IFixture GetFixture() => _fixture;",
          "line_number": 75
        },
        {
          "name": "CreateMessageHandler",
          "return_type": "MessageHandler",
          "parameters": [],
          "description": "Создает MessageHandler с автозависимостями <tags>autofixture, message-handler, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandler CreateMessageHandler()",
          "line_number": 105
        },
        {
          "name": "CreateModerationService",
          "return_type": "ModerationService",
          "parameters": [],
          "description": "Создает ModerationService с автозависимостями <tags>autofixture, moderation-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "moderation"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationService CreateModerationService()",
          "line_number": 114
        },
        {
          "name": "CreateRealisticUsers",
          "return_type": "List<Telegram.Bot.Types.User>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает список реалистичных пользователей <tags>autofixture, users, realistic, test-infrastructure</tags>",
          "tags": [
            "factory",
            "collection",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.User> CreateRealisticUsers(int count = 3)",
          "line_number": 123
        },
        {
          "name": "CreateRealisticMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает список реалистичных сообщений <tags>autofixture, messages, realistic, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "bogus",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateRealisticMessages(int count = 3)",
          "line_number": 134
        },
        {
          "name": "CreateCaptchaService",
          "return_type": "ICaptchaService",
          "parameters": [],
          "description": "Создает CaptchaService с автозависимостями <tags>autofixture, captcha-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "captcha",
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ICaptchaService CreateCaptchaService() => _fixture.Create<ICaptchaService>();",
          "line_number": 222
        },
        {
          "name": "CreateUserManager",
          "return_type": "IUserManager",
          "parameters": [],
          "description": "Создает CaptchaService с автозависимостями <tags>autofixture, captcha-service, dependencies, test-infrastructure</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static IUserManager CreateUserManager() => _fixture.Create<IUserManager>();",
          "line_number": 228
        },
        {
          "name": "CreateManyMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает много сообщений <tags>autofixture, many-messages, collection, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateManyMessages(int count = 3) =>",
          "line_number": 262
        },
        {
          "name": "CreateManyUsers",
          "return_type": "List<Telegram.Bot.Types.User>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает много пользователей <tags>autofixture, many-users, collection, test-infrastructure</tags>",
          "tags": [
            "factory",
            "collection",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.User> CreateManyUsers(int count = 3) =>",
          "line_number": 269
        },
        {
          "name": "CreateManySpamMessages",
          "return_type": "List<Telegram.Bot.Types.Message>",
          "parameters": [
            "int count = 3"
          ],
          "description": "Создает много спам-сообщений <tags>autofixture, many-spam-messages, collection, test-infrastructure</tags>",
          "tags": [
            "factory",
            "message",
            "spam",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Telegram.Bot.Types.Message> CreateManySpamMessages(int count = 3) =>",
          "line_number": 276
        }
      ],
      "lines_count": 291
    },
    {
      "file_path": "Infra/TestKitBogus.cs",
      "file_name": "TestKitBogus.cs",
      "class_name": "TestKitBogus",
      "class_description": "Расширение TestKit с Bogus для генерации реалистичных тестовых данных",
      "category": "infrastructure",
      "methods": [
        {
          "name": "CreateRealisticUser",
          "return_type": "User",
          "parameters": [
            "long? userId = null"
          ],
          "description": "Создает реалистичного пользователя с Bogus <tags>bogus, user, realistic, faker</tags>",
          "tags": [
            "factory",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateRealisticUser(long? userId = null)",
          "line_number": 21
        },
        {
          "name": "CreateRealisticBot",
          "return_type": "User",
          "parameters": [
            "long? botId = null"
          ],
          "description": "Создает бота с реалистичными данными <tags>bogus, bot, realistic, faker</tags>",
          "tags": [
            "factory",
            "bogus",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateRealisticBot(long? botId = null)",
          "line_number": 40
        },
        {
          "name": "CreateSuspiciousUser",
          "return_type": "User",
          "parameters": [
            "long? userId = null"
          ],
          "description": "Создает подозрительного пользователя (потенциальный спаммер) <tags>bogus, suspicious-user, spammer, faker</tags>",
          "tags": [
            "factory",
            "user"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static User CreateSuspiciousUser(long? userId = null)",
          "line_number": 58
        },
        {
          "name": "CreateRealisticGroup",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает реалистичную группу с Bogus <tags>bogus, group, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticGroup(long? chatId = null)",
          "line_number": 82
        },
        {
          "name": "CreateRealisticSupergroup",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает реалистичный супергруппу <tags>bogus, supergroup, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticSupergroup(long? chatId = null)",
          "line_number": 98
        },
        {
          "name": "CreateRealisticPrivateChat",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает приватный чат <tags>bogus, private-chat, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticPrivateChat(long? chatId = null)",
          "line_number": 114
        },
        {
          "name": "CreateRealisticMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает реалистичное сообщение <tags>bogus, message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateRealisticMessage(User? from = null, Chat? chat = null)",
          "line_number": 135
        },
        {
          "name": "CreateSpamMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает спам-сообщение <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateSpamMessage(User? from = null, Chat? chat = null)",
          "line_number": 161
        },
        {
          "name": "CreateMediaMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает сообщение с медиа <tags>bogus, media-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateMediaMessage(User? from = null, Chat? chat = null)",
          "line_number": 188
        },
        {
          "name": "CreateUserList",
          "return_type": "List<User>",
          "parameters": [
            "int count = 5"
          ],
          "description": "Создает список случайных пользователей <tags>bogus, users, collection, faker</tags>",
          "tags": [
            "factory",
            "collection",
            "user"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<User> CreateUserList(int count = 5)",
          "line_number": 227
        },
        {
          "name": "CreateConversation",
          "return_type": "List<Message>",
          "parameters": [
            "Chat chat",
            "List<User> participants",
            "int messageCount = 10"
          ],
          "description": "Создает историю сообщений для чата <tags>bogus, message-history, conversation, faker</tags>",
          "tags": [
            "factory",
            "message",
            "collection"
          ],
          "is_static": true,
          "is_generic": true,
          "signature": "public static List<Message> CreateConversation(Chat chat, List<User> participants, int messageCount = 10)",
          "line_number": 238
        },
        {
          "name": "CreateRealisticSpamMessage",
          "return_type": "Message",
          "parameters": [
            "User? from = null",
            "Chat? chat = null"
          ],
          "description": "Создает спам-сообщение с реалистичными паттернами (alias для CreateSpamMessage) <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "message",
            "spam",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Message CreateRealisticSpamMessage(User? from = null, Chat? chat = null) => CreateSpamMessage(from, chat);",
          "line_number": 261
        },
        {
          "name": "CreateRealisticChannel",
          "return_type": "Chat",
          "parameters": [
            "long? chatId = null"
          ],
          "description": "Создает спам-сообщение с реалистичными паттернами (alias для CreateSpamMessage) <tags>bogus, spam-message, realistic, faker</tags>",
          "tags": [
            "factory",
            "chat",
            "bogus"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Chat CreateRealisticChannel(long? chatId = null)",
          "line_number": 267
        },
        {
          "name": "IsSpamText",
          "return_type": "bool",
          "parameters": [
            "string? text"
          ],
          "description": "Проверяет, содержит ли текст спам-паттерны <tags>bogus, spam-check, utility</tags>",
          "tags": [
            "spam"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static bool IsSpamText(string? text)",
          "line_number": 282
        },
        {
          "name": "GetFaker",
          "return_type": "Faker",
          "parameters": [],
          "description": "Получает базовый Faker для дополнительных генераций <tags>bogus, faker, utility, base</tags>",
          "tags": [
            "fake"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static Faker GetFaker() => _faker;",
          "line_number": 297
        },
        {
          "name": "CreateRussianText",
          "return_type": "string",
          "parameters": [
            "int sentences = 1"
          ],
          "description": "Получает базовый Faker для дополнительных генераций <tags>bogus, faker, utility, base</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static string CreateRussianText(int sentences = 1)",
          "line_number": 303
        },
        {
          "name": "CreateRandomUrl",
          "return_type": "string",
          "parameters": [],
          "description": "Создает случайный URL <tags>bogus, url, faker, utility</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static string CreateRandomUrl()",
          "line_number": 312
        },
        {
          "name": "CreateRandomDate",
          "return_type": "DateTime",
          "parameters": [
            "int daysBack = 30"
          ],
          "description": "Создает случайную дату в диапазоне <tags>bogus, date, faker, utility</tags>",
          "tags": [
            "factory"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static DateTime CreateRandomDate(int daysBack = 30)",
          "line_number": 321
        }
      ],
      "lines_count": 327
    },
    {
      "file_path": "Builders/MockBuilders/TelegramBotMockBuilder.cs",
      "file_name": "TelegramBotMockBuilder.cs",
      "class_name": "TelegramBotMockBuilder",
      "class_description": "Билдер для мока ITelegramBotClientWrapper",
      "category": "builders",
      "methods": [
        {
          "name": "ThatSendsMessageSuccessfully",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для успешной отправки сообщений <tags>builders, telegram-bot, send-message, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public TelegramBotMockBuilder ThatSendsMessageSuccessfully()",
          "line_number": 21
        },
        {
          "name": "ThatDeletesMessagesSuccessfully",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для успешного удаления сообщений <tags>builders, telegram-bot, delete-message, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public TelegramBotMockBuilder ThatDeletesMessagesSuccessfully()",
          "line_number": 39
        },
        {
          "name": "ThatForwardsMessages",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для пересылки сообщений <tags>builders, telegram-bot, forward-message, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public TelegramBotMockBuilder ThatForwardsMessages()",
          "line_number": 54
        },
        {
          "name": "ThatThrowsOnDelete",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для выброса исключения при удалении <tags>builders, telegram-bot, throw-on-delete, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public TelegramBotMockBuilder ThatThrowsOnDelete()",
          "line_number": 70
        },
        {
          "name": "ThatThrowsOnSend",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для выброса исключения при отправке <tags>builders, telegram-bot, throw-on-send, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public TelegramBotMockBuilder ThatThrowsOnSend()",
          "line_number": 85
        },
        {
          "name": "Build",
          "return_type": "Mock<ITelegramBotClientWrapper>",
          "parameters": [],
          "description": "Строит мок <tags>builders, telegram-bot, build, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<ITelegramBotClientWrapper> Build() => _mock;",
          "line_number": 103
        },
        {
          "name": "BuildObject",
          "return_type": "ITelegramBotClientWrapper",
          "parameters": [],
          "description": "Строит мок <tags>builders, telegram-bot, build, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ITelegramBotClientWrapper BuildObject() => Build().Object;",
          "line_number": 109
        }
      ],
      "lines_count": 110
    },
    {
      "file_path": "Builders/MockBuilders/MessageHandlerMockBuilder.cs",
      "file_name": "MessageHandlerMockBuilder.cs",
      "class_name": "MessageHandlerMockBuilder",
      "class_description": "Билдер для мока MessageHandler",
      "category": "builders",
      "methods": [
        {
          "name": "ThatDeletesMessages",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для удаления сообщений <tags>builders, message-handler, delete-messages, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerMockBuilder ThatDeletesMessages()",
          "line_number": 20
        },
        {
          "name": "ThatReportsToLogChat",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки в лог-чат <tags>builders, message-handler, report-to-log-chat, fluent-api</tags>",
          "tags": [
            "chat",
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerMockBuilder ThatReportsToLogChat()",
          "line_number": 36
        },
        {
          "name": "ThatReportsWithoutDeleting",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки уведомления без удаления <tags>builders, message-handler, report-without-deleting, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerMockBuilder ThatReportsWithoutDeleting()",
          "line_number": 51
        },
        {
          "name": "ThatSendsSuspiciousMessageWithButtons",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки подозрительного сообщения с кнопками <tags>builders, message-handler, send-suspicious-message-with-buttons, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerMockBuilder ThatSendsSuspiciousMessageWithButtons()",
          "line_number": 67
        },
        {
          "name": "ThatThrowsException",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для выброса исключения <tags>builders, message-handler, throw-exception, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandlerMockBuilder ThatThrowsException()",
          "line_number": 84
        },
        {
          "name": "Build",
          "return_type": "Mock<MessageHandler>",
          "parameters": [],
          "description": "Строит мок <tags>builders, message-handler, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<MessageHandler> Build() => _mock;",
          "line_number": 100
        },
        {
          "name": "BuildObject",
          "return_type": "MessageHandler",
          "parameters": [],
          "description": "Строит мок <tags>builders, message-handler, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageHandler BuildObject() => Build().Object;",
          "line_number": 106
        }
      ],
      "lines_count": 107
    },
    {
      "file_path": "Builders/MockBuilders/TestKitMockBuilders.cs",
      "file_name": "TestKitMockBuilders.cs",
      "class_name": "TestKitMockBuilders",
      "class_description": "Билдеры для создания и настройки моков",
      "category": "builders",
      "methods": [
        {
          "name": "CreateModerationServiceMock",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [],
          "description": "Билдеры для создания и настройки моков <tags>builders, mocks, fluent-api, test-infrastructure</tags>",
          "tags": [
            "builder",
            "factory",
            "moderation",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static ModerationServiceMockBuilder CreateModerationServiceMock() => new();",
          "line_number": 16
        },
        {
          "name": "CreateUserManagerMock",
          "return_type": "UserManagerMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока IModerationService <tags>builders, moderation-service, mocks, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "user",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static UserManagerMockBuilder CreateUserManagerMock() => new();",
          "line_number": 22
        },
        {
          "name": "CreateCaptchaServiceMock",
          "return_type": "CaptchaServiceMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока IUserManager <tags>builders, user-manager, mocks, fluent-api</tags>",
          "tags": [
            "captcha",
            "factory",
            "builder",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static CaptchaServiceMockBuilder CreateCaptchaServiceMock() => new();",
          "line_number": 28
        },
        {
          "name": "CreateAiChecksMock",
          "return_type": "AiChecksMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока ICaptchaService <tags>builders, captcha-service, mocks, fluent-api</tags>",
          "tags": [
            "builder",
            "factory",
            "ai",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static AiChecksMockBuilder CreateAiChecksMock() => new();",
          "line_number": 34
        },
        {
          "name": "CreateTelegramBotMock",
          "return_type": "TelegramBotMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока IAiChecks <tags>builders, ai-checks, mocks, fluent-api</tags>",
          "tags": [
            "factory",
            "builder",
            "telegram",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static TelegramBotMockBuilder CreateTelegramBotMock() => new();",
          "line_number": 40
        },
        {
          "name": "CreateMessageServiceMock",
          "return_type": "MessageServiceMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока ITelegramBotClientWrapper <tags>builders, telegram-bot, mocks, fluent-api</tags>",
          "tags": [
            "factory",
            "message",
            "builder",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageServiceMockBuilder CreateMessageServiceMock() => new();",
          "line_number": 46
        },
        {
          "name": "CreateMessageHandlerMock",
          "return_type": "MessageHandlerMockBuilder",
          "parameters": [],
          "description": "Создает билдер для мока IMessageService <tags>builders, message-service, mocks, fluent-api</tags>",
          "tags": [
            "factory",
            "message",
            "builder",
            "mock"
          ],
          "is_static": true,
          "is_generic": false,
          "signature": "public static MessageHandlerMockBuilder CreateMessageHandlerMock() => new();",
          "line_number": 52
        }
      ],
      "lines_count": 53
    },
    {
      "file_path": "Builders/MockBuilders/CaptchaServiceMockBuilder.cs",
      "file_name": "CaptchaServiceMockBuilder.cs",
      "class_name": "CaptchaServiceMockBuilder",
      "class_description": "Билдер для мока ICaptchaService",
      "category": "builders",
      "methods": [
        {
          "name": "ThatSucceeds",
          "return_type": "CaptchaServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для успешного прохождения капчи <tags>builders, captcha-service, success, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public CaptchaServiceMockBuilder ThatSucceeds()",
          "line_number": 19
        },
        {
          "name": "ThatFails",
          "return_type": "CaptchaServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для неудачного прохождения капчи <tags>builders, captcha-service, failure, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public CaptchaServiceMockBuilder ThatFails()",
          "line_number": 31
        },
        {
          "name": "Build",
          "return_type": "Mock<ICaptchaService>",
          "parameters": [],
          "description": "Строит мок <tags>builders, captcha-service, build, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<ICaptchaService> Build() => _mock;",
          "line_number": 43
        },
        {
          "name": "BuildObject",
          "return_type": "ICaptchaService",
          "parameters": [],
          "description": "Строит мок <tags>builders, captcha-service, build, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ICaptchaService BuildObject() => Build().Object;",
          "line_number": 49
        }
      ],
      "lines_count": 50
    },
    {
      "file_path": "Builders/MockBuilders/AiChecksMockBuilder.cs",
      "file_name": "AiChecksMockBuilder.cs",
      "class_name": "AiChecksMockBuilder",
      "class_description": "Билдер для мока IAiChecks",
      "category": "builders",
      "methods": [
        {
          "name": "ThatApprovesPhoto",
          "return_type": "AiChecksMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для одобрения фото <tags>builders, ai-checks, approve-photo, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public AiChecksMockBuilder ThatApprovesPhoto()",
          "line_number": 20
        },
        {
          "name": "ThatRejectsPhoto",
          "return_type": "AiChecksMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отклонения фото <tags>builders, ai-checks, reject-photo, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public AiChecksMockBuilder ThatRejectsPhoto()",
          "line_number": 35
        },
        {
          "name": "Build",
          "return_type": "Mock<IAiChecks>",
          "parameters": [],
          "description": "Строит мок <tags>builders, ai-checks, build, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<IAiChecks> Build() => _mock;",
          "line_number": 50
        },
        {
          "name": "BuildObject",
          "return_type": "IAiChecks",
          "parameters": [],
          "description": "Строит мок <tags>builders, ai-checks, build, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public IAiChecks BuildObject() => Build().Object;",
          "line_number": 56
        }
      ],
      "lines_count": 57
    },
    {
      "file_path": "Builders/MockBuilders/ModerationServiceMockBuilder.cs",
      "file_name": "ModerationServiceMockBuilder.cs",
      "class_name": "ModerationServiceMockBuilder",
      "class_description": "Билдер для мока IModerationService",
      "category": "builders",
      "methods": [
        {
          "name": "ThatReturns",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [
            "ModerationAction action"
          ],
          "description": "Настраивает мок для возврата указанного действия <tags>builders, moderation-service, action, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder ThatReturns(ModerationAction action)",
          "line_number": 22
        },
        {
          "name": "WithReason",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [
            "string reason"
          ],
          "description": "Настраивает мок для возврата указанной причины <tags>builders, moderation-service, reason, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder WithReason(string reason)",
          "line_number": 32
        },
        {
          "name": "WithConfidence",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [
            "double confidence"
          ],
          "description": "Настраивает мок для возврата указанной уверенности <tags>builders, moderation-service, confidence, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder WithConfidence(double confidence)",
          "line_number": 42
        },
        {
          "name": "ThatAllowsMessages",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для разрешения сообщений <tags>builders, moderation-service, allow, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder ThatAllowsMessages()",
          "line_number": 52
        },
        {
          "name": "ThatDeletesMessages",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [
            "string reason = \"Spam detected\""
          ],
          "description": "Настраивает мок для удаления сообщений <tags>builders, moderation-service, delete, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder ThatDeletesMessages(string reason = \"Spam detected\")",
          "line_number": 63
        },
        {
          "name": "ThatBansUsers",
          "return_type": "ModerationServiceMockBuilder",
          "parameters": [
            "string reason = \"Spam detected\""
          ],
          "description": "Настраивает мок для бана пользователей <tags>builders, moderation-service, ban, fluent-api</tags>",
          "tags": [
            "ban",
            "mock",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public ModerationServiceMockBuilder ThatBansUsers(string reason = \"Spam detected\")",
          "line_number": 74
        },
        {
          "name": "Build",
          "return_type": "Mock<IModerationService>",
          "parameters": [],
          "description": "Строит мок <tags>builders, moderation-service, build, fluent-api</tags>",
          "tags": [
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<IModerationService> Build()",
          "line_number": 85
        },
        {
          "name": "BuildObject",
          "return_type": "IModerationService",
          "parameters": [],
          "description": "Строит объект мока <tags>builders, moderation-service, build-object, fluent-api</tags>",
          "tags": [
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public IModerationService BuildObject() => Build().Object;",
          "line_number": 97
        }
      ],
      "lines_count": 98
    },
    {
      "file_path": "Builders/MockBuilders/MessageServiceMockBuilder.cs",
      "file_name": "MessageServiceMockBuilder.cs",
      "class_name": "MessageServiceMockBuilder",
      "class_description": "Билдер для мока IMessageService",
      "category": "builders",
      "methods": [
        {
          "name": "ThatSendsUserNotification",
          "return_type": "MessageServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки уведомления пользователю <tags>builders, message-service, send-user-notification, fluent-api</tags>",
          "tags": [
            "mock",
            "builder",
            "message",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageServiceMockBuilder ThatSendsUserNotification()",
          "line_number": 20
        },
        {
          "name": "ThatSendsAdminNotification",
          "return_type": "MessageServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки уведомления админу <tags>builders, message-service, send-admin-notification, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageServiceMockBuilder ThatSendsAdminNotification()",
          "line_number": 37
        },
        {
          "name": "ThatSendsUserNotificationWithReply",
          "return_type": "MessageServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для отправки уведомления пользователю с ответом <tags>builders, message-service, send-user-notification-with-reply, fluent-api</tags>",
          "tags": [
            "mock",
            "builder",
            "message",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageServiceMockBuilder ThatSendsUserNotificationWithReply()",
          "line_number": 52
        },
        {
          "name": "ThatThrowsException",
          "return_type": "MessageServiceMockBuilder",
          "parameters": [],
          "description": "Настраивает мок для выброса исключения <tags>builders, message-service, throw-exception, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public MessageServiceMockBuilder ThatThrowsException()",
          "line_number": 69
        },
        {
          "name": "Build",
          "return_type": "Mock<IMessageService>",
          "parameters": [],
          "description": "Строит мок <tags>builders, message-service, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<IMessageService> Build() => _mock;",
          "line_number": 92
        },
        {
          "name": "BuildObject",
          "return_type": "IMessageService",
          "parameters": [],
          "description": "Строит мок <tags>builders, message-service, build, fluent-api</tags>",
          "tags": [
            "message",
            "builder"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public IMessageService BuildObject() => Build().Object;",
          "line_number": 98
        }
      ],
      "lines_count": 99
    },
    {
      "file_path": "Builders/MockBuilders/UserManagerMockBuilder.cs",
      "file_name": "UserManagerMockBuilder.cs",
      "class_name": "UserManagerMockBuilder",
      "class_description": "Билдер для мока IUserManager",
      "category": "builders",
      "methods": [
        {
          "name": "ThatApprovesUser",
          "return_type": "UserManagerMockBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Настраивает мок для одобрения пользователя <tags>builders, user-manager, approve, fluent-api</tags>",
          "tags": [
            "mock",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserManagerMockBuilder ThatApprovesUser(long userId)",
          "line_number": 18
        },
        {
          "name": "ThatRejectsUser",
          "return_type": "UserManagerMockBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Настраивает мок для отклонения пользователя <tags>builders, user-manager, reject, fluent-api</tags>",
          "tags": [
            "mock",
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserManagerMockBuilder ThatRejectsUser(long userId)",
          "line_number": 29
        },
        {
          "name": "ThatIsNotInBanlist",
          "return_type": "UserManagerMockBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Настраивает мок для проверки отсутствия пользователя в блэклисте <tags>builders, user-manager, not-in-banlist, fluent-api</tags>",
          "tags": [
            "ban",
            "builder",
            "user",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserManagerMockBuilder ThatIsNotInBanlist(long userId)",
          "line_number": 40
        },
        {
          "name": "ThatIsInBanlist",
          "return_type": "UserManagerMockBuilder",
          "parameters": [
            "long userId"
          ],
          "description": "Настраивает мок для проверки наличия пользователя в блэклисте <tags>builders, user-manager, in-banlist, fluent-api</tags>",
          "tags": [
            "ban",
            "builder",
            "user",
            "mock"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public UserManagerMockBuilder ThatIsInBanlist(long userId)",
          "line_number": 51
        },
        {
          "name": "Build",
          "return_type": "Mock<IUserManager>",
          "parameters": [],
          "description": "Строит мок <tags>builders, user-manager, build, fluent-api</tags>",
          "tags": [
            "builder",
            "user",
            "mock"
          ],
          "is_static": false,
          "is_generic": true,
          "signature": "public Mock<IUserManager> Build() => _mock;",
          "line_number": 62
        },
        {
          "name": "BuildObject",
          "return_type": "IUserManager",
          "parameters": [],
          "description": "Строит мок <tags>builders, user-manager, build, fluent-api</tags>",
          "tags": [
            "builder",
            "user"
          ],
          "is_static": false,
          "is_generic": false,
          "signature": "public IUserManager BuildObject() => Build().Object;",
          "line_number": 68
        }
      ],
      "lines_count": 69
    }
  ],
  "all_tags": [
    "ai",
    "autofixture",
    "ban",
    "bogus",
    "builder",
    "captcha",
    "chat",
    "collection",
    "factory",
    "fake",
    "golden-master",
    "invalid",
    "message",
    "mock",
    "moderation",
    "scenario",
    "setup",
    "spam",
    "telegram",
    "test-infrastructure",
    "user",
    "valid"
  ]
}