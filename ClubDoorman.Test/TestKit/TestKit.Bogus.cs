using Bogus;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.TestKit;

/// <summary>
/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ TestKit —Å Bogus –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
/// <tags>bogus, realistic-data, faker, test-data</tags>
/// </summary>
public static class TestKitBogus
{
    private static readonly Faker _faker = new Faker("ru");

    #region User Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Bogus
    /// <tags>bogus, user, realistic, faker</tags>
    /// </summary>
    public static User CreateRealisticUser(long? userId = null)
    {
        var userFaker = new Faker<User>()
            .RuleFor(u => u.Id, f => userId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(u => u.IsBot, false)
            .RuleFor(u => u.FirstName, f => f.Name.FirstName())
            .RuleFor(u => u.LastName, f => f.Name.LastName())
            .RuleFor(u => u.Username, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))
            .RuleFor(u => u.LanguageCode, f => f.PickRandom("ru", "en", "es", "de"))
            .RuleFor(u => u.IsPremium, f => f.Random.Bool(0.1f)) // 10% –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            .RuleFor(u => u.AddedToAttachmentMenu, f => f.Random.Bool(0.05f)); // 5% —Å attachment menu

        return userFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    /// <tags>bogus, bot, realistic, faker</tags>
    /// </summary>
    public static User CreateRealisticBot(long? botId = null)
    {
        var botFaker = new Faker<User>()
            .RuleFor(u => u.Id, f => botId ?? f.Random.Long(100000000, 999999999))
            .RuleFor(u => u.IsBot, true)
            .RuleFor(u => u.FirstName, f => f.PickRandom("TestBot", "HelperBot", "ServiceBot", "AdminBot"))
            .RuleFor(u => u.Username, (f, u) => u.FirstName.ToLowerInvariant())
            .RuleFor(u => u.CanJoinGroups, f => f.Random.Bool(0.8f))
            .RuleFor(u => u.CanReadAllGroupMessages, f => f.Random.Bool(0.6f))
            .RuleFor(u => u.SupportsInlineQueries, f => f.Random.Bool(0.3f));

        return botFaker.Generate();
    }

    #endregion

    #region Chat Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É
    /// <tags>bogus, chat, group, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticGroup(long? chatId = null)
    {
        var groupFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -100000000000))
            .RuleFor(c => c.Type, ChatType.Group)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Internet.UserName());
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ Telegram.Bot.Types.Chat

        return groupFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
    /// <tags>bogus, chat, supergroup, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticSupergroup(long? chatId = null)
    {
        var supergroupFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -100000000000))
            .RuleFor(c => c.Type, ChatType.Supergroup)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Internet.UserName());
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ Telegram.Bot.Types.Chat

        return supergroupFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
    /// <tags>bogus, chat, channel, realistic, faker</tags>
    /// </summary>
    public static Chat CreateRealisticChannel(long? chatId = null)
    {
        var channelFaker = new Faker<Chat>()
            .RuleFor(c => c.Id, f => chatId ?? f.Random.Long(-1000000000000, -100000000000))
            .RuleFor(c => c.Type, ChatType.Channel)
            .RuleFor(c => c.Title, f => f.Company.CompanyName())
            .RuleFor(c => c.Username, f => f.Internet.UserName());
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ Telegram.Bot.Types.Chat

        return channelFaker.Generate();
    }

    #endregion

    #region Message Generators

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// <tags>bogus, message, realistic, faker</tags>
    /// </summary>
    public static Message CreateRealisticMessage(User? from = null, Chat? chat = null, string? text = null)
    {
        var messageFaker = new Faker<Message>()
            .RuleFor(m => m.MessageId, f => f.Random.Int(1, 1000000))
            .RuleFor(m => m.Date, f => f.Date.Recent(7))
            .RuleFor(m => m.From, f => from ?? CreateRealisticUser())
            .RuleFor(m => m.Chat, f => chat ?? CreateRealisticGroup())
            .RuleFor(m => m.Text, f => text ?? f.Lorem.Sentence())
            .RuleFor(m => m.Entities, f => f.Random.Bool(0.3f) ? CreateRandomEntities() : null)
            .RuleFor(m => m.ReplyToMessage, f => f.Random.Bool(0.1f) ? CreateRealisticMessage() : null)
            .RuleFor(m => m.ForwardFrom, f => f.Random.Bool(0.05f) ? CreateRealisticUser() : null)
            .RuleFor(m => m.ViaBot, f => f.Random.Bool(0.02f) ? CreateRealisticBot() : null);

        return messageFaker.Generate();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    /// <tags>bogus, message, spam, realistic, faker</tags>
    /// </summary>
    public static Message CreateRealisticSpamMessage(User? from = null, Chat? chat = null)
    {
        var spamTexts = new[]
        {
            "üî• –ù–ï–í–ï–†–û–Ø–¢–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï! üî•",
            "üí∞ –ó–ê–†–ê–ë–û–¢–ê–ô 100000‚ÇΩ –ó–ê –î–ï–ù–¨! üí∞",
            "üéÅ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–û–î–ê–†–û–ö! –ù–ê–ñ–ú–ò –°–ï–ô–ß–ê–°! üéÅ",
            "‚ö° –°–†–û–ß–ù–û! –ê–ö–¶–ò–Ø –¢–û–õ–¨–ö–û –°–ï–ì–û–î–ù–Ø! ‚ö°",
            "üíé –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –î–û–°–¢–£–ü! üíé",
            "üöÄ –†–ê–°–ö–†–£–¢–ò –°–í–û–ô –ë–ò–ó–ù–ï–°! üöÄ",
            "üì± –°–ö–ê–ß–ê–ô –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ò –ü–û–õ–£–ß–ò –ë–û–ù–£–°! üì±"
        };

        return CreateRealisticMessage(
            from: from,
            chat: chat,
            text: _faker.PickRandom(spamTexts)
        );
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    /// <tags>bogus, message, long-text, realistic, faker</tags>
    /// </summary>
    public static Message CreateLongMessage(User? from = null, Chat? chat = null)
    {
        return CreateRealisticMessage(
            from: from,
            chat: chat,
            text: _faker.Lorem.Paragraphs(3)
        );
    }

    #endregion

    #region Helper Methods

    private static MessageEntity[] CreateRandomEntities()
    {
        var entityTypes = new[] 
        { 
            MessageEntityType.Bold, 
            MessageEntityType.Italic, 
            MessageEntityType.Code, 
            MessageEntityType.Pre, 
            MessageEntityType.TextLink, 
            MessageEntityType.Mention, 
            MessageEntityType.Hashtag 
        };
        var entities = new List<MessageEntity>();
        var count = _faker.Random.Int(1, 3);
        for (int i = 0; i < count; i++)
        {
            entities.Add(new MessageEntity
            {
                Type = _faker.PickRandom(entityTypes),
                Offset = _faker.Random.Int(0, 50),
                Length = _faker.Random.Int(1, 20)
            });
        }
        return entities.ToArray();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    /// <tags>bogus, message, spam, text-check</tags>
    /// </summary>
    public static bool IsSpamText(string? text)
    {
        if (string.IsNullOrEmpty(text)) return false;
        var spamPatterns = new[] { "üî•", "üí∞", "üéÅ", "‚ö°", "üíé", "üöÄ", "üì±" };
        return spamPatterns.Any(p => text.Contains(p));
    }

    #endregion
} 