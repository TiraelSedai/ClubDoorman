using Telegram.Bot.Types;
using ClubDoorman.Test.TestKit;

namespace ClubDoorman.Test.TestKit.Builders;

/// <summary>
/// Builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
/// <tags>builders, message, telegram, fluent-api</tags>
/// </summary>
public class MessageBuilder
{
    private Message _message = TestKitBogus.CreateRealisticMessage();
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    /// <tags>builders, message, text, fluent-api</tags>
    /// </summary>
    public MessageBuilder WithText(string text)
    {
        _message.Text = text;
        return this;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    /// <tags>builders, message, user, fluent-api</tags>
    /// </summary>
    public MessageBuilder FromUser(long userId)
    {
        _message.From = TestKitBogus.CreateRealisticUser(userId);
        return this;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç)
    /// <tags>builders, message, user, fluent-api</tags>
    /// </summary>
    public MessageBuilder FromUser(User user)
    {
        _message.From = user;
        return this;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç
    /// <tags>builders, message, chat, fluent-api</tags>
    /// </summary>
    public MessageBuilder InChat(long chatId)
    {
        _message.Chat = TestKitBogus.CreateRealisticGroup();
        _message.Chat.Id = chatId;
        return this;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Ç (–ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç)
    /// <tags>builders, message, chat, fluent-api</tags>
    /// </summary>
    public MessageBuilder InChat(Chat chat)
    {
        _message.Chat = chat;
        return this;
    }
    

    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–ø–∞–º
    /// <tags>builders, message, spam, fluent-api</tags>
    /// </summary>
    public MessageBuilder AsSpam()
    {
        _message.Text = "üî•üí∞üéÅ Make money fast! üí∞üî•üéÅ";
        return this;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–æ–µ
    /// <tags>builders, message, valid, fluent-api</tags>
    /// </summary>
    public MessageBuilder AsValid()
    {
        _message.Text = "Hello, this is a valid message!";
        return this;
    }
    
    /// <summary>
    /// –°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// <tags>builders, message, build, fluent-api</tags>
    /// </summary>
    public Message Build() => _message;
    
    /// <summary>
    /// –ù–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Message
    /// <tags>builders, message, conversion, fluent-api</tags>
    /// </summary>
    public static implicit operator Message(MessageBuilder builder) => builder.Build();
} 