using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using ClubDoorman.Test.TestData;
using ClubDoorman.TestInfrastructure;

namespace ClubDoorman.Test.TestKit;

/// <summary>
/// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Telegram –æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
/// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å MessageId –∏ —É–ø—Ä–æ—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
/// <tags>telegram, message-id, scenarios, fake-client, test-infrastructure</tags>
/// </summary>
public static class TestKitTelegram
{
    private static int _nextMessageId = 1;
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç FakeTelegramClient —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// <tags>telegram, fake-client, test-infrastructure</tags>
    /// </summary>
    public static FakeTelegramClient CreateFakeClient()
    {
        return new FakeTelegramClient();
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç MessageEnvelope —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º MessageId
    /// <tags>telegram, message-envelope, message-id, test-infrastructure</tags>
    /// </summary>
    public static MessageEnvelope CreateEnvelope(
        long userId = 12345,
        long chatId = 67890,
        string text = "Test message",
        string? username = null,
        string? firstName = null,
        string? chatTitle = null)
    {
        return new MessageEnvelope(
            MessageId: _nextMessageId++,
            UserId: userId,
            ChatId: chatId,
            Text: text,
            Username: username ?? "testuser",
            FirstName: firstName ?? "Test",
            LastName: "User",
            IsBot: false,
            ChatTitle: chatTitle ?? "Test Chat",
            ChatUsername: "testchat",
            Date: DateTime.UtcNow
        );
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç MessageEnvelope –¥–ª—è —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
    /// <tags>telegram, message-envelope, spam, message-id, test-infrastructure</tags>
    /// </summary>
    public static MessageEnvelope CreateSpamEnvelope(
        long userId = 12345,
        long chatId = 67890,
        int? messageId = null)
    {
        return new MessageEnvelope(
            MessageId: messageId ?? _nextMessageId++,
            UserId: userId,
            ChatId: chatId,
            Text: "üî•üí∞üéÅ Make money fast! üí∞üî•üéÅ",
            Username: "spammer",
            FirstName: "Spam",
            LastName: "User",
            IsBot: false,
            ChatTitle: "Test Chat",
            ChatUsername: "testchat",
            Date: DateTime.UtcNow
        );
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç MessageEnvelope –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    /// <tags>telegram, message-envelope, new-user, message-id, test-infrastructure</tags>
    /// </summary>
    public static MessageEnvelope CreateNewUserEnvelope(
        long userId = 12345,
        long chatId = 67890,
        int? messageId = null)
    {
        return new MessageEnvelope(
            MessageId: messageId ?? _nextMessageId++,
            UserId: userId,
            ChatId: chatId,
            Text: "", // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            Username: "newuser",
            FirstName: "New",
            LastName: "User",
            IsBot: false,
            ChatTitle: "Test Chat",
            ChatUsername: "testchat",
            Date: DateTime.UtcNow
        );
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç Message –∏–∑ MessageEnvelope —á–µ—Ä–µ–∑ FakeTelegramClient
    /// <tags>telegram, message, message-envelope, fake-client, test-infrastructure</tags>
    /// </summary>
    public static Message CreateMessageFromEnvelope(FakeTelegramClient fakeClient, MessageEnvelope envelope)
    {
        fakeClient.RegisterMessageEnvelope(envelope);
        return fakeClient.CreateMessageFromEnvelope(envelope);
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç Update —Å Message –∏–∑ MessageEnvelope
    /// </summary>
    public static Update CreateUpdateFromEnvelope(FakeTelegramClient fakeClient, MessageEnvelope envelope)
    {
        var message = CreateMessageFromEnvelope(fakeClient, envelope);
        return new Update { Message = message };
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç CallbackQuery —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º MessageId
    /// </summary>
    public static CallbackQuery CreateCallbackQuery(
        long userId = 12345,
        long chatId = 67890,
        string data = "test_callback",
        int? messageId = null)
    {
        var message = TestKitBogus.CreateRealisticMessage();
        // MessageId readonly, –∏—Å–ø–æ–ª—å–∑—É–µ–º TestDataFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º ID
        if (messageId.HasValue)
        {
            message = TK.CreateValidMessageWithId(messageId.Value);
        }
        
        return new CallbackQuery
        {
            Id = Guid.NewGuid().ToString(),
            From = TestKitBogus.CreateRealisticUser(userId),
            Message = message,
            ChatInstance = Guid.NewGuid().ToString(),
            Data = data
        };
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç Update —Å CallbackQuery
    /// </summary>
    public static Update CreateCallbackQueryUpdate(
        long userId = 12345,
        long chatId = 67890,
        string data = "test_callback",
        int? messageId = null)
    {
        return new Update
        {
            CallbackQuery = CreateCallbackQuery(userId, chatId, data, messageId)
        };
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç ChatMemberUpdated –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    /// </summary>
    public static ChatMemberUpdated CreateChatMemberUpdated(
        long userId = 12345,
        long chatId = 67890,
        ChatMemberStatus oldStatus = ChatMemberStatus.Member,
        ChatMemberStatus newStatus = ChatMemberStatus.Administrator)
    {
        var user = TestKitBogus.CreateRealisticUser(userId);
        
        return new ChatMemberUpdated
        {
            Chat = TestKitBogus.CreateRealisticGroup(),
            From = user,
            Date = DateTime.UtcNow,
            OldChatMember = CreateChatMemberByStatus(user, oldStatus),
            NewChatMember = CreateChatMemberByStatus(user, newStatus)
        };
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç Update —Å ChatMemberUpdated
    /// </summary>
    public static Update CreateChatMemberUpdate(
        long userId = 12345,
        long chatId = 67890,
        ChatMemberStatus oldStatus = ChatMemberStatus.Member,
        ChatMemberStatus newStatus = ChatMemberStatus.Administrator)
    {
        return new Update
        {
            ChatMember = CreateChatMemberUpdated(userId, chatId, oldStatus, newStatus)
        };
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å FakeTelegramClient
    /// </summary>
    public static (FakeTelegramClient fakeClient, MessageEnvelope envelope, Message message, Update update) CreateFullScenario(
        long userId = 12345,
        long chatId = 67890,
        string text = "Test message")
    {
        var fakeClient = CreateFakeClient();
        var envelope = CreateEnvelope(userId, chatId, text);
        var message = CreateMessageFromEnvelope(fakeClient, envelope);
        var update = new Update { Message = message };
        
        return (fakeClient, envelope, message, update);
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å–ø–∞–º-—Å—Ü–µ–Ω–∞—Ä–∏–π —Å FakeTelegramClient
    /// </summary>
    public static (FakeTelegramClient fakeClient, MessageEnvelope envelope, Message message, Update update) CreateSpamScenario(
        long userId = 12345,
        long chatId = 67890)
    {
        var fakeClient = CreateFakeClient();
        var envelope = CreateSpamEnvelope(userId, chatId);
        var message = CreateMessageFromEnvelope(fakeClient, envelope);
        var update = new Update { Message = message };
        
        return (fakeClient, envelope, message, update);
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å FakeTelegramClient
    /// </summary>
    public static (FakeTelegramClient fakeClient, MessageEnvelope envelope, Message message, Update update) CreateNewUserScenario(
        long userId = 12345,
        long chatId = 67890)
    {
        var fakeClient = CreateFakeClient();
        var envelope = CreateNewUserEnvelope(userId, chatId);
        var message = CreateMessageFromEnvelope(fakeClient, envelope);
        var update = new Update { Message = message };
        
        return (fakeClient, envelope, message, update);
    }
    
    /// <summary>
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ MessageId (–¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤)
    /// </summary>
    public static void ResetMessageIdCounter()
    {
        _nextMessageId = 1;
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π MessageId (–¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤)
    /// </summary>
    public static void SetNextMessageId(int messageId)
    {
        _nextMessageId = messageId;
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç ChatMember —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    /// </summary>
    private static ChatMember CreateChatMemberByStatus(User user, ChatMemberStatus status)
    {
        return status switch
        {
            ChatMemberStatus.Creator => new ChatMemberOwner { User = user },
            ChatMemberStatus.Administrator => new ChatMemberAdministrator { User = user },
            ChatMemberStatus.Member => new ChatMemberMember { User = user },
            ChatMemberStatus.Restricted => new ChatMemberRestricted { User = user },
            ChatMemberStatus.Left => new ChatMemberLeft { User = user },
            ChatMemberStatus.Kicked => new ChatMemberBanned { User = user },
            _ => new ChatMemberMember { User = user }
        };
    }
} 