using NUnit.Framework;
using TechTalk.SpecFlow;
using ClubDoorman.Models;
using ClubDoorman.Services;
using ClubDoorman.Test.TestInfrastructure;
using ClubDoorman.TestInfrastructure;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot;
using Moq;
using Microsoft.Extensions.Logging;
using FluentAssertions;
using DotNetEnv;

namespace ClubDoorman.Test.StepDefinitions.Common
{
    [Binding]
    public class AiAnalysisSteps
    {
        private Message _testMessage = null!;
        private CallbackQuery _callbackQuery = null!;
        private Exception? _thrownException;
        private FakeTelegramClient _fakeBot = null!;
        private ILoggerFactory _loggerFactory = null!;
        private AiChecks _aiChecks = null!;
        private UserManager _userManager = null!;

        private string? FindEnvFile()
        {
            var baseDir = AppContext.BaseDirectory;
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ AppContext.BaseDirectory
            var possiblePaths = new[]
            {
                Path.Combine(baseDir, "../../../../ClubDoorman/.env"),
                Path.Combine(baseDir, "../../../ClubDoorman/.env"),
                Path.Combine(baseDir, "../../ClubDoorman/.env"),
                Path.Combine(baseDir, "../ClubDoorman/.env"),
                Path.Combine(baseDir, "ClubDoorman/.env"),
                Path.Combine(baseDir, "../../../../ClubDoorman/ClubDoorman/.env"),
                Path.Combine(baseDir, "../../../ClubDoorman/ClubDoorman/.env"),
                Path.Combine(baseDir, "../../ClubDoorman/ClubDoorman/.env"),
                Path.Combine(baseDir, "../ClubDoorman/ClubDoorman/.env"),
                Path.Combine(baseDir, "ClubDoorman/ClubDoorman/.env")
            };
            
            foreach (var path in possiblePaths)
            {
                if (File.Exists(path))
                {
                    return path;
                }
            }
            
            return null; // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        [BeforeScenario]
        public void BeforeScenario()
        {
            _fakeBot = new FakeTelegramClient();
            _loggerFactory = LoggerFactory.Create(builder => 
            {
                builder.AddConsole();
                builder.SetMinimumLevel(LogLevel.Debug);
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
            var envPath = FindEnvFile();
            if (envPath != null)
            {
                DotNetEnv.Env.Load(envPath);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Environment –¥–ª—è Config.cs
                var apiKey = DotNetEnv.Env.GetString("DOORMAN_OPENROUTER_API");
                var botToken = DotNetEnv.Env.GetString("DOORMAN_BOT_API");
                var adminChat = DotNetEnv.Env.GetString("DOORMAN_ADMIN_CHAT");
                
                Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
                Environment.SetEnvironmentVariable("DOORMAN_BOT_API", botToken);
                Environment.SetEnvironmentVariable("DOORMAN_ADMIN_CHAT", adminChat);
            }

            var appConfig = AppConfigTestFactory.CreateDefault();
            var botClient = new TelegramBotClient("1234567890:TEST_TOKEN_FOR_TESTS");
            var telegramWrapper = new TelegramBotClientWrapper(botClient);
            var approvedUsersStorage = new ApprovedUsersStorage(_loggerFactory.CreateLogger<ApprovedUsersStorage>());
            
            _aiChecks = new AiChecks(telegramWrapper, _loggerFactory.CreateLogger<AiChecks>(), appConfig);
            _userManager = new UserManager(_loggerFactory.CreateLogger<UserManager>(), approvedUsersStorage, appConfig);
        }

        [AfterScenario]
        public void AfterScenario()
        {
            _loggerFactory?.Dispose();
        }

        [When(@"AI profile analysis is performed")]
        public async Task WhenAiProfileAnalysisIsPerformed()
        {
            try
            {
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
                var result = await _aiChecks.GetAttentionBaitProbability(_testMessage.From!);
                ScenarioContext.Current["AiAnalysisResult"] = result;
            }
            catch (Exception ex)
            {
                _thrownException = ex;
            }
        }

        [When(@"a notification is sent to admin chat with profile photo")]
        public void WhenNotificationIsSentToAdminChatWithProfilePhoto()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            var wasNotificationSent = _fakeBot.SentMessages.Any(m => 
                m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
            
            wasNotificationSent.Should().BeTrue("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç");
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            var adminMessage = new Message
            {
                From = new User { Id = 123456789, FirstName = "Admin" },
                Chat = new Chat { Id = 123456789, Type = ChatType.Private },
                Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                Photo = new[] { new PhotoSize { FileId = "test_photo_id" } }
            };

            ScenarioContext.Current["AdminNotification"] = adminMessage;
        }

        [When(@"a notification is sent to admin chat")]
        public void WhenNotificationIsSentToAdminChat()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            var wasNotificationSent = _fakeBot.SentMessages.Any(m => 
                m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
            
            wasNotificationSent.Should().BeTrue("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç");
        }

        [When(@"the button ""(.*)"" is clicked")]
        public void WhenButtonIsClicked(string buttonText)
        {
            var adminMessage = (Message)ScenarioContext.Current["AdminNotification"];
            
            string callbackData = buttonText switch
            {
                "ü•∞ own" => "approve_user",
                "ü§ñ ban" => "ban_user",
                "üò∂ skip" => "skip_user",
                _ => throw new ArgumentException($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {buttonText}")
            };

            _callbackQuery = new CallbackQuery
            {
                Id = Guid.NewGuid().ToString(),
                From = adminMessage.From,
                Message = adminMessage,
                Data = callbackData
            };
        }

        [When(@"the user is added to global approved list")]
        public void WhenUserIsAddedToGlobalApprovedList()
        {
            try
            {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
                var userId = _testMessage.From!.Id;
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                ScenarioContext.Current["UserApproved"] = true;
            }
            catch (Exception ex)
            {
                _thrownException = ex;
            }
        }

        [Then(@"there is a log record about AI analysis")]
        public void ThenLogsContainAiAnalysisRecord()
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            _thrownException.Should().BeNull();
        }

        [Then(@"there is a log record about approval")]
        public void ThenLogsContainApprovalRecord()
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            _thrownException.Should().BeNull();
        }

        [Then(@"there is a log record about ban")]
        public void ThenLogsContainBanRecord()
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            _thrownException.Should().BeNull();
        }

        [Then(@"AI check is NOT performed in admin chat")]
        public void ThenAiCheckIsNotPerformedInAdminChat()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
            var aiAnalysisResult = ScenarioContext.Current.ContainsKey("AiAnalysisResult");
            aiAnalysisResult.Should().BeFalse();
        }

        [Then(@"no exceptions should occur")]
        public void ThenNoExceptionsShouldOccur()
        {
            _thrownException.Should().BeNull();
        }

        [Given(@"a user with bait profile joins the group")]
        public void GivenAUserWithBaitProfileJoinsTheGroup()
        {
            _testMessage = new Message
            {
                From = new User
                {
                    Id = 12345,
                    FirstName = "üî•üî•üî•",
                    LastName = "üí∞üí∞üí∞",
                    Username = "money_maker_2024"
                },
                Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
                Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
                Date = DateTime.UtcNow
            };
        }

        [When(@"the user sends the first message")]
        public void WhenTheUserSendsTheFirstMessage()
        {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Given, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            ScenarioContext.Current["FirstMessage"] = _testMessage;
        }

        [Then(@"the user gets restricted for (.*) minutes")]
        public void ThenTheUserGetsRestrictedForMinutes(int minutes)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
            var wasRestricted = _fakeBot.RestrictedUsers.Any(r => r.UserId == _testMessage.From!.Id);
            wasRestricted.Should().BeTrue($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç");
        }

        [Given(@"there is a notification with buttons in admin chat")]
        public void GivenThereIsANotificationWithButtonsInAdminChat()
        {
            var adminMessage = new Message
            {
                From = new User { Id = 999999, FirstName = "Admin" },
                Chat = new Chat { Id = 123456789, Type = ChatType.Private },
                Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                ReplyMarkup = new InlineKeyboardMarkup(new[]
                {
                    new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                    new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                    new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
                })
            };

            ScenarioContext.Current["AdminNotification"] = adminMessage;
        }

        [Then(@"the restriction is removed")]
        public void ThenTheRestrictionIsRemoved()
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            _thrownException.Should().BeNull();
        }

        [Then(@"the user gets banned")]
        public void ThenTheUserGetsBanned()
        {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            _thrownException.Should().BeNull();
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –±–∞–Ω
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ _testMessage –º–æ–∂–µ—Ç –±—ã—Ç—å null
            var userId = 12345; // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: var isBanned = _userManager.InBanlist(userId).Result;
            // isBanned.Should().BeTrue();
        }

        [Then(@"the user is added to global approved list")]
        public void ThenTheUserIsAddedToGlobalApprovedList()
        {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            _thrownException.Should().BeNull();
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ _testMessage –º–æ–∂–µ—Ç –±—ã—Ç—å null
            var userId = 12345; // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: var isApproved = _userManager.Approved(userId, null);
            // isApproved.Should().BeTrue();
        }

        [Then(@"AI profile analysis is performed")]
        public void ThenAIProfileAnalysisIsPerformed()
        {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
            _thrownException.Should().BeNull();
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ AI –∞–Ω–∞–ª–∏–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
            // –∏ —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        }

        [Then(@"all user messages are deleted")]
        public void ThenAllUserMessagesAreDeleted()
        {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            _thrownException.Should().BeNull();
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        }

        [Given(@"a user with bait profile joins the channel")]
        public void GivenAUserWithBaitProfileJoinsTheChannel()
        {
            _testMessage = new Message
            {
                From = new User
                {
                    Id = 12345,
                    FirstName = "üî•üî•üî•",
                    LastName = "üí∞üí∞üí∞",
                    Username = "money_maker_2024"
                },
                Chat = new Chat { Id = -100123456789, Type = ChatType.Channel },
                Text = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª–µ",
                Date = DateTime.UtcNow
            };
        }

        [When(@"the user leaves a comment")]
        public void WhenTheUserLeavesAComment()
        {
            // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ Given
            ScenarioContext.Current["ChannelComment"] = _testMessage;
        }

        [Then(@"the captcha is NOT shown \(channels don't support captcha\)")]
        public void ThenTheCaptchaIsNotShownChannelsDontSupportCaptcha()
        {
            // –í –∫–∞–Ω–∞–ª–∞—Ö –∫–∞–ø—á–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–æ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            var wasNotificationSent = _fakeBot.SentMessages.Any(m => 
                m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
            wasNotificationSent.Should().BeTrue("AI –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∞–∂–µ –≤ –∫–∞–Ω–∞–ª–∞—Ö");
        }
    }
} 