using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.TestData;

/// <summary>
/// –§–∞–±—Ä–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
/// </summary>
public static class MessageTestData
{
    public static User TestUser(string? username = "test_user", string? firstName = "Test", string? lastName = "User")
    {
        return new User
        {
            Id = 12345,
            IsBot = false,
            FirstName = firstName ?? "Test",
            LastName = lastName,
            Username = username
        };
    }

    public static User TestBot(string? username = "test_bot", string? firstName = "TestBot")
    {
        return new User
        {
            Id = 123456789,
            IsBot = true,
            FirstName = firstName ?? "TestBot",
            Username = username
        };
    }

    public static Chat TestChat(string? title = "Test Chat", ChatType type = ChatType.Group)
    {
        return new Chat
        {
            Id = 123456,
            Type = type,
            Title = title ?? "Test Chat"
        };
    }

    public static Message ValidMessage(string? text = "Hello, this is a valid message!")
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = text ?? "Hello, this is a valid message!"
        };
    }

    public static Message SpamMessage(string? text = "BUY NOW!!! CLICK HERE!!!")
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = text ?? "BUY NOW!!! CLICK HERE!!!"
        };
    }

    public static Message BotMessage(string? text = "Bot message")
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestBot(),
            Text = text ?? "Bot message"
        };
    }

    public static Message ServiceMessage()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(), // Service messages can have From for new members
            Text = null,
            NewChatMembers = new[] { TestUser() }
        };
    }

    public static Message StartCommand()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = "/start"
        };
    }

    public static Message SuspiciousCommand()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = "/suspicious"
        };
    }

    public static Message UnknownCommand()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = "/unknown"
        };
    }

    public static Message NullMessage() => null!;

    public static Message EmptyMessage()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = ""
        };
    }

    public static Message VeryLongMessage()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = new string('A', 10000) // Very long message
        };
    }

    public static Message MessageWithSpecialCharacters()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = TestUser(),
            Text = "Special chars: !@#$%^&*()_+-=[]{}|;':\",./<>?"
        };
    }

    /// <summary>
    /// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @Dnekxpb —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    /// </summary>
    public static User SuspiciousUserDnekxpb()
    {
        return new User
        {
            Id = 987654321,
            IsBot = false,
            FirstName = "Manu",
            LastName = "–ß—ã—Ñ—ã—Å",
            Username = "Dnekxpb"
        };
    }

    /// <summary>
    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Dnekxpb
    /// </summary>
    public static Message SuspiciousUserMessage()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = SuspiciousUserDnekxpb(),
            Text = "–ü—Ä–æ–¥–∞–º —Å–ª–æ–Ω–∞ –ø–∏—à–∏ —Å –ª—Å"
        };
    }

    /// <summary>
    /// –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Dnekxpb
    /// </summary>
    public static ChatFullInfo SuspiciousUserChatInfo()
    {
        return new ChatFullInfo
        {
            Id = 987654321,
            Type = ChatType.Private,
            Title = null,
            Username = "Dnekxpb",
            Bio = "–ú–∏—Ç–∏–º–∞–Ω\n\nManu –ß—ã—Ñ—ã—Å:\n–ü—Ä–æ–¥–∞–º —Å–ª–æ–Ω–∞ –ø–∏—à–∏ —Å –ª—Å",
            LinkedChatId = null,
            Photo = new ChatPhoto
            {
                SmallFileId = "fake_small_photo_id",
                BigFileId = "fake_big_photo_id"
            }
        };
    }

    /// <summary>
    /// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —è–≤–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    /// </summary>
    public static User VerySuspiciousUser()
    {
        return new User
        {
            Id = 111222333,
            IsBot = false,
            FirstName = "üî•üí∞üíé",
            LastName = "–ü–†–ï–ú–ò–£–ú",
            Username = "premium_crypto_2024"
        };
    }

    /// <summary>
    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public static Message VerySuspiciousUserMessage()
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = TestChat(),
            From = VerySuspiciousUser(),
            Text = "üî• –ó–ê–†–ê–ë–û–¢–ê–ô 1000$ –í –î–ï–ù–¨! üí∞ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê! üíé –ù–ê–ñ–ú–ò –°–ï–ô–ß–ê–°!"
        };
    }

    /// <summary>
    /// –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public static ChatFullInfo VerySuspiciousUserChatInfo()
    {
        return new ChatFullInfo
        {
            Id = 111222333,
            Type = ChatType.Private,
            Title = null,
            Username = "premium_crypto_2024",
            Bio = "üî• –ü–†–ï–ú–ò–£–ú –ö–†–ò–ü–¢–û –¢–†–ï–ô–î–ò–ù–ì üí∞\n\nüíé –ó–ê–†–ê–ë–û–¢–ê–ô 1000$ –í –î–ï–ù–¨!\nüî• –ù–ê–ñ–ú–ò –°–ï–ô–ß–ê–°!\nüí∞ –ë–ï–°–ü–õ–ê–¢–ù–û!\n\nüì± Telegram: @crypto_scam\nüåê –°–∞–π—Ç: scam.crypto",
            LinkedChatId = null,
            Photo = new ChatPhoto
            {
                SmallFileId = "fake_suspicious_small_photo_id",
                BigFileId = "fake_suspicious_big_photo_id"
            }
        };
    }
} 