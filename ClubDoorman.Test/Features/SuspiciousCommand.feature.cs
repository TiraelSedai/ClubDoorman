// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ClubDoorman.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Suspicious Command")]
    [NUnit.Framework.CategoryAttribute("BDD")]
    public partial class SuspiciousCommandFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "BDD"};
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Suspicious Command", "  As an administrator\n  I want to manage suspicious users\n  So that I can monitor" +
                    " and control potentially problematic users", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
            testRunner.Given("I am an administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("I have a message handler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show suspicious users statistics")]
        public void ShowSuspiciousUsersStatistics()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show suspicious users statistics", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.Given("there are suspicious users in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I send \"/suspicious stats\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see suspicious users statistics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the statistics should include total suspicious users count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the statistics should include AI detect users count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the statistics should include groups count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the statistics should show system status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("List users with AI detect")]
        public void ListUsersWithAIDetect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List users with AI detect", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.Given("there are users with AI detect enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I send \"/suspicious list\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see a list of users with AI detect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the list should include user IDs and chat IDs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the list should be limited to 10 users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show help for suspicious command")]
        public void ShowHelpForSuspiciousCommand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show help for suspicious command", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.When("I send \"/suspicious help\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see help information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the help should describe the suspicious system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the help should list available commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show help for suspicious command without parameters")]
        public void ShowHelpForSuspiciousCommandWithoutParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show help for suspicious command without parameters", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.When("I send \"/suspicious\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see help information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the help should describe the suspicious system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the help should list available commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-admin user cannot access suspicious command")]
        public void Non_AdminUserCannotAccessSuspiciousCommand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-admin user cannot access suspicious command", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.Given("I am not an administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I send \"/suspicious stats\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should not receive any response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("no suspicious users statistics should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Empty AI detect users list")]
        public void EmptyAIDetectUsersList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Empty AI detect users list", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.Given("there are no users with AI detect enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When("I send \"/suspicious list\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see a message indicating no users with AI detect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the message should be informative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Suspicious command with invalid subcommand")]
        public void SuspiciousCommandWithInvalidSubcommand()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Suspicious command with invalid subcommand", null, tagsOfScenario, argumentsOfScenario, featureTags);
            this.ScenarioInitialize(scenarioInfo);
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                this.FeatureBackground();
                testRunner.When("I send \"/suspicious invalid_subcommand\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then("I should see help information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And("the help should describe the suspicious system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
                testRunner.And("the help should list available commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
