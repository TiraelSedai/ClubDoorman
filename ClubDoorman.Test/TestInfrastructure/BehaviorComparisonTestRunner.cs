using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using Newtonsoft.Json;
using NUnit.Framework;

namespace ClubDoorman.Test.TestInfrastructure;

/// <summary>
/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FluentAssertions.BeEquivalentTo –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
/// </summary>
public class BehaviorComparisonTestRunner<TRequest, TResponse>
{
    private readonly ILogger<BehaviorComparisonTestRunner<TRequest, TResponse>> _logger;
    private readonly string _testName;
    private readonly string _outputDir;

    public BehaviorComparisonTestRunner(
        ILogger<BehaviorComparisonTestRunner<TRequest, TResponse>> logger,
        string testName,
        string outputDir = "TestResults/behavior-comparison")
    {
        _logger = logger;
        _testName = testName;
        _outputDir = outputDir;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        Directory.CreateDirectory(outputDir);
    }

    /// <summary>
    /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    /// </summary>
    /// <param name="request">–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</param>
    /// <param name="oldHandler">–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫</param>
    /// <param name="newHandler">–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫</param>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
    /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</returns>
    public async Task<ComparisonResult> CompareBehaviorAsync(
        TRequest request,
        Func<TRequest, CancellationToken, Task<TResponse>> oldHandler,
        Func<TRequest, CancellationToken, Task<TResponse>> newHandler,
        CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {TestName}", _testName);

        var result = new ComparisonResult
        {
            TestName = _testName,
            Request = request,
            Timestamp = DateTime.UtcNow
        };

        try
        {
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            _logger.LogDebug("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É...");
            var oldStartTime = DateTime.UtcNow;
            result.OldResponse = await oldHandler(request, cancellationToken);
            result.OldExecutionTime = DateTime.UtcNow - oldStartTime;

            // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
            _logger.LogDebug("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É...");
            var newStartTime = DateTime.UtcNow;
            result.NewResponse = await newHandler(request, cancellationToken);
            result.NewExecutionTime = DateTime.UtcNow - newStartTime;

                            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                _logger.LogDebug("üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...");
                result.AreEquivalent = CompareResponses((TResponse)result.OldResponse!, (TResponse)result.NewResponse!);

            if (result.AreEquivalent)
            {
                _logger.LogInformation("‚úÖ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ –¥–ª—è {TestName}", _testName);
            }
            else
            {
                _logger.LogWarning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –¥–ª—è {TestName}", _testName);
                                        result.Differences = FindDifferences((TResponse)result.OldResponse!, (TResponse)result.NewResponse!);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await SaveResultsAsync(result);

            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è {TestName}", _testName);
            result.Error = ex.Message;
            result.HasError = true;
            
            await SaveResultsAsync(result);
            throw;
        }
    }

    /// <summary>
    /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
    /// </summary>
    private bool CompareResponses(TResponse oldResponse, TResponse newResponse)
    {
        try
        {
                                    oldResponse.Should().BeEquivalentTo(newResponse, options => options
                            .IncludingAllRuntimeProperties()
                            .IncludingAllDeclaredProperties()
                            .RespectingRuntimeTypes()
                            .WithAutoConversion());
            
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogDebug("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ: {Message}", ex.Message);
            return false;
        }
    }

    /// <summary>
    /// –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
    /// </summary>
    private List<string> FindDifferences(TResponse oldResponse, TResponse newResponse)
    {
        var differences = new List<string>();

        try
        {
                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º FluentAssertions –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π
                        oldResponse.Should().BeEquivalentTo(newResponse, options => options
                            .IncludingAllRuntimeProperties()
                            .IncludingAllDeclaredProperties()
                            .RespectingRuntimeTypes()
                            .WithAutoConversion());
        }
        catch (FluentAssertions.Execution.AssertionFailedException ex)
        {
            differences.Add($"–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è: {ex.Message}");
        }
        catch (Exception ex)
        {
            differences.Add($"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {ex.Message}");
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JSON
        try
        {
            var oldJson = JsonConvert.SerializeObject(oldResponse, Formatting.Indented);
            var newJson = JsonConvert.SerializeObject(newResponse, Formatting.Indented);
            
            if (oldJson != newJson)
            {
                differences.Add("JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è");
                differences.Add($"–°—Ç–∞—Ä—ã–π JSON: {oldJson}");
                differences.Add($"–ù–æ–≤—ã–π JSON: {newJson}");
            }
        }
        catch (Exception ex)
        {
            differences.Add($"–û—à–∏–±–∫–∞ JSON —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {ex.Message}");
        }

        return differences;
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    /// </summary>
    private async Task SaveResultsAsync(ComparisonResult result)
    {
        try
        {
            var fileName = $"{_testName}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json";
            var filePath = Path.Combine(_outputDir, fileName);

            var json = JsonConvert.SerializeObject(result, Formatting.Indented, new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.Auto,
                NullValueHandling = NullValueHandling.Include
            });

            await File.WriteAllTextAsync(filePath, json);
            _logger.LogInformation("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {FilePath}", filePath);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
        }
    }
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
/// </summary>
public class ComparisonResult
{
    public string TestName { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
    public object? Request { get; set; }
    public object? OldResponse { get; set; }
    public object? NewResponse { get; set; }
    public TimeSpan OldExecutionTime { get; set; }
    public TimeSpan NewExecutionTime { get; set; }
    public bool AreEquivalent { get; set; }
    public List<string> Differences { get; set; } = new();
    public bool HasError { get; set; }
    public string? Error { get; set; }
}

/// <summary>
/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
/// </summary>
public static class BehaviorComparisonExtensions
{
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç BehaviorComparisonTestRunner –¥–ª—è —Ç–µ—Å—Ç–∞
    /// </summary>
    public static BehaviorComparisonTestRunner<TRequest, TResponse> CreateBehaviorComparison<TRequest, TResponse>(
        this TestContext context,
        string testName)
    {
        var logger = new Mock<ILogger<BehaviorComparisonTestRunner<TRequest, TResponse>>>().Object;
        return new BehaviorComparisonTestRunner<TRequest, TResponse>(logger, testName);
    }

    /// <summary>
    /// –£—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ
    /// </summary>
    public static void ShouldBeEquivalent(this ComparisonResult result)
    {
        result.AreEquivalent.Should().BeTrue("–ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ");
        
        if (result.Differences.Any())
        {
            Assert.Fail($"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è:\n{string.Join("\n", result.Differences)}");
        }
    }

    /// <summary>
    /// –£—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
    /// </summary>
    public static void ShouldBeFaster(this ComparisonResult result, double expectedImprovement = 0.1)
    {
        var improvement = (result.OldExecutionTime - result.NewExecutionTime) / result.OldExecutionTime;
        improvement.Should().BeGreaterThan(expectedImprovement, 
            $"–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {expectedImprovement:P0}");
    }
} 