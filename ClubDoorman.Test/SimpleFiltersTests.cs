namespace ClubDoorman.Test;

public class Tests
{
    [TestCase(">—Ö—Ä–æ–º", false, TestName = "4ch quote")]
    [TestCase("–ø—Ä–∏–≤–µ—Ç", false, TestName = "CyrillicWord_NoLookAlikes")]
    [TestCase("–ø—Ä–∏–≤–µ7", false, TestName = "CyrillicWord_WithDigit")]
    [TestCase("–≤–∞—Å3–∫", false, TestName = "CyrillicWord_WithMixedLookAlikes")]
    [TestCase("–º–∏—Äu", true, TestName = "MostlyCyrillicWord_WithLookAlikes")]
    [TestCase("–ü—Äu–≤–µ—Ç!", true, TestName = "MostlyCyrillicWord_WithLookAlikes2")]
    [TestCase("priv–µ—Ç", false, TestName = "PartiallyCyrillicWord_WithLookAlikes")]
    [TestCase("hello", false, TestName = "PurelyNonCyrillicWord")]
    [TestCase("", false, TestName = "EmptyString")]
    [TestCase("–¥", false, TestName = "SingleCyrillicCharacter")]
    [TestCase("a", false, TestName = "SingleNonCyrillicCharacter")]
    [TestCase("–ü—Ä–∏–í–µ—Ç!", false, TestName = "CyrillicWord_WithPunctuation")]
    [TestCase("–ò—ây –ª—é–¥e–π –≤ –∫–æ–ºa–Ω–¥—É, –ø—Äu—è—Ç–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æk, –ºu–Ωu–º—É–º –∑–∞—Çp–∞—Ç –ø–æ –≤–µ—Ä–º–µ–Ωu, –ø–æ–¥p–æ–±–Ω–æ—Å—Çu –≤ –ªu—á–∫—É", true, TestName = "BigSentence")]
    [TestCase("–ò—ây–ª—é–¥e–πŒ±œÄœå", true, TestName = "Greek")]
    [TestCase("—ç—Ç–æ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –≤ –Ω—ë–º –µ—Å—Ç—å", false, TestName = "Cyrillic Small Letter Io")]
    [TestCase("–ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ –≤—Å√´ –∏ —É—Å—Ç—Ä–æ–µ–Ω–æ.", false, TestName = "Weird Letter Io")]
    [TestCase("—Ö–µ–π", false, TestName = "IKratkoe")]
    [TestCase("–∞–¥–∫–∞–∑ –Ω–∞ –ø—ã—Ç–∞–Ω–Ω–µ —Ö—Ç–æ –≤—ã –∑ –≥—ç—Ç–∞–π –∫–Ω—ñ–≥—ñ", false, TestName = "Belarus")]
    [TestCase("–Ω–∞—Ç–æ–º—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –∫–æ–¥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤", false, TestName = "Ukrainian")]
    [TestCase("–í–µ–ª–∏–∫–æ –¢—ä—Ä–Ω–æ–≤–æ, –ó–µ–ª–µ–Ω–æ –¥—ä—Ä–≤–æ", false, TestName = "Bulgarian")]
    [TestCase("–î–æ—Ä—õ–æ–ª, –â–µ–∫–∞—Ä, –ä–µ–≥–∞", false, TestName = "Serbian")]
    [TestCase("–Ω–∞—ò–º–∞—ö–µ, –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–æ, —Ç–µ—Ä–∏—Ç–æ—Ä–∏—ò–∏, —Å—Ä–±–∏—ò–µ, –∫—Ä–∏—Ç–µ—Ä–∏—ò—É–º", false, TestName = "Serbian2")]
    public void HasLookAlikeSymbols_Tests(string word, bool expectedResult)
    {
        var result = SimpleFilters.FindAllRussianWordsWithLookalikeSymbols(word);
        Assert.That(result.Count > 0, Is.EqualTo(expectedResult), string.Join(", ", result));
    }

    [TestCase]
    public void FormatStripped()
    {
        const string spam =
            "\u2068g\u2068o\u2068 \u2068f\u2068a\u2068\u2068\u2068\u2068\u2068\u2068\u2068s\u2068t\u2068\ud83e\udd71  F\u2068\u2068R\u2068\u2068E\u2068EC\u2068L\u2068\u2068A\u2068\u2068\u2068I\u2068\u2068M\u2068\u2068 N\u2068\u2068F\u2068\u2068\u2068T\u2068\u2068  I\u2068\u2068F \u2068\u2068\u2068AL\u2068\u2068RE\u2068\u2068A\u2068\u2068D\u2068Y 5\u2068\u20680\u2068\u20680\u2068\u20680\u2068\u2068\u2068\u2068/\u2068\u206850\u2068\u20680\u2068\u20680\u2068\u2068\u2068 \u2068yo\u2068u\u2068 ar\u2068e t\u2068\u2068o\u2068\u2068o \u2068l\u2068ate,\u2068 so\u2068r\u2068\u2068r\u2068y";
        var norm = TextProcessor.NormalizeText(spam);
        Assert.That(norm, Has.Length.LessThan(70));
    }

    [TestCase("–ø—Ä–∏–≤–µ—Ç", false, TestName = "NoEmoji")]
    [TestCase("‚ô•Ô∏è", true, TestName = "heart")]
    [TestCase("ü©∑", true, TestName = "heart2")]
    [TestCase("üíß", true, TestName = "droplet")]
    [TestCase("üíß", true, TestName = "droplet")]
    [TestCase("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üî•üî•üî•", false, TestName = "three emoji")]
    [TestCase(
        "‚úÖ–ü–æ–ª—É—á–µ–Ω–∏—é –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤ (–Ω–æ–≤—ã–µ –∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç);\r\n‚úÖ–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏;\r\n‚úÖ–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–∫–∞;\r\n‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞;\r\n‚úÖ–ü–∞—Ç–µ–Ω—Ç;\r\n‚úÖ–ß–µ–∫;\r\n‚úÖ–ú–µ–¥ –∫–Ω–∏–∂–∫–∞;\r\n‚úÖ–ú–µ–¥ –∫–∞—Ä—Ç–∞;",
        "true",
        TestName = "lots of emoji"
    )]
    public void Emoji_Tests(string word, bool expectedResult)
    {
        var result = SimpleFilters.TooManyEmojis(word);
        Assert.That(result, Is.EqualTo(expectedResult), string.Join(", ", result));
    }
}
