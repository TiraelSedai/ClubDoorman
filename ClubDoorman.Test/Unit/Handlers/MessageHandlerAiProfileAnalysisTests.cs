using ClubDoorman.Handlers;
using ClubDoorman.TestInfrastructure;
using ClubDoorman.Infrastructure;
using ClubDoorman.Models;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Services;
using NUnit.Framework;
using Moq;
using System;
using System.Threading.Tasks;
using System.Threading;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.Unit.Handlers;

[TestFixture]
[Category("unit")]
[Category("handlers")]
[Category("ai-profile-analysis")]
public class MessageHandlerAiProfileAnalysisTests
{
    private MessageHandlerTestFactory _factory = null!;
    private MessageHandler _handler = null!;

    [SetUp]
    public void Setup()
    {
        _factory = new MessageHandlerTestFactory();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–∫–æ–≤
        _factory.WithModerationServiceSetup(mock =>
        {
            mock.Setup(x => x.CheckMessageAsync(It.IsAny<Message>()))
                .ReturnsAsync(new Models.ModerationResult(Models.ModerationAction.Allow, "Test"));
            mock.Setup(x => x.CheckUserNameAsync(It.IsAny<User>()))
                .ReturnsAsync(new Models.ModerationResult(Models.ModerationAction.Allow, "Test name"));
            mock.Setup(x => x.IsUserApproved(It.IsAny<long>(), It.IsAny<long>()))
                .Returns(false);
        });
        
        _factory.WithUserManagerSetup(mock =>
        {
            mock.Setup(x => x.Approved(It.IsAny<long>(), It.IsAny<long?>()))
                .Returns(false); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –æ–¥–æ–±—Ä–µ–Ω - –Ω—É–∂–µ–Ω AI –∞–Ω–∞–ª–∏–∑
            mock.Setup(x => x.GetClubUsername(It.IsAny<long>()))
                .ReturnsAsync((string?)null);
            mock.Setup(x => x.InBanlist(It.IsAny<long>()))
                .ReturnsAsync(false);
        });
        
        _factory.WithCaptchaServiceSetup(mock =>
        {
            mock.Setup(x => x.GenerateKey(It.IsAny<long>(), It.IsAny<long>()))
                .Returns("test_key");
            mock.Setup(x => x.GetCaptchaInfo(It.IsAny<string>()))
                .Returns((Models.CaptchaInfo?)null);
        });
        
        _factory.WithBotSetup(mock =>
        {
            mock.Setup(x => x.DeleteMessage(It.IsAny<long>(), It.IsAny<int>(), It.IsAny<CancellationToken>()))
                .Returns(Task.CompletedTask);
            mock.Setup(x => x.RestrictChatMember(
                It.IsAny<long>(), 
                It.IsAny<long>(), 
                It.IsAny<ChatPermissions>(), 
                It.IsAny<DateTime?>(), 
                It.IsAny<CancellationToken>()))
                .Returns(Task.CompletedTask);
        });
        
        _factory.WithMessageServiceSetup(mock =>
        {
            mock.Setup(x => x.SendAiProfileAnalysisAsync(It.IsAny<AiProfileAnalysisData>(), It.IsAny<CancellationToken>()))
                .Returns(Task.CompletedTask);
        });
        
        _handler = _factory.CreateMessageHandler();
    }

    [Test]
    [TestCase(0.5, "–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(0.6, "–°—Ä–µ–¥–Ω–µ-–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(0.74, "–ü–æ—á—Ç–∏ —Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    public async Task PerformAiProfileAnalysis_LowProbability_NoActionsPerformed(double probability, string reason)
    {
        // Arrange
        var user = CreateTestUser();
        var chat = CreateTestChat();
        var message = CreateTestMessage("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user, chat);
        
        _factory.WithAiChecksSetup(mock =>
        {
            mock.Setup(x => x.GetAttentionBaitProbability(It.IsAny<User>(), null))
                .ReturnsAsync(new SpamPhotoBio(
                    new SpamProbability { Probability = (float)probability, Reason = reason },
                    new byte[0],
                    "Test User"
                ));
        });

        // Act
        await _handler.HandleAsync(CreateUpdate(message), CancellationToken.None);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç–æ
        _factory.BotMock.Verify(x => x.DeleteMessage(It.IsAny<long>(), It.IsAny<int>(), It.IsAny<CancellationToken>()), 
            Times.Never, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        _factory.BotMock.Verify(x => x.RestrictChatMember(
            It.IsAny<long>(), It.IsAny<long>(), It.IsAny<ChatPermissions>(), 
            It.IsAny<DateTime?>(), It.IsAny<CancellationToken>()), 
            Times.Never, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        _factory.MessageServiceMock.Verify(x => x.SendAiProfileAnalysisAsync(It.IsAny<AiProfileAnalysisData>(), It.IsAny<CancellationToken>()), 
            Times.Never, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
    }

    [Test]
    [TestCase(0.75, "–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(0.8, "–í—ã—Å–æ–∫–∞—è-—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(0.89, "–ü–æ—á—Ç–∏ –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    public async Task PerformAiProfileAnalysis_MediumProbability_OnlyReadOnlyApplied(double probability, string reason)
    {
        // Arrange
        var user = CreateTestUser();
        var chat = CreateTestChat();
        var message = CreateTestMessage("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user, chat);
        
        _factory.WithAiChecksSetup(mock =>
        {
            mock.Setup(x => x.GetAttentionBaitProbability(It.IsAny<User>(), null))
                .ReturnsAsync(new SpamPhotoBio(
                    new SpamProbability { Probability = (float)probability, Reason = reason },
                    new byte[0],
                    "Test User"
                ));
        });

        // Act
        await _handler.HandleAsync(CreateUpdate(message), CancellationToken.None);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —É–¥–∞–ª–µ–Ω–æ
        _factory.BotMock.Verify(x => x.DeleteMessage(It.IsAny<long>(), It.IsAny<int>(), It.IsAny<CancellationToken>()), 
            Times.Never, "–°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (read-only)
        _factory.BotMock.Verify(x => x.RestrictChatMember(
            It.Is<long>(chatId => chatId == chat.Id),
            It.Is<long>(userId => userId == user.Id),
            It.Is<ChatPermissions>(perms => perms.CanSendMessages == false),
            It.IsAny<DateTime?>(),
            It.IsAny<CancellationToken>()), 
            Times.Once, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        _factory.MessageServiceMock.Verify(x => x.SendAiProfileAnalysisAsync(
            It.Is<AiProfileAnalysisData>(data => 
                data.SpamProbability == probability &&
                data.Reason == reason &&
                data.AutomaticAction == "üîá Read-Only –Ω–∞ 10 –º–∏–Ω—É—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ)"),
            It.IsAny<CancellationToken>()), 
            Times.Once, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è");
    }

    [Test]
    [TestCase(0.9, "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(0.95, "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    [TestCase(1.0, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞")]
    public async Task PerformAiProfileAnalysis_HighProbability_MessageDeletedAndReadOnlyApplied(double probability, string reason)
    {
        // Arrange
        var user = CreateTestUser();
        var chat = CreateTestChat();
        var message = CreateTestMessage("–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ", user, chat);
        
        _factory.WithAiChecksSetup(mock =>
        {
            mock.Setup(x => x.GetAttentionBaitProbability(It.IsAny<User>(), null))
                .ReturnsAsync(new SpamPhotoBio(
                    new SpamProbability { Probability = (float)probability, Reason = reason },
                    new byte[100], // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
                    "Spam User"
                ));
        });

        // Act
        await _handler.HandleAsync(CreateUpdate(message), CancellationToken.None);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        _factory.BotMock.Verify(x => x.DeleteMessage(
            It.Is<long>(chatId => chatId == chat.Id),
            It.Is<int>(msgId => msgId == message.MessageId),
            It.IsAny<CancellationToken>()), 
            Times.Once, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (read-only)
        _factory.BotMock.Verify(x => x.RestrictChatMember(
            It.Is<long>(chatId => chatId == chat.Id),
            It.Is<long>(userId => userId == user.Id),
            It.Is<ChatPermissions>(perms => perms.CanSendMessages == false),
            It.IsAny<DateTime?>(),
            It.IsAny<CancellationToken>()), 
            Times.Once, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏");
            
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        _factory.MessageServiceMock.Verify(x => x.SendAiProfileAnalysisAsync(
            It.Is<AiProfileAnalysisData>(data => 
                data.SpamProbability == probability &&
                data.Reason == reason &&
                data.AutomaticAction == "üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ + üîá Read-Only –Ω–∞ 10 –º–∏–Ω—É—Ç"),
            It.IsAny<CancellationToken>()), 
            Times.Once, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è");
    }

    [Test]
    public async Task PerformAiProfileAnalysis_ExactThresholdValues_BehaviorCorrect()
    {
        // Arrange - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        var user = CreateTestUser();
        var chat = CreateTestChat();
        var message = CreateTestMessage("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", user, chat);

        // Test: —Ç–æ—á–Ω–æ 0.75 - –¥–æ–ª–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å
        _factory.WithAiChecksSetup(mock =>
        {
            mock.Setup(x => x.GetAttentionBaitProbability(It.IsAny<User>(), null))
                .ReturnsAsync(new SpamPhotoBio(
                    new SpamProbability { Probability = (float)Consts.LlmLowProbability, Reason = "–¢–æ—á–Ω–æ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" },
                    new byte[0],
                    "Test User"
                ));
        });

        // Act
        await _handler.HandleAsync(CreateUpdate(message), CancellationToken.None);

        // Assert
        _factory.BotMock.Verify(x => x.DeleteMessage(It.IsAny<long>(), It.IsAny<int>(), It.IsAny<CancellationToken>()), 
            Times.Never, "–ü—Ä–∏ —Ç–æ—á–Ω–æ LlmLowProbability —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è");
        _factory.BotMock.Verify(x => x.RestrictChatMember(It.IsAny<long>(), It.IsAny<long>(), It.IsAny<ChatPermissions>(), It.IsAny<DateTime?>(), It.IsAny<CancellationToken>()), 
            Times.Once, "–ü—Ä–∏ —Ç–æ—á–Ω–æ LlmLowProbability –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ");

        // Reset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        _factory.BotMock.Reset();
        _factory.MessageServiceMock.Reset();

        // Test: —Ç–æ—á–Ω–æ 0.9 - –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –ò –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å
        _factory.WithAiChecksSetup(mock =>
        {
            mock.Setup(x => x.GetAttentionBaitProbability(It.IsAny<User>(), null))
                .ReturnsAsync(new SpamPhotoBio(
                    new SpamProbability { Probability = (float)Consts.LlmHighProbability, Reason = "–¢–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" },
                    new byte[0],
                    "Test User"
                ));
        });

        // Act
        await _handler.HandleAsync(CreateUpdate(message), CancellationToken.None);

        // Assert
        _factory.BotMock.Verify(x => x.DeleteMessage(It.IsAny<long>(), It.IsAny<int>(), It.IsAny<CancellationToken>()), 
            Times.Once, "–ü—Ä–∏ —Ç–æ—á–Ω–æ LlmHighProbability —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è");
        _factory.BotMock.Verify(x => x.RestrictChatMember(It.IsAny<long>(), It.IsAny<long>(), It.IsAny<ChatPermissions>(), It.IsAny<DateTime?>(), It.IsAny<CancellationToken>()), 
            Times.Once, "–ü—Ä–∏ —Ç–æ—á–Ω–æ LlmHighProbability –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ");
    }

    #region Helper Methods

    private static User CreateTestUser(long id = 12345)
    {
        return new User
        {
            Id = id,
            FirstName = "Test",
            LastName = "User",
            Username = "testuser"
        };
    }

    private static Chat CreateTestChat(long id = -100123456789)
    {
        return new Chat
        {
            Id = id,
            Type = ChatType.Group,
            Title = "Test Chat"
        };
    }

    private static Message CreateTestMessage(string text, User user, Chat chat)
    {
        return new Message
        {
            Date = DateTime.UtcNow,
            Chat = chat,
            From = user,
            Text = text
        };
    }

    private static Update CreateUpdate(Message message)
    {
        return new Update
        {
            Id = 1,
            Message = message
        };
    }

    #endregion
} 