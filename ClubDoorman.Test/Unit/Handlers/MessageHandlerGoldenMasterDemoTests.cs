using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ClubDoorman.Handlers;
using ClubDoorman.Test.TestKit;
using ClubDoorman.TestInfrastructure;
using NUnit.Framework;
using Newtonsoft.Json;

namespace ClubDoorman.Test.Unit.Handlers;

/// <summary>
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ Golden Master —Ç–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–∞–Ω–æ–≤
/// –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Verify.NUnit
/// <tags>golden-master, demo, ban-logic, concept</tags>
/// </summary>
[TestFixture]
[Category(TestCategories.Unit)]
[Category(TestCategories.Critical)]
[Category(TestCategories.GoldenMaster)]
public class MessageHandlerGoldenMasterDemoTests
{
    private MessageHandler _messageHandler;
    private MessageHandlerTestFactory _factory;
    
    [SetUp]
    public void Setup()
    {
        // –°–æ–∑–¥–∞–µ–º MessageHandler —Å Golden Master –º–æ–∫–∞–º–∏
        _factory = TK.CreateMessageHandlerFactory()
            .SetupGoldenMasterMocks();
            
        _messageHandler = _factory.CreateMessageHandler();
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Golden Master —Ç–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –±–µ–∑ Verify.NUnit
    /// </summary>
    [Test]
    public async Task BanUserForLongName_MultipleScenarios_Demo()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å —Å–∏–¥–∞–º–∏
        var scenarios = BanScenarioFactory.CreateScenarioSet(count: 10, baseSeed: 42);
        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.BanUserForLongName(
                    scenario.Message, 
                    scenario.User, 
                    scenario.Reason, 
                    scenario.BanDuration, 
                    CancellationToken.None);

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = scenario.Chat.Type != Telegram.Bot.Types.Enums.ChatType.Private,
                    ShouldCallDeleteMessage = scenario.Message != null,
                    ShouldCallForwardToLogWithNotification = scenario.Message != null,
                    ShouldCallSendLogNotification = scenario.Message == null,
                    BanType = scenario.BanDuration.HasValue 
                        ? $"–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ {scenario.BanDuration.Value.TotalMinutes} –º–∏–Ω—É—Ç" 
                        : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = scenario.Reason,
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        Assert.That(results.Count, Is.EqualTo(10), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 10 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤");
        
        var successfulResults = results.Where(r => !r.HasException).ToList();
        Assert.That(successfulResults.Count, Is.GreaterThan(0), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π");

        // –í—ã–≤–æ–¥–∏–º JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º Golden Master —Ç–µ—Å—Ç–µ —ç—Ç–æ –±—ã–ª–æ –±—ã snapshot)
        var json = JsonConvert.SerializeObject(results, Formatting.Indented);
        Console.WriteLine($"Golden Master Demo Results:\n{json}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è
        foreach (var result in successfulResults)
        {
            if (result.Input.Chat.Type != Telegram.Bot.Types.Enums.ChatType.Private)
            {
                Assert.That(result.ShouldCallBanChatMember, Is.True, 
                    $"–î–ª—è —á–∞—Ç–∞ —Ç–∏–ø–∞ {result.Input.Chat.Type} –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è BanChatMember");
            }
            
            if (result.Input.Message != null)
            {
                Assert.That(result.ShouldCallDeleteMessage, Is.True, 
                    "–î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è DeleteMessage");
            }
        }
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    /// </summary>
    [Test]
    public async Task DifferentScenarioTypes_Demo()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        var scenarios = new List<BanScenario>
        {
            new BanScenarioBuilder(1).CreateTemporaryBanScenario(),
            new BanScenarioBuilder(2).CreatePermanentBanScenario(),
            new BanScenarioBuilder(3).CreatePrivateChatBanScenario(),
            new BanScenarioBuilder(4).CreateNullMessageBanScenario(),
            new BanScenarioBuilder(5).CreateBotBanScenario()
        };

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.BanUserForLongName(
                    scenario.Message, 
                    scenario.User, 
                    scenario.Reason, 
                    scenario.BanDuration, 
                    CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = scenario.Chat.Type != Telegram.Bot.Types.Enums.ChatType.Private,
                    ShouldCallDeleteMessage = scenario.Message != null,
                    ShouldCallForwardToLogWithNotification = scenario.Message != null,
                    ShouldCallSendLogNotification = scenario.Message == null,
                    BanType = scenario.BanDuration.HasValue 
                        ? $"–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ {scenario.BanDuration.Value.TotalMinutes} –º–∏–Ω—É—Ç" 
                        : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = scenario.Reason,
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        Assert.That(results.Count, Is.EqualTo(5), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 5 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤");

        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
        var temporaryBan = results.First(r => r.Input.ScenarioType == "TemporaryBan");
        Assert.That(temporaryBan.BanType, Does.Contain("–ê–≤—Ç–æ–±–∞–Ω"), "–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ê–≤—Ç–æ–±–∞–Ω'");

        // –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω
        var permanentBan = results.First(r => r.Input.ScenarioType == "PermanentBan");
        Assert.That(permanentBan.BanType, Does.Contain("üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω"), "–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏");

        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        var privateChat = results.First(r => r.Input.ScenarioType == "PrivateChatBan");
        Assert.That(privateChat.ShouldCallBanChatMember, Is.False, "–í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è BanChatMember");

        // –ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        var nullMessage = results.First(r => r.Input.ScenarioType == "NullMessageBan");
        Assert.That(nullMessage.ShouldCallDeleteMessage, Is.False, "–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è DeleteMessage");

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        var json = JsonConvert.SerializeObject(results, Formatting.Indented);
        Console.WriteLine($"Different Scenario Types Demo:\n{json}");
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –±–∞–Ω–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    /// </summary>
    [Test]
    public async Task BanBlacklistedUser_Demo()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        var scenarios = Enumerable.Range(0, 5).Select(i =>
        {
            var builder = new BanScenarioBuilder(100 + i);
            var scenario = builder.CreateTemporaryBanScenario();
            scenario.ScenarioType = "BlacklistedUser";
            scenario.Reason = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ #{i + 1}";
            return scenario;
        }).ToList();

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.BanBlacklistedUser(scenario.Message!, scenario.User, CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = true,
                    ShouldCallDeleteMessage = true,
                    ShouldCallForwardToLogWithNotification = true,
                    BanType = "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        Assert.That(results.Count, Is.EqualTo(5), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 5 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞");

        foreach (var result in results.Where(r => !r.HasException))
        {
            Assert.That(result.ShouldCallBanChatMember, Is.True, "–î–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è BanChatMember");
            Assert.That(result.ShouldCallDeleteMessage, Is.True, "–î–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è DeleteMessage");
            Assert.That(result.ShouldCallForwardToLogWithNotification, Is.True, "–î–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
            Assert.That(result.BanType, Is.EqualTo("üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω"), "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–º –±–∞–Ω–æ–º");
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        var json = JsonConvert.SerializeObject(results, Formatting.Indented);
        Console.WriteLine($"Blacklisted User Demo:\n{json}");
    }

    /// <summary>
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–∞
    /// </summary>
    [Test]
    public async Task AutoBanChannel_Demo()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        var scenarios = Enumerable.Range(0, 3).Select(i =>
        {
            var builder = new BanScenarioBuilder(200 + i);
            var scenario = builder.CreateBotBanScenario();
            scenario.ScenarioType = "AutoBanChannel";
            scenario.Reason = $"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∫–∞–Ω–∞–ª–∞ #{i + 1}";
            return scenario;
        }).ToList();

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.AutoBanChannel(scenario.Message!, CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = true,
                    ShouldCallDeleteMessage = true,
                    ShouldCallForwardToLogWithNotification = true,
                    BanType = "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∫–∞–Ω–∞–ª–∞",
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        Assert.That(results.Count, Is.EqualTo(3), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 3 —Å—Ü–µ–Ω–∞—Ä–∏—è –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤");

        foreach (var result in results.Where(r => !r.HasException))
        {
            Assert.That(result.ShouldCallBanChatMember, Is.True, "–î–ª—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è BanChatMember");
            Assert.That(result.ShouldCallDeleteMessage, Is.True, "–î–ª—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è DeleteMessage");
            Assert.That(result.ShouldCallForwardToLogWithNotification, Is.True, "–î–ª—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
            Assert.That(result.BanType, Is.EqualTo("üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω"), "–ë–∞–Ω –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–º");
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        var json = JsonConvert.SerializeObject(results, Formatting.Indented);
        Console.WriteLine($"Auto Ban Channel Demo:\n{json}");
    }
} 