using System;
using System.Threading;
using System.Threading.Tasks;
using ClubDoorman.Handlers;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Services;
using ClubDoorman.Test.TestKit;
using ClubDoorman.TestInfrastructure;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.Unit.Handlers;

/// <summary>
/// –¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫, –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö Mutation Testing
/// </summary>
[TestFixture]
[Category(TestCategories.Unit)]
[Category(TestCategories.Critical)]
public class MessageHandlerMutationCoverageTests
{
    private MessageHandler _messageHandler;
    private Mock<ITelegramBotClientWrapper> _botMock;
    private Mock<IMessageService> _messageServiceMock;
    private Mock<ILogger<MessageHandler>> _loggerMock;
    private MessageHandlerTestFactory _factory;
    
    [SetUp]
    public void Setup()
    {
        // –°–æ–∑–¥–∞–µ–º MessageHandler —Å –º–æ–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É TestKit
        _factory = TK.CreateMessageHandlerFactory()
            .WithBotSetup(mock => _botMock = mock)
            .WithMessageServiceSetup(mock => _messageServiceMock = mock)
            .WithLoggerSetup(mock => _loggerMock = mock);
            
        _messageHandler = _factory.CreateMessageHandler();
    }

    /// <summary>
    /// –¢–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫ 856-857: Exception handling –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
    /// –ú—É—Ç–∞–Ω—Ç: Boolean mutation –Ω–µ –ø–æ–∫—Ä—ã—Ç - —Å—Ç—Ä–æ–∫–∞ 857: return false
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenChatTypeCheckThrowsException_ShouldReturnFalseAndLogWarning()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var chat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Supergroup)
            .Build();
        var message = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(chat)
            .Build();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —á–∞—Ç–∞ –¥–ª—è –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∏–ø–∞
        var problematicChat = new Mock<Chat>();
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–≤–æ–π—Å—Ç–≤—É Type
        problematicChat.Setup(x => x.Type).Throws(new InvalidOperationException("Chat type access error"));
        problematicChat.Setup(x => x.Id).Returns(chat.Id);
        
        var messageWithProblematicChat = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(problematicChat.Object)
            .Build();

        // Act & Assert
        // –í—ã–∑—ã–≤–∞–µ–º internal –º–µ—Ç–æ–¥ - –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await _messageHandler.Invoking(h => 
                h.BanUserForLongName(messageWithProblematicChat, user, "Test ban", 
                    TimeSpan.FromMinutes(10), CancellationToken.None))
            .Should().NotThrowAsync();

        // Verify: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞ 856-857)
        _loggerMock.Verify(
            x => x.Log(
                LogLevel.Warning,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception, string>>()),
            Times.Once,
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞");
    }

    /// <summary>
    /// –¢–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫–∏ 870: LogWarning –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
    /// –ú—É—Ç–∞–Ω—Ç: Statement mutation - —Å—Ç—Ä–æ–∫–∞ 870 –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–≤–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenPrivateChat_ShouldLogWarningAndSendAdminNotification()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var privateChat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Private)
            .Build();
        var message = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(privateChat)
            .Build();

        // Act
        await _messageHandler.BanUserForLongName(message, user, "Long name ban", TimeSpan.FromMinutes(10), CancellationToken.None);

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ 870)
        _loggerMock.Verify(
            x => x.Log(
                LogLevel.Warning,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ") && v.ToString().Contains("–æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception, string>>()),
            Times.Once,
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ");

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        _messageServiceMock.Verify(
            x => x.SendAdminNotificationAsync(
                AdminNotificationType.PrivateChatBanAttempt,
                It.IsAny<ErrorNotificationData>(),
                It.IsAny<CancellationToken>()),
            Times.Once,
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–ø—ã—Ç–∫–µ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ");

        // Assert: –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ –±–∞–Ω–∞ 
        _botMock.Verify(
            x => x.BanChatMember(It.IsAny<long>(), It.IsAny<long>(), It.IsAny<DateTime?>(), true, It.IsAny<CancellationToken>()),
            Times.Never,
            "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–æ–≤–∞ BanChatMember –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞");
    }

    /// <summary>
    /// –¢–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫–∏ 893: –£—Å–ª–æ–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–Ω–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π vs –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π)
    /// –ú—É—Ç–∞–Ω—Ç: Conditional (true) mutation - —Å—Ç—Ä–æ–∫–∞ 893 –º–æ–∂–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenTemporaryBan_ShouldUseCorrectBanTypeMessage()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var chat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Supergroup)
            .Build();
        var message = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(chat)
            .Build();

        // Act: –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏)
        await _messageHandler.BanUserForLongName(message, user, "Long name ban", TimeSpan.FromMinutes(10), CancellationToken.None);

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –±–∞–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ (—Å—Ç—Ä–æ–∫–∞ 893)
        _messageServiceMock.Verify(
            x => x.ForwardToLogWithNotificationAsync(
                It.IsAny<Message>(),
                LogNotificationType.BanForLongName,
                It.Is<AutoBanNotificationData>(data => data.BanType == "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç"),
                It.IsAny<CancellationToken>()),
            Times.Once,
            "–î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∏–ø '–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç'");
    }

    /// <summary>
    /// –¢–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫–∏ 893: –£—Å–ª–æ–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–Ω–∞ (–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π)
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenPermanentBan_ShouldUseCorrectBanTypeMessage()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var chat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Supergroup)
            .Build();
        var message = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(chat)
            .Build();

        // Act: –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏)
        await _messageHandler.BanUserForLongName(message, user, "Long name ban", null, CancellationToken.None);

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –±–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ (—Å—Ç—Ä–æ–∫–∞ 893)
        _messageServiceMock.Verify(
            x => x.ForwardToLogWithNotificationAsync(
                It.IsAny<Message>(),
                LogNotificationType.BanForLongName,
                It.Is<AutoBanNotificationData>(data => data.BanType == "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω"),
                It.IsAny<CancellationToken>()),
            Times.Once,
            "–î–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –±–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∏–ø 'üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω'");
    }

    /// <summary>
    /// –¢–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫–∏ 903: SendLogNotificationAsync –∫–æ–≥–¥–∞ userJoinMessage == null
    /// –ú—É—Ç–∞–Ω—Ç: Statement mutation - —Å—Ç—Ä–æ–∫–∞ 903 –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–≤–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenUserJoinMessageIsNull_ShouldSendLogNotification()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var chat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Supergroup)
            .Build();

        // Act: –ü–µ—Ä–µ–¥–∞–µ–º null –≤ –∫–∞—á–µ—Å—Ç–≤–µ userJoinMessage
        await _messageHandler.BanUserForLongName(null, user, "Long name ban", TimeSpan.FromMinutes(10), CancellationToken.None);

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω SendLogNotificationAsync (—Å—Ç—Ä–æ–∫–∞ 903)
        _messageServiceMock.Verify(
            x => x.SendLogNotificationAsync(
                LogNotificationType.BanForLongName,
                It.Is<AutoBanNotificationData>(data => 
                    data.User == user && 
                    data.Chat == chat && 
                    data.BanType == "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç"),
                It.IsAny<CancellationToken>()),
            Times.Once,
            "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω SendLogNotificationAsync –∫–æ–≥–¥–∞ userJoinMessage == null");

        // Assert: –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω ForwardToLogWithNotificationAsync
        _messageServiceMock.Verify(
            x => x.ForwardToLogWithNotificationAsync(
                It.IsAny<Message>(),
                It.IsAny<LogNotificationType>(),
                It.IsAny<AutoBanNotificationData>(),
                It.IsAny<CancellationToken>()),
            Times.Never,
            "–ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω ForwardToLogWithNotificationAsync –∫–æ–≥–¥–∞ userJoinMessage == null");
    }

    /// <summary>
    /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    [Test]
    [Category(TestCategories.MutationCoverage)]
    public async Task BanUserForLongName_WhenUserJoinMessageExists_ShouldDeleteMessage()
    {
        // Arrange
        var user = TestKitBuilders.CreateUser()
            .WithFirstName("VeryLongNameThatExceeds64CharactersAndTriggersLongNameBanLogic")
            .Build();
        var chat = TestKitBuilders.CreateChat()
            .WithType(ChatType.Supergroup)
            .Build();
        var message = TestKitBuilders.CreateMessage()
            .FromUser(user)
            .InChat(chat)
            .WithMessageId(12345)
            .Build();

        // Act
        await _messageHandler.BanUserForLongName(message, user, "Long name ban", TimeSpan.FromMinutes(10), CancellationToken.None);

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        _botMock.Verify(
            x => x.DeleteMessage(chat.Id, 12345, It.IsAny<CancellationToken>()),
            Times.Once,
            "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –±–∞–Ω–µ");
    }
}