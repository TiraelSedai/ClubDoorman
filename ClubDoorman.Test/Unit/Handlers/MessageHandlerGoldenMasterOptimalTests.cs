using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ClubDoorman.Handlers;
using ClubDoorman.Test.TestKit;
using ClubDoorman.TestInfrastructure;
using NUnit.Framework;
using Verify.NUnit;

namespace ClubDoorman.Test.Unit.Handlers;

/// <summary>
/// –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ Golden Master —Ç–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–∞–Ω–æ–≤
/// –ò—Å–ø–æ–ª—å–∑—É—é—Ç –±–∏–ª–¥–µ—Ä—ã —Å —Å–∏–¥–∞–º–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
/// <tags>golden-master, optimal-tests, ban-logic, snapshot-testing</tags>
/// </summary>
[TestFixture]
[Category(TestCategories.Unit)]
[Category(TestCategories.Critical)]
[Category(TestCategories.GoldenMaster)]
public class MessageHandlerGoldenMasterOptimalTests
{
    private MessageHandler _messageHandler;
    private MessageHandlerTestFactory _factory;
    
    [SetUp]
    public void Setup()
    {
        // –°–æ–∑–¥–∞–µ–º MessageHandler —Å Golden Master –º–æ–∫–∞–º–∏
        _factory = TK.CreateMessageHandlerFactory()
            .SetupGoldenMasterMocks();
            
        _messageHandler = _factory.CreateMessageHandler();
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –±–∞–Ω–∞
    /// –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è 20 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    /// </summary>
    [Test]
    public async Task BanUserForLongName_MultipleScenarios_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å —Å–∏–¥–∞–º–∏
        var scenarios = BanScenarioFactory.CreateScenarioSet(count: 20, baseSeed: 42);
        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.BanUserForLongName(
                    scenario.Message, 
                    scenario.User, 
                    scenario.Reason, 
                    scenario.BanDuration, 
                    CancellationToken.None);

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = scenario.Chat.Type != Telegram.Bot.Types.Enums.ChatType.Private,
                    ShouldCallDeleteMessage = scenario.Message != null,
                    ShouldCallForwardToLogWithNotification = scenario.Message != null,
                    ShouldCallSendLogNotification = scenario.Message == null,
                    BanType = scenario.BanDuration.HasValue 
                        ? $"–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ {scenario.BanDuration.Value.TotalMinutes} –º–∏–Ω—É—Ç" 
                        : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = scenario.Reason,
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: Golden Master snapshot –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        await global::ClubDoorman.Test.TestKit.TestKitGoldenMaster.CreateGoldenMasterSnapshot(
            "BanUserForLongName_MultipleScenarios_GoldenMaster",
            results,
            "MultipleScenarios_BanUserForLongName");
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç —Å JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    /// </summary>
    [Test]
    public async Task BanUserForLongName_JsonSnapshot_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        var scenarios = new List<BanScenario>
        {
            new BanScenarioBuilder(1).CreateTemporaryBanScenario(),
            new BanScenarioBuilder(2).CreatePermanentBanScenario(),
            new BanScenarioBuilder(3).CreatePrivateChatBanScenario(),
            new BanScenarioBuilder(4).CreateNullMessageBanScenario(),
            new BanScenarioBuilder(5).CreateBotBanScenario()
        };

        var testData = new
        {
            TestName = "BanUserForLongName_JsonSnapshot_GoldenMaster",
            Scenarios = scenarios.Select(s => new
            {
                s.Seed,
                s.ScenarioType,
                User = new { s.User.Id, s.User.FirstName, s.User.Username, s.User.IsBot },
                Chat = new { s.Chat.Id, s.Chat.Type, s.Chat.Title },
                Message = s.Message != null ? new { s.Message.MessageId, s.Message.Text } : null,
                s.BanDuration,
                s.Reason
            }).ToList()
        };

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        foreach (var scenario in scenarios)
        {
            await _messageHandler.BanUserForLongName(
                scenario.Message, 
                scenario.User, 
                scenario.Reason, 
                scenario.BanDuration, 
                CancellationToken.None);
        }

        // Assert: JSON snapshot –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await TestKitGoldenMaster.CreateGoldenMasterJsonSnapshot(
            "BanUserForLongName_JsonSnapshot_GoldenMaster",
            testData,
            "JsonSnapshot_BanUserForLongName");
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    /// –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–∞–Ω–∞
    /// </summary>
    [Test]
    public async Task BanUserForLongName_ExceptionScenarios_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        var scenarios = BanScenarioFactory.CreateExceptionScenarioSet(count: 5, baseSeed: 100);
        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        foreach (var scenario in scenarios)
        {
            // –°–æ–∑–¥–∞–µ–º MessageHandler —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            var factoryWithException = _factory.SetupExceptionScenario(
                new InvalidOperationException($"Bot API error during ban for scenario {scenario.Seed}"));
            var messageHandlerWithException = factoryWithException.CreateMessageHandler();

            try
            {
                await messageHandlerWithException.BanUserForLongName(
                    scenario.Message, 
                    scenario.User, 
                    scenario.Reason, 
                    scenario.BanDuration, 
                    CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: Golden Master snapshot –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        await TestKitGoldenMaster.CreateGoldenMasterSnapshot(
            "BanUserForLongName_ExceptionScenarios_GoldenMaster",
            results,
            "ExceptionScenarios_BanUserForLongName");
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç –¥–ª—è –±–∞–Ω–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    /// </summary>
    [Test]
    public async Task BanBlacklistedUser_MultipleScenarios_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        var scenarios = Enumerable.Range(0, 10).Select(i =>
        {
            var builder = new BanScenarioBuilder(200 + i);
            var scenario = builder.CreateTemporaryBanScenario();
            scenario.ScenarioType = "BlacklistedUser";
            scenario.Reason = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ #{i + 1}";
            return scenario;
        }).ToList();

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.BanBlacklistedUser(scenario.Message!, scenario.User, CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = true,
                    ShouldCallDeleteMessage = true,
                    ShouldCallForwardToLogWithNotification = true,
                    BanType = "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: Golden Master snapshot –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        await TestKitGoldenMaster.CreateGoldenMasterSnapshot(
            "BanBlacklistedUser_MultipleScenarios_GoldenMaster",
            results,
            "MultipleScenarios_BanBlacklistedUser");
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–∞
    /// </summary>
    [Test]
    public async Task AutoBanChannel_MultipleScenarios_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        var scenarios = Enumerable.Range(0, 8).Select(i =>
        {
            var builder = new BanScenarioBuilder(300 + i);
            var scenario = builder.CreateBotBanScenario();
            scenario.ScenarioType = "AutoBanChannel";
            scenario.Reason = $"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∫–∞–Ω–∞–ª–∞ #{i + 1}";
            return scenario;
        }).ToList();

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        foreach (var scenario in scenarios)
        {
            try
            {
                await _messageHandler.AutoBanChannel(scenario.Message!, CancellationToken.None);

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = true,
                    ShouldCallDeleteMessage = true,
                    ShouldCallForwardToLogWithNotification = true,
                    BanType = "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∫–∞–Ω–∞–ª–∞",
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: Golden Master snapshot –¥–ª—è –±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        await TestKitGoldenMaster.CreateGoldenMasterSnapshot(
            "AutoBanChannel_MultipleScenarios_GoldenMaster",
            results,
            "MultipleScenarios_AutoBanChannel");
    }

    /// <summary>
    /// Golden Master —Ç–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –±–∞–Ω–æ–≤ –≤ –æ–¥–Ω–æ–º snapshot
    /// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –±–∞–Ω–∞
    /// </summary>
    [Test]
    public async Task AllBanTypes_Comprehensive_GoldenMaster()
    {
        // Arrange: –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        var allScenarios = new List<BanScenario>();

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–Ω—ã
        allScenarios.AddRange(Enumerable.Range(0, 5).Select(i => 
        {
            var builder = new BanScenarioBuilder(400 + i);
            return builder.CreateTemporaryBanScenario();
        }));

        // –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ –±–∞–Ω—ã
        allScenarios.AddRange(Enumerable.Range(0, 5).Select(i => 
        {
            var builder = new BanScenarioBuilder(500 + i);
            return builder.CreatePermanentBanScenario();
        }));

        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã
        allScenarios.AddRange(Enumerable.Range(0, 3).Select(i => 
        {
            var builder = new BanScenarioBuilder(600 + i);
            return builder.CreatePrivateChatBanScenario();
        }));

        // –ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        allScenarios.AddRange(Enumerable.Range(0, 3).Select(i => 
        {
            var builder = new BanScenarioBuilder(700 + i);
            return builder.CreateNullMessageBanScenario();
        }));

        // –ë–æ—Ç—ã
        allScenarios.AddRange(Enumerable.Range(0, 4).Select(i => 
        {
            var builder = new BanScenarioBuilder(800 + i);
            return builder.CreateBotBanScenario();
        }));

        var results = new List<BanScenarioResult>();

        // Act: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        foreach (var scenario in allScenarios)
        {
            try
            {
                switch (scenario.ScenarioType)
                {
                    case "BotBan":
                        await _messageHandler.AutoBanChannel(scenario.Message!, CancellationToken.None);
                        break;
                    default:
                        await _messageHandler.BanUserForLongName(
                            scenario.Message, 
                            scenario.User, 
                            scenario.Reason, 
                            scenario.BanDuration, 
                            CancellationToken.None);
                        break;
                }

                var result = new BanScenarioResult
                {
                    Input = scenario,
                    ShouldCallBanChatMember = scenario.Chat.Type != Telegram.Bot.Types.Enums.ChatType.Private,
                    ShouldCallDeleteMessage = scenario.Message != null,
                    ShouldCallForwardToLogWithNotification = scenario.Message != null,
                    ShouldCallSendLogNotification = scenario.Message == null,
                    BanType = scenario.BanDuration.HasValue 
                        ? $"–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ {scenario.BanDuration.Value.TotalMinutes} –º–∏–Ω—É—Ç" 
                        : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω",
                    ExpectedReason = scenario.Reason,
                    HasException = false
                };

                results.Add(result);
            }
            catch (Exception ex)
            {
                var result = new BanScenarioResult
                {
                    Input = scenario,
                    HasException = true,
                    ExceptionType = ex.GetType().Name,
                    ExceptionMessage = ex.Message
                };

                results.Add(result);
            }
        }

        // Assert: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π Golden Master snapshot
        await TestKitGoldenMaster.CreateGoldenMasterSnapshot(
            "AllBanTypes_Comprehensive_GoldenMaster",
            results,
            "Comprehensive_AllBanTypes");
    }
} 