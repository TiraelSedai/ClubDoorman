using ClubDoorman.Services;
using ClubDoorman.TestInfrastructure;
using ClubDoorman.Test.TestInfrastructure;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;
using NUnit.Framework;
using System.Reflection;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using ClubDoorman.Models;
using Telegram.Bot;

namespace ClubDoorman.Test.Integration;

/// <summary>
/// E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FluentAssertions –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–æ–≤
/// </summary>
[TestFixture]
[Category("integration")]
[Category("e2e")]
[Category("infrastructure")]
public class InfrastructureE2ETests : TestBase
{
    private FakeTelegramClient _fakeBot = null!;
    private ILoggerFactory _loggerFactory = null!;
    private ILogger<ModerationService> _moderationLogger = null!;
    private ModerationService _moderationService = null!;

    [SetUp]
    public void Setup()
    {
        // –°–æ–∑–¥–∞–µ–º FakeTelegramClient
        _fakeBot = new FakeTelegramClient();
        
        // –°–æ–∑–¥–∞–µ–º logger factory —Å console provider –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤
        _loggerFactory = LoggerFactory.Create(builder => 
        {
            builder.AddConsole();
            builder.SetMinimumLevel(LogLevel.Debug);
        });
        
        _moderationLogger = _loggerFactory.CreateLogger<ModerationService>();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–∫ ITelegramBotClient –¥–ª—è ModerationService
        var mockBotClient = CreateMock<ITelegramBotClient>();
        
        // –°–æ–∑–¥–∞–µ–º ModerationService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        var spamLogger = _loggerFactory.CreateLogger<SpamHamClassifier>();
        var mimicryLogger = _loggerFactory.CreateLogger<MimicryClassifier>();
        var suspiciousLogger = _loggerFactory.CreateLogger<SuspiciousUsersStorage>();
        var aiLogger = _loggerFactory.CreateLogger<AiChecks>();
        
        var spamClassifier = new SpamHamClassifier(spamLogger);
        var mimicryClassifier = new MimicryClassifier(mimicryLogger);
        var badMessageManager = new BadMessageManager();
        var suspiciousStorage = new SuspiciousUsersStorage(suspiciousLogger);
        var aiChecks = new AiChecks(_fakeBot, aiLogger, AppConfigTestFactory.CreateDefault());
        
        var mockUserManager = CreateMock<IUserManager>();
        var mockMessageService = CreateMock<IMessageService>();
        
        _moderationService = new ModerationService(
            spamClassifier,
            mimicryClassifier,
            badMessageManager,
            mockUserManager.Object,
            aiChecks,
            suspiciousStorage,
            mockBotClient.Object,
            mockMessageService.Object,
            _moderationLogger
        );
    }

    [TearDown]
    public void TearDown()
    {
        _loggerFactory?.Dispose();
    }

    [Test]
    public async Task E2E_ModerationFlow_ShouldProcessMessageWithCorrectOrder()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        var validMessage = TestData.Messages.Valid();
        
        // Act
        var result = await _moderationService.CheckMessageAsync(validMessage);
        
        // Assert —Å FluentAssertions
        result.Should().NotBeNull();
        result.Action.Should().Be(ModerationAction.Allow);
        result.Reason.Should().Contain("–ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
        
        // ModerationService –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ FakeTelegramClient –Ω–∞–ø—Ä—è–º—É—é
        // –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫ ITelegramBotClient, –ø–æ—ç—Ç–æ–º—É SentMessages –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º
        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤
    }

    [Test]
    public async Task E2E_FakeTelegramClient_ShouldTrackSentMessages()
    {
        // Arrange
        var message = TestData.Messages.Valid();
        var chatId = message.Chat.Id;
        
        // Act - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FakeTelegramClient
        await _fakeBot.SendMessageAsync(chatId, "Test message");
        
        // Assert —Å FluentAssertions
        _fakeBot.SentMessages.Should().HaveCount(1);
        _fakeBot.SentMessages.First().Text.Should().Be("Test message");
        _fakeBot.SentMessages.First().ChatId.Should().Be(chatId);
    }

    [Test]
    public async Task E2E_FakeTelegramClient_ShouldTrackCallbackQueries()
    {
        // Arrange
        var callbackQuery = TestData.CallbackQueries.Valid();
        
        // Act - –¥–æ–±–∞–≤–ª—è–µ–º callback query –≤—Ä—É—á–Ω—É—é (–º–µ—Ç–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        _fakeBot.CallbackQueries.Add(callbackQuery);
        
        // Assert —Å FluentAssertions
        _fakeBot.CallbackQueries.Should().HaveCount(1);
        _fakeBot.CallbackQueries.First().Should().Be(callbackQuery);
    }

    [Test]
    public async Task E2E_ModerationService_ShouldHandleSpamMessage()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —è–≤–Ω—ã–π —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        var spamMessage = TestData.Messages.Valid();
        spamMessage.Text = "üî•üî•üî• –°–†–û–ß–ù–û! –ó–ê–†–ê–ë–û–¢–ê–ô 1000000$ –ó–ê –î–ï–ù–¨! üî•üî•üî• –ü–ï–†–ï–•–û–î–ò –ü–û –°–°–´–õ–ö–ï: https://scam.com";
        
        // Act
        var result = await _moderationService.CheckMessageAsync(spamMessage);
        
        // Assert —Å FluentAssertions
        result.Should().NotBeNull();
        // ML –º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —Å–ø–∞–º, –Ω–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        result.Action.Should().BeOneOf(ModerationAction.Allow, ModerationAction.Delete);
        result.Reason.Should().NotBeNullOrEmpty();
    }

    [Test]
    public async Task E2E_TestDataFactory_ShouldGenerateValidData()
    {
        // Arrange & Act
        var user = TestData.Users.Valid();
        var message = TestData.Messages.Valid();
        var chat = TestData.Chats.Group();
        
        // Assert —Å FluentAssertions
        user.Should().NotBeNull();
        user.Id.Should().BeGreaterThan(0);
        user.FirstName.Should().NotBeNullOrEmpty();
        
        message.Should().NotBeNull();
        message.Text.Should().NotBeNullOrEmpty();
        message.From.Should().NotBeNull();
        
        chat.Should().NotBeNull();
        chat.Id.Should().BeLessThan(0); // –ì—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID
        chat.Type.Should().Be(ChatType.Group);
    }

    [Test]
    public async Task E2E_ModerationResult_ShouldHaveCorrectProperties()
    {
        // Arrange & Act
        var allowResult = TestData.ModerationResults.Allow();
        var deleteResult = TestData.ModerationResults.Delete();
        var banResult = TestData.ModerationResults.Ban();
        
        // Assert —Å FluentAssertions
        allowResult.Should().NotBeNull();
        allowResult.Action.Should().Be(ModerationAction.Allow);
        allowResult.Reason.Should().NotBeNullOrEmpty();
        
        deleteResult.Should().NotBeNull();
        deleteResult.Action.Should().Be(ModerationAction.Delete);
        deleteResult.Reason.Should().NotBeNullOrEmpty();
        
        banResult.Should().NotBeNull();
        banResult.Action.Should().Be(ModerationAction.Ban);
        banResult.Reason.Should().NotBeNullOrEmpty();
    }

    [Test]
    public async Task E2E_FakeTelegramClient_ShouldSupportMessageDeletion()
    {
        // Arrange
        var message = TestData.Messages.Valid();
        var chatId = message.Chat.Id;
        var messageId = message.MessageId;
        
        // Act - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await _fakeBot.DeleteMessageAsync(chatId, messageId);
        
        // Assert —Å FluentAssertions
        _fakeBot.DeletedMessages.Should().HaveCount(1);
        _fakeBot.DeletedMessages.First().ChatId.Should().Be(chatId);
        _fakeBot.DeletedMessages.First().MessageId.Should().Be(messageId);
    }

    [Test]
    public async Task E2E_FakeTelegramClient_ShouldSupportUserBanning()
    {
        // Arrange
        var user = TestData.Users.Valid();
        var chatId = -1001234567890L; // –¢–µ—Å—Ç–æ–≤—ã–π ID –≥—Ä—É–ø–ø—ã
        
        // Act - –±–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await _fakeBot.BanChatMemberAsync(chatId, user.Id);
        
        // Assert —Å FluentAssertions
        _fakeBot.BannedUsers.Should().HaveCount(1);
        _fakeBot.BannedUsers.First().UserId.Should().Be(user.Id);
        _fakeBot.BannedUsers.First().ChatId.Should().Be(chatId);
    }

    [Test]
    public async Task E2E_ModerationService_ShouldHandleMimicryDetection()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∏–º–∏–∫—Ä–∏–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        var mimicryMessage = TestData.Messages.Valid();
        mimicryMessage.Text = "hi"; // –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–º–∏–∫—Ä–∏–∏
        
        // Act
        var result = await _moderationService.CheckMessageAsync(mimicryMessage);
        
        // Assert —Å FluentAssertions
        result.Should().NotBeNull();
        // –ú–∏–º–∏–∫—Ä–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
        result.Action.Should().Be(ModerationAction.Allow);
    }

    [Test]
    public async Task E2E_Infrastructure_ShouldSupportAsyncOperations()
    {
        // Arrange
        var tasks = new List<Task>();
        
        // Act - –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for (int i = 0; i < 5; i++)
        {
            var message = TestData.Messages.Valid();
            message.Text = $"Test message {i}";
            tasks.Add(_moderationService.CheckMessageAsync(message));
        }
        
        await Task.WhenAll(tasks);
        
        // Assert —Å FluentAssertions
        tasks.Should().HaveCount(5);
        tasks.All(t => t.IsCompletedSuccessfully).Should().BeTrue();
    }
} 