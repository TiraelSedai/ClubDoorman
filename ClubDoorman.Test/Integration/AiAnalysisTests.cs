using ClubDoorman.Services;
using ClubDoorman.TestInfrastructure;
using ClubDoorman.Test.TestInfrastructure;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using FluentAssertions;
using ClubDoorman.Models;
using ClubDoorman.Handlers;
using Moq;

namespace ClubDoorman.Test.Integration;

[TestFixture]
[Category("integration")]
[Category("e2e")]
[Category("ai-analysis")]
public class AiAnalysisTests
{
    private ILogger<AiChecks> _logger = null!;
    private ILogger<CallbackQueryHandler> _callbackLogger = null!;
    private FakeTelegramClient _fakeBot = null!;
    private AiChecks _aiChecks = null!;
    private CallbackQueryHandler _callbackHandler = null!;
    private UserManager _userManager = null!;
    private ApprovedUsersStorage _approvedUsersStorage = null!;
    private IAppConfig _appConfig = null!;

    [SetUp]
    public void Setup()
    {
        _logger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<AiChecks>();
        _callbackLogger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<CallbackQueryHandler>();
        _fakeBot = new FakeTelegramClient();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        _appConfig = AppConfigTestFactory.CreateDefault();
        _approvedUsersStorage = new ApprovedUsersStorage(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<ApprovedUsersStorage>());
        
        _aiChecks = new AiChecks(_fakeBot, _logger, _appConfig);
        _userManager = new UserManager(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<UserManager>(), _approvedUsersStorage, _appConfig);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        var captchaService = new Mock<ICaptchaService>().Object;
        var badMessageManager = new Mock<IBadMessageManager>().Object;
        var statisticsService = new Mock<IStatisticsService>().Object;
        var moderationService = new Mock<IModerationService>().Object;
        var messageService = new Mock<IMessageService>().Object;
        
        _callbackHandler = new CallbackQueryHandler(_fakeBot, captchaService, _userManager, badMessageManager, statisticsService, _aiChecks, moderationService, messageService, _callbackLogger);
    }

    [TearDown]
    public void TearDown()
    {
        _fakeBot.Reset();
    }

    [Test]
    public async Task E2E_AI_Analysis_FirstMessage_ShouldTriggerAnalysis()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        var message = new Message
        {
            From = suspiciousUser,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            Date = DateTime.UtcNow
        };

        // Act - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        var result = await _aiChecks.GetAttentionBaitProbability(suspiciousUser);

        // Assert
        result.Should().NotBeNull();
        result.SpamProbability.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        _fakeBot.SentMessages.Should().Contain(m => 
            m.ChatId == _appConfig.AdminChatId && 
            m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Own_ShouldApproveUser()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "approve_user_12345"
        };

        // Act - –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "ü•∞ —Å–≤–æ–π"
        await _callbackHandler.HandleAsync(new Update { CallbackQuery = callbackQuery });

        // Assert
        _fakeBot.WasCallbackQueryAnswered("test_callback_id").Should().BeTrue();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
        var isApproved = _approvedUsersStorage.IsApproved(user.Id);
        isApproved.Should().BeTrue();
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Ban_ShouldBanUser()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "ban_user_12345"
        };

        // Act - –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "ü§ñ –±–∞–Ω"
        await _callbackHandler.HandleAsync(new Update { CallbackQuery = callbackQuery });

        // Assert
        _fakeBot.WasCallbackQueryAnswered("test_callback_id").Should().BeTrue();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
        _fakeBot.BannedUsers.Should().Contain(b => b.UserId == user.Id);
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Skip_ShouldSkipUser()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "skip_user_12345"
        };

        // Act - –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "üò∂ –ø—Ä–æ–ø—É—Å–∫"
        await _callbackHandler.HandleAsync(new Update { CallbackQuery = callbackQuery });

        // Assert
        _fakeBot.WasCallbackQueryAnswered("test_callback_id").Should().BeTrue();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
        var isApproved = _approvedUsersStorage.IsApproved(user.Id);
        isApproved.Should().BeFalse();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–±–∞–Ω–µ–Ω
        _fakeBot.BannedUsers.Should().NotContain(b => b.UserId == user.Id);
    }

    [Test]
    public async Task E2E_AI_Analysis_Channel_ShouldNotShowCaptcha()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var channelMessage = new Message
        {
            From = user,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Channel },
            Text = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª–µ",
            Date = DateTime.UtcNow
        };

        // Act - –≤—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        var result = await _aiChecks.GetAttentionBaitProbability(user);

        // Assert
        result.Should().NotBeNull();
        
        // –í –∫–∞–Ω–∞–ª–∞—Ö –∫–∞–ø—á–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–æ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        _fakeBot.SentMessages.Should().Contain(m => 
            m.ChatId == _appConfig.AdminChatId && 
            m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
    }

    [Test]
    public async Task E2E_AI_Analysis_RepeatedMessage_ShouldNotTriggerAnalysis()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª AI –∞–Ω–∞–ª–∏–∑
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        _approvedUsersStorage.ApproveUserGlobally(user.Id);

        var message = new Message
        {
            From = user,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            Date = DateTime.UtcNow
        };

        // Act - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        var result = await _aiChecks.GetAttentionBaitProbability(user);

        // Assert - AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
        result.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        _fakeBot.SentMessages.Should().NotContain(m => 
            m.ChatId == _appConfig.AdminChatId && 
            m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
    }

    [Test]
    public async Task E2E_AI_Analysis_OperationOrder_ShouldBeCorrect()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        // Act - –≤—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        await _aiChecks.GetAttentionBaitProbability(suspiciousUser);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        var operationLog = _fakeBot.GetOperationLog();
        
        // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        operationLog.Should().Contain(op => op.Contains("SendMessageAsync"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        var sendMessageOps = operationLog.Where(op => op.Contains("SendMessageAsync")).ToList();
        sendMessageOps.Should().NotBeEmpty();
    }

    [Test]
    public async Task E2E_AI_Analysis_PhotoWithCaption_ShouldIncludePhoto()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–æ—Ç–æ
        _fakeBot.SetupGetChatFullInfo(user.Id, new ChatFullInfo
        {
            Id = user.Id,
            Type = ChatType.Private,
            Photo = new ChatPhoto
            {
                SmallFileId = "fake_small_file_id",
                BigFileId = "fake_big_file_id"
            }
        });

        // Act - –≤—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        var result = await _aiChecks.GetAttentionBaitProbability(user);

        // Assert
        result.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        _fakeBot.SentPhotos.Should().Contain(p => p.ChatId == _appConfig.AdminChatId);
    }
} 