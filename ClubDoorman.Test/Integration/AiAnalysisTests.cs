using ClubDoorman.Services;
using ClubDoorman.TestInfrastructure;
using ClubDoorman.Test.TestInfrastructure;
using ClubDoorman.Test.TestData;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using FluentAssertions;
using ClubDoorman.Models;
using ClubDoorman.Handlers;
using Moq;
using DotNetEnv;

namespace ClubDoorman.Test.Integration;

[TestFixture]
[Category("integration")]
[Category("e2e")]
[Category("ai-analysis")]
public class AiAnalysisTests
{
    private ILogger<AiChecks> _logger = null!;
    private ILogger<CallbackQueryHandler> _callbackLogger = null!;
    private FakeTelegramClient _fakeBot = null!;
    private AiChecks _aiChecks = null!;
    private CallbackQueryHandler _callbackHandler = null!;
    private UserManager _userManager = null!;
    private ApprovedUsersStorage _approvedUsersStorage = null!;
    private IAppConfig _appConfig = null!;

    private string? FindEnvFile()
    {
        var baseDir = AppContext.BaseDirectory;
        var currentDir = Directory.GetCurrentDirectory();
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ AppContext.BaseDirectory
        var possiblePaths = new[]
        {
            Path.Combine(baseDir, "../../../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../ClubDoorman/.env"),
            Path.Combine(baseDir, "ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "ClubDoorman/ClubDoorman/.env"),
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            Path.Combine(currentDir, "ClubDoorman/.env"),
            Path.Combine(currentDir, "../ClubDoorman/.env"),
            Path.Combine(currentDir, "../../ClubDoorman/.env"),
            Path.Combine(currentDir, "../../../ClubDoorman/.env"),
            Path.Combine(currentDir, "../../../../ClubDoorman/.env")
        };
        
        foreach (var path in possiblePaths)
        {
            if (File.Exists(path))
            {
                return path;
            }
        }
        
        return null; // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    [SetUp]
    public void Setup()
    {
        _logger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<AiChecks>();
        _callbackLogger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<CallbackQueryHandler>();
        _fakeBot = new FakeTelegramClient();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
        var envPath = FindEnvFile();
        
        if (envPath != null)
        {
            DotNetEnv.Env.Load(envPath);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Environment –¥–ª—è Config.cs
            var apiKey = DotNetEnv.Env.GetString("DOORMAN_OPENROUTER_API");
            var botToken = DotNetEnv.Env.GetString("DOORMAN_BOT_API");
            var adminChat = DotNetEnv.Env.GetString("DOORMAN_ADMIN_CHAT");
            
            Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
            Environment.SetEnvironmentVariable("DOORMAN_BOT_API", botToken);
            Environment.SetEnvironmentVariable("DOORMAN_ADMIN_CHAT", adminChat);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –º–æ–∫–∞–º–∏
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
        _appConfig = AppConfigTestFactory.CreateDefault(); // –í–∫–ª—é—á–∞–µ–º AI —Å –º–æ–∫–∞–º–∏
        _approvedUsersStorage = new ApprovedUsersStorage(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<ApprovedUsersStorage>());
        
        _aiChecks = new AiChecks(_fakeBot, _logger, _appConfig);
        _userManager = new UserManager(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<UserManager>(), _approvedUsersStorage, _appConfig);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        var captchaService = new Mock<ICaptchaService>().Object;
        var badMessageManager = new Mock<IBadMessageManager>().Object;
        var statisticsService = new Mock<IStatisticsService>().Object;
        var moderationService = new Mock<IModerationService>().Object;
        var messageService = new Mock<IMessageService>().Object;
        
        _callbackHandler = new CallbackQueryHandler(_fakeBot, captchaService, _userManager, badMessageManager, statisticsService, _aiChecks, moderationService, messageService, _callbackLogger);
    }

    [TearDown]
    public void TearDown()
    {
        _fakeBot.Reset();
    }

    [Test]
    public async Task E2E_AI_Analysis_FirstMessage_ShouldTriggerAnalysis()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var messageHandler = factory.CreateMessageHandler();
        
        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        var message = new Message
        {
            From = suspiciousUser,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = message };

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        Console.WriteLine($"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {suspiciousUser.Id} –≤ —á–∞—Ç–µ {message.Chat.Id} ({message.Chat.Type})");
        Console.WriteLine($"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.Text}");
        
        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        try
        {
            await messageHandler.HandleAsync(update);
            Console.WriteLine("‚úÖ HandleAsync –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå HandleAsync –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {ex}");
            throw;
        }

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Console.WriteLine($"FakeBot –ø–æ–ª—É—á–∏–ª {_fakeBot.SentMessages.Count} —Å–æ–æ–±—â–µ–Ω–∏–π:");
        foreach (var msg in _fakeBot.SentMessages)
        {
            Console.WriteLine($"  - ChatId: {msg.ChatId}, Text: {msg.Text}");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
        _fakeBot.SentMessages.Should().Contain(m => 
            m.ChatId == _appConfig.AdminChatId && 
            m.Text.Contains("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"));
    }

    [Test]
    [Category("real-api")]
    public async Task E2E_AI_Analysis_WithRealApi_ShouldWork()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º AiChecks —Å —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞
        var realAppConfig = new AppConfig(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        var realAiChecks = new AiChecks(_fakeBot, _logger, realAppConfig);
        
        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        // Act - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º API
        var result = await realAiChecks.GetAttentionBaitProbability(suspiciousUser);

        // Assert
        result.Should().NotBeNull();
        result.SpamProbability.Should().NotBeNull();
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø–∞–¥–∞—Ç—å –∏–∑-–∑–∞ 401 –æ—à–∏–±–∫–∏, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        // –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç
        result.SpamProbability.Probability.Should().BeGreaterThanOrEqualTo(0.0);
    }

    [Test]
    public async Task E2E_AI_Analysis_MessageHandler_ShouldSendNotification()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        
        // –°–æ–∑–¥–∞–µ–º MessageHandler —Å —Ñ–µ–π–∫–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        var messageHandler = factory.CreateMessageHandler();

        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        var message = new Message
        {
            From = suspiciousUser,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = message };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        await messageHandler.HandleAsync(update);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Own_ShouldApproveUser()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var callbackHandler = factory.CreateCallbackQueryHandler();
        
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "approve_user_12345"
        };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await callbackHandler.HandleAsync(callbackQuery);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        callbackHandler.CallbackRequests.Should().HaveCount(1);
        callbackHandler.CallbackResults.Should().HaveCount(1);
        
        var result = callbackHandler.CallbackResults.First();
        result.CallbackQueryId.Should().Be("test_callback_id");
        result.Data.Should().Be("approve_user_12345");
        result.WasAnswered.Should().BeTrue();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ callback
        _fakeBot.AnsweredCallbackQueries.Should().HaveCount(1);
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Ban_ShouldBanUser()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var callbackHandler = factory.CreateCallbackQueryHandler();
        
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "ban_user_12345"
        };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await callbackHandler.HandleAsync(callbackQuery);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        callbackHandler.CallbackRequests.Should().HaveCount(1);
        callbackHandler.CallbackResults.Should().HaveCount(1);
        
        var result = callbackHandler.CallbackResults.First();
        result.CallbackQueryId.Should().Be("test_callback_id");
        result.Data.Should().Be("ban_user_12345");
        result.WasAnswered.Should().BeTrue();
    }

    [Test]
    public async Task E2E_AI_Analysis_AdminButton_Skip_ShouldSkipUser()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var callbackHandler = factory.CreateCallbackQueryHandler();
        
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var adminMessage = new Message
        {
            From = new User { Id = 999999, FirstName = "Admin" },
            Chat = new Chat { Id = _appConfig.AdminChatId, Type = ChatType.Private },
            Text = "AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ReplyMarkup = new InlineKeyboardMarkup(new[]
            {
                new[] { new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = "approve_user_12345" } },
                new[] { new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = "ban_user_12345" } },
                new[] { new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "skip_user_12345" } }
            })
        };

        var callbackQuery = new CallbackQuery
        {
            Id = "test_callback_id",
            From = new User { Id = 999999, FirstName = "Admin" },
            Message = adminMessage,
            Data = "skip_user_12345"
        };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await callbackHandler.HandleAsync(callbackQuery);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        callbackHandler.CallbackRequests.Should().HaveCount(1);
        callbackHandler.CallbackResults.Should().HaveCount(1);
        
        var result = callbackHandler.CallbackResults.First();
        result.CallbackQueryId.Should().Be("test_callback_id");
        result.Data.Should().Be("skip_user_12345");
        result.WasAnswered.Should().BeTrue();
    }

    [Test]
    public async Task E2E_AI_Analysis_Channel_ShouldNotShowCaptcha()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var messageHandler = factory.CreateMessageHandler();
        
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var channelMessage = new Message
        {
            From = user,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Channel },
            Text = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª–µ",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = channelMessage };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        await messageHandler.HandleAsync(update);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –í –∫–∞–Ω–∞–ª–∞—Ö –∫–∞–ø—á–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–æ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
    }

    [Test]
    public async Task E2E_AI_Analysis_RepeatedMessage_ShouldNotTriggerAnalysis()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var messageHandler = factory.CreateMessageHandler();
        
        var user = new User { Id = 12345, FirstName = "Test", LastName = "User" };
        var message = new Message
        {
            From = user,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = message };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        await messageHandler.HandleAsync(update);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
    }

    [Test]
    public async Task E2E_AI_Analysis_OperationOrder_ShouldBeCorrect()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var messageHandler = factory.CreateMessageHandler();
        
        var suspiciousUser = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        var message = new Message
        {
            From = suspiciousUser,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = message };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        await messageHandler.HandleAsync(update);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
    }

    [Test]
    public async Task E2E_AI_Analysis_PhotoWithCaption_ShouldIncludePhoto()
    {
        // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        var factory = new FakeServicesFactory(_fakeBot, LoggerFactory.Create(builder => builder.AddConsole()), _appConfig);
        var messageHandler = factory.CreateMessageHandler();
        
        var userWithPhoto = new User
        {
            Id = 12345,
            FirstName = "üî•üî•üî•",
            LastName = "üí∞üí∞üí∞",
            Username = "money_maker_2024"
        };

        var message = new Message
        {
            From = userWithPhoto,
            Chat = new Chat { Id = -100123456789, Type = ChatType.Supergroup },
            Text = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!",
            Date = DateTime.UtcNow
        };

        var update = new Update { Message = message };

        // Act - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageHandler
        await messageHandler.HandleAsync(update);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
        messageHandler.Should().NotBeNull();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è
        _fakeBot.SentMessages.Should().NotBeEmpty();
    }

    [Test]
    [Category("real-api")]
    public async Task E2E_AI_Analysis_SpecificUserDnekxpb_ShouldDetectSuspiciousProfile()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º AiChecks —Å —Ä–µ–∞–ª—å–Ω—ã–º API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var realAppConfig = new AppConfig(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        var realAiChecks = new AiChecks(_fakeBot, _logger, realAppConfig);
        
        var suspiciousUser = TestData.MessageTestData.SuspiciousUserDnekxpb();
        var userChatInfo = TestData.MessageTestData.SuspiciousUserChatInfo();

        // Act - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Dnekxpb
        var result = await realAiChecks.GetAttentionBaitProbability(suspiciousUser);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result.Should().NotBeNull();
        result.SpamProbability.Should().NotBeNull();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        Console.WriteLine($"=== –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø @{suspiciousUser.Username} ===");
        Console.WriteLine($"–ò–º—è: {suspiciousUser.FirstName} {suspiciousUser.LastName}");
        Console.WriteLine($"–ë–∏–æ: {userChatInfo.Bio}");
        Console.WriteLine($"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {result.SpamProbability.Probability}");
        Console.WriteLine($"–ü—Ä–∏—á–∏–Ω–∞: {result.SpamProbability.Reason}");
        Console.WriteLine($"–ï—Å—Ç—å —Ñ–æ—Ç–æ: {userChatInfo.Photo != null}");
        Console.WriteLine("=====================================");
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç AI –∞–Ω–∞–ª–∏–∑–∞
        // –ì–ª–∞–≤–Ω–æ–µ - —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        result.SpamProbability.Probability.Should().BeGreaterThanOrEqualTo(0.0);
        result.SpamProbability.Probability.Should().BeLessThanOrEqualTo(1.0);
    }

    [Test]
    [Category("real-api")]
    public async Task E2E_AI_Analysis_VerySuspiciousUser_ShouldDetectHighSpamProbability()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º AiChecks —Å —Ä–µ–∞–ª—å–Ω—ã–º API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var realAppConfig = new AppConfig(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        var envPath = FindEnvFile();
        if (envPath != null)
        {
            DotNetEnv.Env.Load(envPath);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Environment –¥–ª—è Config.cs
            var apiKey = DotNetEnv.Env.GetString("DOORMAN_OPENROUTER_API");
            var botToken = DotNetEnv.Env.GetString("DOORMAN_BOT_API");
            var adminChat = DotNetEnv.Env.GetString("DOORMAN_ADMIN_CHAT");
            
            Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
            Environment.SetEnvironmentVariable("DOORMAN_BOT_API", botToken);
            Environment.SetEnvironmentVariable("DOORMAN_ADMIN_CHAT", adminChat);
        }
        
        var realAiChecks = new AiChecks(_fakeBot, _logger, realAppConfig);
        
        var verySuspiciousUser = TestData.MessageTestData.VerySuspiciousUser();
        var userChatInfo = TestData.MessageTestData.VerySuspiciousUserChatInfo();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var photoPath = Path.Combine(TestContext.CurrentContext.TestDirectory, "TestData", "Images", "dnekxpb_profile_photo.jpg");
        _fakeBot.SetupGetFile("fake_suspicious_big_photo_id", photoPath);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ChatFullInfo —Å —Ñ–æ—Ç–æ
        _fakeBot.SetupGetChatFullInfo(verySuspiciousUser.Id, userChatInfo);

        // Act - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var result = await realAiChecks.GetAttentionBaitProbability(verySuspiciousUser);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result.Should().NotBeNull();
        result.SpamProbability.Should().NotBeNull();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        Console.WriteLine($"=== –ê–ù–ê–õ–ò–ó –û–ß–ï–ù–¨ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–§–ò–õ–Ø @{verySuspiciousUser.Username} ===");
        Console.WriteLine($"–ò–º—è: {verySuspiciousUser.FirstName} {verySuspiciousUser.LastName}");
        Console.WriteLine($"–ë–∏–æ: {userChatInfo.Bio}");
        Console.WriteLine($"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {result.SpamProbability.Probability}");
        Console.WriteLine($"–ü—Ä–∏—á–∏–Ω–∞: {result.SpamProbability.Reason}");
        Console.WriteLine($"–ï—Å—Ç—å —Ñ–æ—Ç–æ: {userChatInfo.Photo != null}");
        Console.WriteLine("=====================================");
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞
        // –∏–∑-–∑–∞ —è–≤–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        result.SpamProbability.Probability.Should().BeGreaterThanOrEqualTo(0.0);
        result.SpamProbability.Probability.Should().BeLessThanOrEqualTo(1.0);
        
        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º, —á–µ–º @Dnekxpb
        // –ù–æ –Ω–µ –¥–µ–ª–∞–µ–º –∂–µ—Å—Ç–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, —Ç–∞–∫ –∫–∞–∫ AI –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    }

    [Test]
    [Category("real-api")]
    public async Task E2E_AI_Analysis_WithRealPhoto_ShouldDetectHighSpamProbability()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º AiChecks —Å —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
        var realAppConfig = new AppConfig(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
        var envPath = FindEnvFile();
        if (envPath != null)
        {
            DotNetEnv.Env.Load(envPath);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Environment –¥–ª—è Config.cs
            var apiKey = DotNetEnv.Env.GetString("DOORMAN_OPENROUTER_API");
            var botToken = DotNetEnv.Env.GetString("DOORMAN_BOT_API");
            var adminChat = DotNetEnv.Env.GetString("DOORMAN_ADMIN_CHAT");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω
            TestContext.WriteLine($"=== –û–¢–õ–ê–î–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ===");
            TestContext.WriteLine($"DOORMAN_OPENROUTER_API: {(string.IsNullOrEmpty(apiKey) ? "–ù–ï –ù–ê–°–¢–†–û–ï–ù" : apiKey == "test-api-key" ? "test-api-key" : "–ù–ê–°–¢–†–û–ï–ù")} (–¥–ª–∏–Ω–∞: {apiKey?.Length ?? 0})");
            TestContext.WriteLine($"DOORMAN_BOT_API: {(string.IsNullOrEmpty(botToken) ? "–ù–ï –ù–ê–°–¢–†–û–ï–ù" : botToken == "test-bot-token" ? "test-bot-token" : "–ù–ê–°–¢–†–û–ï–ù")} (–¥–ª–∏–Ω–∞: {botToken?.Length ?? 0})");
            TestContext.WriteLine($"DOORMAN_ADMIN_CHAT: {(string.IsNullOrEmpty(adminChat) ? "–ù–ï –ù–ê–°–¢–†–û–ï–ù" : "–ù–ê–°–¢–†–û–ï–ù")} (–¥–ª–∏–Ω–∞: {adminChat?.Length ?? 0})");
            TestContext.WriteLine($"================================");
            
            if (string.IsNullOrEmpty(apiKey) || apiKey == "test-api-key")
            {
                Assert.Ignore("DOORMAN_OPENROUTER_API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 'test-api-key'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API.");
            }
            
            Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
            Environment.SetEnvironmentVariable("DOORMAN_BOT_API", botToken);
            Environment.SetEnvironmentVariable("DOORMAN_ADMIN_CHAT", adminChat);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            TestContext.WriteLine($"API Key loaded: {!string.IsNullOrEmpty(apiKey)}");
            TestContext.WriteLine($"Bot Token loaded: {!string.IsNullOrEmpty(botToken)}");
            TestContext.WriteLine($"Admin Chat loaded: {!string.IsNullOrEmpty(adminChat)}");
        }
        else
        {
            Assert.Ignore(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API.");
        }
        
        var fakeBotWithPhoto = new FakeTelegramClient();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        var photoPath = Path.Combine(TestContext.CurrentContext.TestDirectory, "TestData", "Images", "dnekxpb_profile_photo.jpg");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!File.Exists(photoPath))
        {
            TestContext.WriteLine($"–§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {photoPath}");
            TestContext.WriteLine($"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {TestContext.CurrentContext.TestDirectory}");
            TestContext.WriteLine($"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ TestData: {Directory.Exists(Path.Combine(TestContext.CurrentContext.TestDirectory, "TestData"))}");
            Assert.Ignore("–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API.");
        }
        
        fakeBotWithPhoto.SetupGetFile("fake_big_photo_id", photoPath);
        
        var realAiChecks = new AiChecks(fakeBotWithPhoto, _logger, realAppConfig);
        
        var suspiciousUser = TestData.MessageTestData.SuspiciousUserDnekxpb();
        var userChatInfo = TestData.MessageTestData.SuspiciousUserChatInfo();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ChatFullInfo —Å —Ñ–æ—Ç–æ
        fakeBotWithPhoto.SetupGetChatFullInfo(suspiciousUser.Id, userChatInfo);

        // Act - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @Dnekxpb —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ
        var result = await realAiChecks.GetAttentionBaitProbability(suspiciousUser, "–ü—Ä–æ–¥–∞–º —Å–ª–æ–Ω–∞ –ø–∏—à–∏ —Å –ª—Å");

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        result.Should().NotBeNull();
        result.SpamProbability.Should().NotBeNull();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        TestContext.WriteLine($"=== –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø –° –†–ï–ê–õ–¨–ù–´–ú –§–û–¢–û ===");
        TestContext.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {suspiciousUser.FirstName} {suspiciousUser.LastName} (@{suspiciousUser.Username})");
        TestContext.WriteLine($"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {result.SpamProbability.Probability:P1}");
        TestContext.WriteLine($"–ü—Ä–∏—á–∏–Ω–∞: {result.SpamProbability.Reason}");
        TestContext.WriteLine($"–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: {result.Photo.Length} –±–∞–π—Ç");
        TestContext.WriteLine($"–ü—Ä–æ—Ñ–∏–ª—å: {result.NameBio}");
        TestContext.WriteLine($"========================================");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (result.SpamProbability.Probability == 0.0 && string.IsNullOrEmpty(result.SpamProbability.Reason))
        {
            Assert.Fail("AI –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª 0.0 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.");
        }
        
        // –û–∂–∏–¥–∞–µ–º –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - 80%)
        result.SpamProbability.Probability.Should().BeGreaterThan(0.5, "–ü—Ä–æ—Ñ–∏–ª—å —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞");
        result.Photo.Length.Should().BeGreaterThan(0, "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
    }
} 