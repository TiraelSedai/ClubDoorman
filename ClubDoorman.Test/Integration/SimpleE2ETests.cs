using ClubDoorman.Services;
using ClubDoorman.TestInfrastructure;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using System.Reflection;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Test.Integration;

[TestFixture]
[Category("integration")]
[Category("e2e")]
public class SimpleE2ETests
{
    private ILogger<AiChecks> _logger = null!;
    private FakeTelegramClient _fakeBot = null!;
    private AiChecks _aiChecks = null!;
    private SpamHamClassifier _spamHamClassifier = null!;
    private MimicryClassifier _mimicryClassifier = null!;

    private string FindEnvFile()
    {
        var baseDir = AppContext.BaseDirectory;
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ AppContext.BaseDirectory
        var possiblePaths = new[]
        {
            Path.Combine(baseDir, "../../../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../../ClubDoorman/.env"),
            Path.Combine(baseDir, "../ClubDoorman/.env"),
            Path.Combine(baseDir, "ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "../ClubDoorman/ClubDoorman/.env"),
            Path.Combine(baseDir, "ClubDoorman/ClubDoorman/.env")
        };
        
        foreach (var path in possiblePaths)
        {
            if (File.Exists(path))
            {
                return path;
            }
        }
        
        throw new FileNotFoundException("Could not find .env file");
    }

    [SetUp]
    public void Setup()
    {
        _logger = LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<AiChecks>();
        _fakeBot = new FakeTelegramClient();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        var envPath = FindEnvFile();
        DotNetEnv.Env.Load(envPath);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Environment –¥–ª—è Config.cs
        var apiKey = DotNetEnv.Env.GetString("DOORMAN_OPENROUTER_API");
        var botToken = DotNetEnv.Env.GetString("DOORMAN_BOT_API");
        var adminChat = DotNetEnv.Env.GetString("DOORMAN_ADMIN_CHAT");
        
        Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
        Environment.SetEnvironmentVariable("DOORMAN_BOT_API", botToken);
        Environment.SetEnvironmentVariable("DOORMAN_ADMIN_CHAT", adminChat);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
        if (string.IsNullOrEmpty(apiKey) || string.IsNullOrEmpty(botToken))
        {
            Assert.Ignore("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã");
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Config
        Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", null);
        Environment.SetEnvironmentVariable("DOORMAN_OPENROUTER_API", apiKey);
        
        // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å Config.OpenRouterApi –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ - Config.OpenRouterApi —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ - Config.OpenRouterApi –ø—É—Å—Ç–æ–π (–ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤)
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ Config.OpenRouterApi –ø—É—Å—Ç–æ–π
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Config.OpenRouterApi –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        var configApiKey = ClubDoorman.Infrastructure.Config.OpenRouterApi;
        if (string.IsNullOrEmpty(configApiKey))
        {
            Assert.Ignore("Config.OpenRouterApi –ø—É—Å—Ç–æ–π - –ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤");
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ª–æ–≥–≥–µ—Ä–∞–º–∏
        _aiChecks = new AiChecks(_fakeBot, _logger);
        _spamHamClassifier = new SpamHamClassifier(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<SpamHamClassifier>());
        _mimicryClassifier = new MimicryClassifier(LoggerFactory.Create(builder => builder.AddConsole()).CreateLogger<MimicryClassifier>());
    }

    [Test]
    public async Task E2E_SpamHamClassifier_ShouldDetectSpam()
    {
        // Arrange - —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        var spamMessage = "üî•üî•üî• –°–†–û–ß–ù–û! –ó–ê–†–ê–ë–û–¢–ê–ô 1000000$ –ó–ê –î–ï–ù–¨! üî•üî•üî• –ü–ï–†–ï–•–û–î–ò –ü–û –°–°–´–õ–ö–ï: https://scam.com";

        // Act
        var result = await _spamHamClassifier.IsSpam(spamMessage);

        // Assert
        Assert.That(result.Score, Is.GreaterThan(0.5), "–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å");
        Assert.That(result.Spam, Is.True, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Å–ø–∞–º");
        
        Console.WriteLine($"E2E —Ç–µ—Å—Ç: –°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {result.Score}");
    }

    [Test]
    public async Task E2E_SpamHamClassifier_ShouldDetectHam()
    {
        // Arrange - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        var hamMessage = "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞? –ù–∞–¥–µ—é—Å—å, —É –≤—Å–µ—Ö –≤—Å–µ —Ö–æ—Ä–æ—à–æ.";

        // Act
        var result = await _spamHamClassifier.IsSpam(hamMessage);

        // Assert
        Assert.That(result.Score, Is.LessThan(0.5), "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∏–∑–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞");
        Assert.That(result.Spam, Is.False, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –Ω–µ —Å–ø–∞–º");
        
        Console.WriteLine($"E2E —Ç–µ—Å—Ç: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {result.Score}");
    }

    [Test]
    public async Task E2E_MimicryClassifier_ShouldDetectMimicry()
    {
        // Arrange - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        var messages = new List<string>
        {
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?",
            "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ú–æ–≥—É –ø–æ–º–æ—á—å?",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?"
        };

        // Act
        var result = _mimicryClassifier.AnalyzeMessages(messages);

        // Assert
        Assert.That(result, Is.GreaterThan(0.3), "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å");
        
        Console.WriteLine($"E2E —Ç–µ—Å—Ç: Mimicry –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {result}");
    }

    [Test]
    public async Task E2E_CompleteAIAnalysis_ShouldWorkEndToEnd()
    {
        // Arrange - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ–æ—Ç–æ
        var user = new User
        {
            Id = 12345,
            FirstName = "Test",
            LastName = "User"
        };

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FakeTelegramClient
        _fakeBot.SetupGetChatFullInfo(user.Id, new ChatFullInfo
        {
            Id = user.Id,
            Type = ChatType.Private,
            Bio = null,
            LinkedChatId = null,
            Photo = new ChatPhoto
            {
                SmallFileId = "fake_small_file_id",
                BigFileId = "fake_big_file_id"
            }
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        var photoPath = "/home/kpblc/projects/ClubDoorman/tmp/big.png";
        _fakeBot.SetupGetFile("fake_big_file_id", photoPath);

        // Act - AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ
        var photoResult = await _aiChecks.GetAttentionBaitProbability(user);
        
        // Act - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        var textMessage = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
        var textResult = await _spamHamClassifier.IsSpam(textMessage);

        // Assert
        Assert.That(photoResult.Photo.Length, Is.GreaterThan(0), "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
        Assert.That(photoResult.SpamProbability, Is.Not.Null);
        
        Assert.That(textResult.Spam, Is.False, "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∞–º–æ–º");
        
        Console.WriteLine($"E2E —Ç–µ—Å—Ç: –ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
        Console.WriteLine($"  - –§–æ—Ç–æ: {photoResult.Photo.Length} –±–∞–π—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {photoResult.SpamProbability.Probability}");
        Console.WriteLine($"  - –¢–µ–∫—Å—Ç: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {textResult.Score}");
    }
} 