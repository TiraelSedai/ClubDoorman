using ClubDoorman.Handlers;
using ClubDoorman.TestInfrastructure;
using NUnit.Framework;
using ClubDoorman.Test.TestKit;

namespace ClubDoorman.Test;

/// <summary>
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π TestKit –∏ TestKitBogus
/// </summary>
[TestFixture]
[Category("demo")]
public class TestKitDemoTests
{
    [Test]
    public void TestKit_CreateMessageHandlerWithDefaults_WorksCorrectly()
    {
        // Arrange & Act
        var handler = TK.CreateMessageHandlerWithDefaults();

        // Assert
        Assert.That(handler, Is.Not.Null);
        Assert.That(handler, Is.InstanceOf<MessageHandler>());
    }

    [Test]
    public void TestKit_CreateMessageHandlerWithFake_WorksCorrectly()
    {
        // Arrange & Act
        var handler = TK.CreateMessageHandlerWithFake();

        // Assert
        Assert.That(handler, Is.Not.Null);
        Assert.That(handler, Is.InstanceOf<MessageHandler>());
    }

    [Test]
    public void TestKit_CreateValidMessage_WorksCorrectly()
    {
        // Arrange & Act
        var message = TK.CreateValidMessage();

        // Assert
        Assert.That(message, Is.Not.Null);
        Assert.That(message.Text, Is.EqualTo("Hello, this is a valid message!"));
        Assert.That(message.From, Is.Not.Null);
        Assert.That(message.Chat, Is.Not.Null);
    }

    [Test]
    public void TestKitBogus_CreateRealisticUser_WorksCorrectly()
    {
        // Arrange & Act
        var user = TestKitBogus.CreateRealisticUser();

        // Assert
        Assert.That(user, Is.Not.Null);
        Assert.That(user.Id, Is.GreaterThan(0));
        Assert.That(user.FirstName, Is.Not.Null.And.Not.Empty);
        Assert.That(user.IsBot, Is.False);
    }

    [Test]
    public void TestKitBogus_CreateRealisticBot_WorksCorrectly()
    {
        // Arrange & Act
        var bot = TestKitBogus.CreateRealisticBot();

        // Assert
        Assert.That(bot, Is.Not.Null);
        Assert.That(bot.Id, Is.GreaterThan(0));
        Assert.That(bot.FirstName, Is.Not.Null.And.Not.Empty);
        Assert.That(bot.IsBot, Is.True);
    }

    [Test]
    public void TestKitBogus_CreateRealisticGroup_WorksCorrectly()
    {
        // Arrange & Act
        var group = TestKitBogus.CreateRealisticGroup();

        // Assert
        Assert.That(group, Is.Not.Null);
        Assert.That(group.Id, Is.LessThan(0)); // –ì—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID
        Assert.That(group.Title, Is.Not.Null.And.Not.Empty);
        Assert.That(group.Type, Is.EqualTo(Telegram.Bot.Types.Enums.ChatType.Group));
    }

    [Test]
    public void TestKitBogus_CreateRealisticMessage_WorksCorrectly()
    {
        // Arrange & Act
        var message = TestKitBogus.CreateRealisticMessage();

        // Assert
        Assert.That(message, Is.Not.Null);
        Assert.That(message.Text, Is.Not.Null.And.Not.Empty);
        Assert.That(message.From, Is.Not.Null);
        Assert.That(message.Chat, Is.Not.Null);
        // MessageId –≤ Telegram.Bot.Types.Message —è–≤–ª—è–µ—Ç—Å—è readonly –∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 0
        // Assert.That(message.MessageId, Is.GreaterThan(0));
    }

    [Test]
    public void TestKitBogus_CreateRealisticSpamMessage_WorksCorrectly()
    {
        // Arrange & Act
        var spamMessage = TestKitBogus.CreateRealisticSpamMessage();

        // Assert
        Assert.That(spamMessage, Is.Not.Null);
        Assert.That(spamMessage.Text, Is.Not.Null.And.Not.Empty);
        Assert.That(spamMessage.Text, Does.Contain("üî•").Or.Contain("üí∞").Or.Contain("üéÅ").Or.Contain("‚ö°").Or.Contain("üíé").Or.Contain("üöÄ").Or.Contain("üì±").Or.Contain("‚ùóÔ∏è").Or.Contain("–í–ù–ò–ú–ê–ù–ò–ï").Or.Contain("–ó–ê–†–ê–ë–û–¢–ê–õ"));
    }

    [Test]
    public void TestKit_FactoryMethods_WorkCorrectly()
    {
        // Arrange & Act
        var messageHandlerFactory = TK.CreateMessageHandlerFactory();
        var moderationServiceFactory = TK.CreateModerationServiceFactory();
        var captchaServiceFactory = TK.CreateCaptchaServiceFactory();

        // Assert
        Assert.That(messageHandlerFactory, Is.Not.Null);
        Assert.That(moderationServiceFactory, Is.Not.Null);
        Assert.That(captchaServiceFactory, Is.Not.Null);
    }

    [Test]
    public void TestKit_LegacyTestData_WorksCorrectly()
    {
        // Arrange & Act
        var message = TK.CreateValidMessage();
        var user = TK.CreateValidUser();
        var chat = TK.CreateGroupChat();

        // Assert
        Assert.That(message, Is.Not.Null);
        Assert.That(user, Is.Not.Null);
        Assert.That(chat, Is.Not.Null);
    }

    [Test]
    public void TestKitDemo_NewSpecializedStructure_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Specialized
        var captcha = TK.Specialized.Captcha.Bait();
        var moderationResult = TK.Specialized.Moderation.Ban();
        var adminCallback = TK.Specialized.Admin.ApproveCallback();
        var memberUpdate = TK.Specialized.Updates.MemberJoined();
        var callback = TK.Specialized.Callbacks.Valid();
        var suspiciousMessage = TK.Specialized.Messages.SuspiciousUser();
        var baitUser = TK.Specialized.Users.Bait();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        Assert.That(captcha, Is.Not.Null);
        Assert.That(moderationResult, Is.Not.Null);
        Assert.That(adminCallback, Is.Not.Null);
        Assert.That(memberUpdate, Is.Not.Null);
        Assert.That(callback, Is.Not.Null);
        Assert.That(suspiciousMessage, Is.Not.Null);
        Assert.That(baitUser, Is.Not.Null);
    }

    [Test]
    public void TestKitDemo_MessageHandlerScenario_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è MessageHandler
        var user = TK.CreateValidUser();
        var chat = TK.CreateGroupChat();
        var message = TK.CreateValidMessage();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message.From = user;
        message.Chat = chat;
        message.Text = "Hello, this is a test message";

        Assert.That(message.From.Id, Is.EqualTo(user.Id));
        Assert.That(message.Chat.Id, Is.EqualTo(chat.Id));
        Assert.That(message.Text, Is.EqualTo("Hello, this is a test message"));
    }

    [Test]
    public void TestKitDemo_CaptchaScenario_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∫–∞–ø—á–∏
        var captcha = TK.Specialized.Captcha.Bait();
        var user = TK.CreateValidUser();
        var chat = TK.CreateGroupChat();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ø—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        Assert.That(captcha, Is.Not.Null);
        Assert.That(user, Is.Not.Null);
        Assert.That(chat, Is.Not.Null);
    }

    [Test]
    public void TestKitDemo_ModerationScenario_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        var allowResult = TK.Specialized.Moderation.Allow();
        var deleteResult = TK.Specialized.Moderation.Delete();
        var banResult = TK.Specialized.Moderation.Ban();
        
        Assert.That(allowResult, Is.Not.Null);
        Assert.That(deleteResult, Is.Not.Null);
        Assert.That(banResult, Is.Not.Null);
    }

    [Test]
    public void TestKitDemo_AdminScenario_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        var approveCallback = TK.Specialized.Admin.ApproveCallback();
        var banCallback = TK.Specialized.Admin.BanCallback();
        var notification = TK.Specialized.Admin.Notification();
        
        Assert.That(approveCallback.Data, Is.Not.Null);
        Assert.That(banCallback.Data, Is.Not.Null);
        Assert.That(notification.Text, Is.Not.Null);
    }

    [Test]
    public void TestKitDemo_ChatUpdatesScenario_WorksCorrectly()
    {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Ç–∞
        var memberJoined = TK.Specialized.Updates.MemberJoined();
        var memberBanned = TK.Specialized.Updates.MemberBanned();
        var memberLeft = TK.Specialized.Updates.MemberLeft();
        
        Assert.That(memberJoined.NewChatMember, Is.Not.Null);
        Assert.That(memberBanned.NewChatMember, Is.Not.Null);
        Assert.That(memberLeft.NewChatMember, Is.Not.Null);
    }
} 