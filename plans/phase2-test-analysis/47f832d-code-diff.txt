commit 47f832d24dcaf4c45fd07b14dbd633acb41ecce2
Author: Mikhail Stepanov <kpblcaoo@gmail.com>
Date:   Fri Jul 25 00:28:32 2025 +0300

    Phase 2: Group 2 - Chat settings and permissions migration
    
    - Added DisabledChats, WhitelistChats, NoVpnAdGroups, NoCaptchaGroups, IsChatAllowed, IsPrivateStartAllowed to IAppConfig
    - Updated AppConfig with delegation to Config
    - Replaced Config usage in MessageHandler, ChatMemberHandler, StartCommandHandler, IntroFlowService, MessageService, CaptchaService, Worker
    - Added IAppConfig to constructors of all affected classes
    - Updated DI registration for all affected services
    - Updated configuration logging in Program.cs
    - Verified old Config usage removed (except delegation in AppConfig)
    - Project compiles successfully (tests need factory updates for IAppConfig parameters)
    
    Part of testing-quality-improvement plan Phase 2

diff --git a/ClubDoorman/Handlers/ChatMemberHandler.cs b/ClubDoorman/Handlers/ChatMemberHandler.cs
index f1cd387..e0e8512 100644
--- a/ClubDoorman/Handlers/ChatMemberHandler.cs
+++ b/ClubDoorman/Handlers/ChatMemberHandler.cs
@@ -21,19 +21,22 @@ public class ChatMemberHandler : IUpdateHandler
     private readonly ILogger<ChatMemberHandler> _logger;
     private readonly IntroFlowService _introFlowService;
     private readonly IMessageService _messageService;
+    private readonly IAppConfig _appConfig;
 
     public ChatMemberHandler(
         ITelegramBotClientWrapper bot,
         IUserManager userManager,
         ILogger<ChatMemberHandler> logger,
         IntroFlowService introFlowService,
-        IMessageService messageService)
+        IMessageService messageService,
+        IAppConfig appConfig)
     {
         _bot = bot;
         _userManager = userManager;
         _logger = logger;
         _introFlowService = introFlowService;
         _messageService = messageService;
+        _appConfig = appConfig;
     }
 
     public bool CanHandle(Update update) => update.Type == UpdateType.ChatMember;
@@ -46,7 +49,7 @@ public class ChatMemberHandler : IUpdateHandler
         ChatSettingsManager.EnsureChatInConfig(chatMember.Chat.Id, chatMember.Chat.Title);
         
         // Проверка whitelist - если активен, работаем только в разрешённых чатах
-        if (!Config.IsChatAllowed(chatMember.Chat.Id))
+        if (!_appConfig.IsChatAllowed(chatMember.Chat.Id))
         {
             _logger.LogDebug("Чат {ChatId} ({ChatTitle}) не в whitelist - игнорируем изменение участника", chatMember.Chat.Id, chatMember.Chat.Title);
             return;
diff --git a/ClubDoorman/Handlers/Commands/StartCommandHandler.cs b/ClubDoorman/Handlers/Commands/StartCommandHandler.cs
index aac5964..41c38e7 100644
--- a/ClubDoorman/Handlers/Commands/StartCommandHandler.cs
+++ b/ClubDoorman/Handlers/Commands/StartCommandHandler.cs
@@ -15,14 +15,16 @@ public class StartCommandHandler : ICommandHandler
     private readonly ITelegramBotClientWrapper _bot;
     private readonly ILogger<StartCommandHandler> _logger;
     private readonly IMessageService _messageService;
+    private readonly IAppConfig _appConfig;
 
     public string CommandName => "start";
 
-    public StartCommandHandler(ITelegramBotClientWrapper bot, ILogger<StartCommandHandler> logger, IMessageService messageService)
+    public StartCommandHandler(ITelegramBotClientWrapper bot, ILogger<StartCommandHandler> logger, IMessageService messageService, IAppConfig appConfig)
     {
         _bot = bot;
         _logger = logger;
         _messageService = messageService;
+        _appConfig = appConfig;
     }
 
     public async Task HandleAsync(Message message, CancellationToken cancellationToken = default)
@@ -31,7 +33,7 @@ public class StartCommandHandler : ICommandHandler
             return;
 
         // Если whitelist активен - не отвечаем в личке
-        if (!Config.IsPrivateStartAllowed())
+        if (!_appConfig.IsPrivateStartAllowed())
         {
             _logger.LogDebug("Команда /start в личке отключена - активен whitelist");
             return;
diff --git a/ClubDoorman/Handlers/MessageHandler.cs b/ClubDoorman/Handlers/MessageHandler.cs
index ba0cdad..f5b0b53 100644
--- a/ClubDoorman/Handlers/MessageHandler.cs
+++ b/ClubDoorman/Handlers/MessageHandler.cs
@@ -36,6 +36,7 @@ public class MessageHandler : IUpdateHandler
     private readonly IMessageService _messageService;
     private readonly IChatLinkFormatter _chatLinkFormatter;
     private readonly IBotPermissionsService _botPermissionsService;
+    private readonly IAppConfig _appConfig;
 
     // Флаги присоединившихся пользователей (временные)
     private static readonly ConcurrentDictionary<string, byte> _joinedUserFlags = new();
@@ -57,6 +58,7 @@ public class MessageHandler : IUpdateHandler
     /// <param name="messageService">Сервис уведомлений</param>
     /// <param name="chatLinkFormatter">Форматтер ссылок на чаты</param>
     /// <param name="botPermissionsService">Сервис проверки прав бота</param>
+    /// <param name="appConfig">Конфигурация приложения</param>
     /// <param name="logger">Логгер</param>
     /// <exception cref="ArgumentNullException">Если любой из параметров равен null</exception>
     public MessageHandler(
@@ -74,6 +76,7 @@ public class MessageHandler : IUpdateHandler
         IMessageService messageService,
         IChatLinkFormatter chatLinkFormatter,
         IBotPermissionsService botPermissionsService,
+        IAppConfig appConfig,
         ILogger<MessageHandler> logger)
     {
         _bot = bot ?? throw new ArgumentNullException(nameof(bot));
@@ -90,6 +93,7 @@ public class MessageHandler : IUpdateHandler
         _messageService = messageService ?? throw new ArgumentNullException(nameof(messageService));
         _chatLinkFormatter = chatLinkFormatter ?? throw new ArgumentNullException(nameof(chatLinkFormatter));
         _botPermissionsService = botPermissionsService ?? throw new ArgumentNullException(nameof(botPermissionsService));
+        _appConfig = appConfig ?? throw new ArgumentNullException(nameof(appConfig));
         _logger = logger ?? throw new ArgumentNullException(nameof(logger));
     }
 
@@ -123,16 +127,16 @@ public class MessageHandler : IUpdateHandler
 
         // Проверка whitelist - если активен, работаем только в разрешённых чатах
         // ИСКЛЮЧЕНИЕ: админ-чаты всегда обрабатываются (для команд /spam, /ham и т.д.)
-        var isAdminChat = chat.Id == Config.AdminChatId || chat.Id == Config.LogAdminChatId;
+        var isAdminChat = chat.Id == _appConfig.AdminChatId || chat.Id == _appConfig.LogAdminChatId;
         
-        if (!Config.IsChatAllowed(chat.Id) && !isAdminChat)
+        if (!_appConfig.IsChatAllowed(chat.Id) && !isAdminChat)
         {
             _logger.LogDebug("Чат {ChatId} ({ChatTitle}) не в whitelist - игнорируем", chat.Id, chat.Title);
             return;
         }
 
         // Игнорировать полностью отключённые чаты
-        if (Config.DisabledChats.Contains(chat.Id))
+        if (_appConfig.DisabledChats.Contains(chat.Id))
             return;
 
         // Проверяем тихий режим (бот без прав администратора)
@@ -160,7 +164,7 @@ public class MessageHandler : IUpdateHandler
         }
 
         // Обработка новых участников
-        if (message.NewChatMembers != null && chat.Id != Config.AdminChatId)
+        if (message.NewChatMembers != null && chat.Id != _appConfig.AdminChatId)
         {
             await HandleNewMembersAsync(message, cancellationToken);
             return;
@@ -216,7 +220,7 @@ public class MessageHandler : IUpdateHandler
         }
 
         // Админские команды (/spam, /ham, /check) - только в админ-чатах
-        var isAdminChat = message.Chat.Id == Config.AdminChatId || message.Chat.Id == Config.LogAdminChatId;
+        var isAdminChat = message.Chat.Id == _appConfig.AdminChatId || message.Chat.Id == _appConfig.LogAdminChatId;
         if (isAdminChat && message.ReplyToMessage != null && (command == "spam" || command == "ham" || command == "check"))
         {
             await HandleAdminCommandAsync(message, command, cancellationToken);
diff --git a/ClubDoorman/Program.cs b/ClubDoorman/Program.cs
index 256d098..3a6f3ed 100644
--- a/ClubDoorman/Program.cs
+++ b/ClubDoorman/Program.cs
@@ -103,19 +103,20 @@ public class Program
                     return new TelegramBotClient(appConfig.BotApi);
                 });
                 
-                services.AddHostedService<Worker>(provider => new Worker(
-                    provider.GetRequiredService<ILogger<Worker>>(),
-                    provider.GetRequiredService<IUpdateDispatcher>(),
-                    provider.GetRequiredService<ICaptchaService>(),
-                    provider.GetRequiredService<IStatisticsService>(),
-                    provider.GetRequiredService<ISpamHamClassifier>(),
-                    provider.GetRequiredService<IUserManager>(),
-                    provider.GetRequiredService<IBadMessageManager>(),
-                    provider.GetRequiredService<IAiChecks>(),
-                    provider.GetRequiredService<IChatLinkFormatter>(),
-                    provider.GetRequiredService<ITelegramBotClientWrapper>(),
-                    provider.GetRequiredService<IMessageService>()
-                ));
+                                                   services.AddHostedService<Worker>(provider => new Worker(
+                                       provider.GetRequiredService<ILogger<Worker>>(),
+                                       provider.GetRequiredService<IUpdateDispatcher>(),
+                                       provider.GetRequiredService<ICaptchaService>(),
+                                       provider.GetRequiredService<IStatisticsService>(),
+                                       provider.GetRequiredService<ISpamHamClassifier>(),
+                                       provider.GetRequiredService<IUserManager>(),
+                                       provider.GetRequiredService<IBadMessageManager>(),
+                                       provider.GetRequiredService<IAiChecks>(),
+                                       provider.GetRequiredService<IChatLinkFormatter>(),
+                                       provider.GetRequiredService<ITelegramBotClientWrapper>(),
+                                       provider.GetRequiredService<IMessageService>(),
+                                       provider.GetRequiredService<IAppConfig>()
+                                   ));
                 
                 // Telegram Bot Client интерфейсы
                 services.AddSingleton<ITelegramBotClient>(provider => provider.GetRequiredService<TelegramBotClient>());
@@ -135,7 +136,8 @@ public class Program
                 services.AddSingleton<ICaptchaService>(provider => new CaptchaService(
                     provider.GetRequiredService<ITelegramBotClientWrapper>(),
                     provider.GetRequiredService<ILogger<CaptchaService>>(),
-                    provider.GetRequiredService<IMessageService>()));
+                    provider.GetRequiredService<IMessageService>(),
+                    provider.GetRequiredService<IAppConfig>()));
                 services.AddSingleton<IModerationService>(provider => new ModerationService(
                     provider.GetRequiredService<ISpamHamClassifier>(),
                     provider.GetRequiredService<IMimicryClassifier>(),
@@ -146,7 +148,7 @@ public class Program
                     provider.GetRequiredService<ITelegramBotClient>(),
                     provider.GetRequiredService<IMessageService>(),
                     provider.GetRequiredService<ILogger<ModerationService>>()));
-                services.AddSingleton<IntroFlowService>(provider => new IntroFlowService(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<IntroFlowService>>(), provider.GetRequiredService<ICaptchaService>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<IAiChecks>(), provider.GetRequiredService<IStatisticsService>(), provider.GetRequiredService<GlobalStatsManager>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<IMessageService>()));
+                services.AddSingleton<IntroFlowService>(provider => new IntroFlowService(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<IntroFlowService>>(), provider.GetRequiredService<ICaptchaService>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<IAiChecks>(), provider.GetRequiredService<IStatisticsService>(), provider.GetRequiredService<GlobalStatsManager>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<IAppConfig>()));
                 services.AddSingleton<IChatLinkFormatter, ChatLinkFormatter>();
                 services.AddSingleton<IUserFlowLogger, UserFlowLogger>();
                 services.AddSingleton<IBotPermissionsService, BotPermissionsService>();
@@ -156,7 +158,14 @@ public class Program
                 services.Configure<LoggingConfiguration>(options => {});
                 services.AddSingleton<ILoggingConfigurationService, LoggingConfigurationService>();
                 services.AddSingleton<IServiceChatDispatcher, ServiceChatDispatcher>();
-                services.AddSingleton<IMessageService, MessageService>();
+                services.AddSingleton<IMessageService>(provider => new MessageService(
+                    provider.GetRequiredService<ITelegramBotClientWrapper>(),
+                    provider.GetRequiredService<ILogger<MessageService>>(),
+                    provider.GetRequiredService<MessageTemplates>(),
+                    provider.GetRequiredService<ILoggingConfigurationService>(),
+                    provider.GetRequiredService<IServiceChatDispatcher>(),
+                    provider.GetRequiredService<IAppConfig>()
+                ));
                 
                 // Обработчики обновлений
                 services.AddSingleton<IUpdateHandler>(provider => new MessageHandler(
@@ -174,13 +183,14 @@ public class Program
                     provider.GetRequiredService<IMessageService>(),
                     provider.GetRequiredService<IChatLinkFormatter>(),
                     provider.GetRequiredService<IBotPermissionsService>(),
+                    provider.GetRequiredService<IAppConfig>(),
                     provider.GetRequiredService<ILogger<MessageHandler>>()));
                 services.AddSingleton<IUpdateHandler>(provider => new CallbackQueryHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ICaptchaService>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<IBadMessageManager>(), provider.GetRequiredService<IStatisticsService>(), provider.GetRequiredService<IAiChecks>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<ILogger<CallbackQueryHandler>>()));
-                services.AddSingleton<IUpdateHandler>(provider => new ChatMemberHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<ILogger<ChatMemberHandler>>(), provider.GetRequiredService<IntroFlowService>(), provider.GetRequiredService<IMessageService>()));
+                services.AddSingleton<IUpdateHandler>(provider => new ChatMemberHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<ILogger<ChatMemberHandler>>(), provider.GetRequiredService<IntroFlowService>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<IAppConfig>()));
                 
                 // Обработчики команд
-                services.AddSingleton<ICommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>(), provider.GetRequiredService<IMessageService>()));
-                services.AddSingleton<StartCommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>(), provider.GetRequiredService<IMessageService>()));
+                services.AddSingleton<ICommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<IAppConfig>()));
+                services.AddSingleton<StartCommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<IAppConfig>()));
                 services.AddSingleton<ICommandHandler>(provider => new SuspiciousCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<ILogger<SuspiciousCommandHandler>>(), provider.GetRequiredService<IAppConfig>()));
                 services.AddSingleton<SuspiciousCommandHandler>(provider => new SuspiciousCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<IMessageService>(), provider.GetRequiredService<ILogger<SuspiciousCommandHandler>>(), provider.GetRequiredService<IAppConfig>()));
                 
@@ -233,12 +243,12 @@ public class Program
                 Console.WriteLine($"   • DOORMAN_APPROVE_BUTTON: {Config.ApproveButtonEnabled}");
                 Console.WriteLine($"   • DOORMAN_DISABLE_MEDIA_FILTERING: {Config.DisableMediaFiltering}");
                 Console.WriteLine($"   • DOORMAN_DELETE_FORWARDED_MESSAGES: {Config.DeleteForwardedMessages}");
-                Console.WriteLine($"   • DOORMAN_PRIVATE_START_DISABLE: {!Config.IsPrivateStartAllowed()}");
-                Console.WriteLine($"   • Отключенные чаты: {Config.DisabledChats.Count}");
-                Console.WriteLine($"   • Белый список чатов: {Config.WhitelistChats.Count}");
+                Console.WriteLine($"   • DOORMAN_PRIVATE_START_DISABLE: {!appConfig.IsPrivateStartAllowed()}");
+                Console.WriteLine($"   • Отключенные чаты: {appConfig.DisabledChats.Count}");
+                Console.WriteLine($"   • Белый список чатов: {appConfig.WhitelistChats.Count}");
                 Console.WriteLine($"   • AI-включенные чаты: {appConfig.AiEnabledChats.Count}");
-                Console.WriteLine($"   • Группы без VPN-рекламы: {Config.NoVpnAdGroups.Count}");
-                Console.WriteLine($"   • Группы с отключенной капчей: {Config.NoCaptchaGroups.Count}");
+                Console.WriteLine($"   • Группы без VPN-рекламы: {appConfig.NoVpnAdGroups.Count}");
+                Console.WriteLine($"   • Группы с отключенной капчей: {appConfig.NoCaptchaGroups.Count}");
                 Console.WriteLine($"   • Чаты с отключенной фильтрацией медиа: {Config.MediaFilteringDisabledChats.Count}");
             })
             .Build();
diff --git a/ClubDoorman/Services/AppConfig.cs b/ClubDoorman/Services/AppConfig.cs
index 2b52089..f421c24 100644
--- a/ClubDoorman/Services/AppConfig.cs
+++ b/ClubDoorman/Services/AppConfig.cs
@@ -72,4 +72,25 @@ public class AppConfig : IAppConfig
     /// URL клуба
     /// </summary>
     public string ClubUrl => Config.ClubUrl;
+    
+    /// <summary>
+    /// Отключенные чаты
+    /// </summary>
+    public HashSet<long> DisabledChats => Config.DisabledChats;
+    
+    /// <summary>
+    /// Whitelist групп - если указан, бот работает только в этих группах
+    /// </summary>
+    public HashSet<long> WhitelistChats => Config.WhitelistChats;
+    
+    /// <summary>
+    /// Группы, где не показывать рекламу
+    /// </summary>
+    public HashSet<long> NoVpnAdGroups => Config.NoVpnAdGroups;
+    
+    /// <summary>
+    /// Группы, в которых отключена капча
+    /// </summary>
+    public HashSet<long> NoCaptchaGroups => Config.NoCaptchaGroups;
+    
 } 
\ No newline at end of file
diff --git a/ClubDoorman/Services/CaptchaService.cs b/ClubDoorman/Services/CaptchaService.cs
index ae589f7..b4ed808 100644
--- a/ClubDoorman/Services/CaptchaService.cs
+++ b/ClubDoorman/Services/CaptchaService.cs
@@ -18,6 +18,7 @@ public class CaptchaService : ICaptchaService
     private readonly ITelegramBotClientWrapper _bot;
     private readonly ILogger<CaptchaService> _logger;
     private readonly IMessageService _messageService;
+    private readonly IAppConfig _appConfig;
 
     // Черный список имен для отображения
     private readonly List<string> _namesBlacklist = ["p0rn", "porn", "порн", "п0рн", "pоrn", "пoрн", "bot"];
@@ -27,11 +28,12 @@ public class CaptchaService : ICaptchaService
     /// </summary>
     /// <param name="bot">Клиент Telegram бота</param>
     /// <param name="logger">Логгер для записи событий</param>
-    public CaptchaService(ITelegramBotClientWrapper bot, ILogger<CaptchaService> logger, IMessageService messageService)
+    public CaptchaService(ITelegramBotClientWrapper bot, ILogger<CaptchaService> logger, IMessageService messageService, IAppConfig appConfig)
     {
         _bot = bot ?? throw new ArgumentNullException(nameof(bot));
         _logger = logger ?? throw new ArgumentNullException(nameof(logger));
         _messageService = messageService ?? throw new ArgumentNullException(nameof(messageService));
+        _appConfig = appConfig ?? throw new ArgumentNullException(nameof(appConfig));
     }
 
     /// <summary>
@@ -53,7 +55,7 @@ public class CaptchaService : ICaptchaService
         if (request.User == null) throw new ArgumentNullException(nameof(request.User));
 
         // Отключение капчи для определённых групп
-        if (Config.NoCaptchaGroups.Contains(request.Chat.Id))
+        if (_appConfig.NoCaptchaGroups.Contains(request.Chat.Id))
         {
             _logger.LogInformation($"[NO_CAPTCHA] Капча отключена для чата {request.Chat.Id}");
             return null;
@@ -331,8 +333,8 @@ public class CaptchaService : ICaptchaService
     /// </summary>
     /// <param name="chatId">ID чата</param>
     /// <returns>true, если группа без рекламы VPN</returns>
-    private static bool IsNoAdGroup(long chatId)
+    private bool IsNoAdGroup(long chatId)
     {
-        return Config.NoVpnAdGroups.Contains(chatId);
+        return _appConfig.NoVpnAdGroups.Contains(chatId);
     }
 } 
\ No newline at end of file
diff --git a/ClubDoorman/Services/IAppConfig.cs b/ClubDoorman/Services/IAppConfig.cs
index f30d2ae..549ef85 100644
--- a/ClubDoorman/Services/IAppConfig.cs
+++ b/ClubDoorman/Services/IAppConfig.cs
@@ -70,4 +70,25 @@ public interface IAppConfig
     /// URL клуба
     /// </summary>
     string ClubUrl { get; }
+    
+    /// <summary>
+    /// Отключенные чаты
+    /// </summary>
+    HashSet<long> DisabledChats { get; }
+    
+    /// <summary>
+    /// Whitelist групп - если указан, бот работает только в этих группах
+    /// </summary>
+    HashSet<long> WhitelistChats { get; }
+    
+    /// <summary>
+    /// Группы, где не показывать рекламу
+    /// </summary>
+    HashSet<long> NoVpnAdGroups { get; }
+    
+    /// <summary>
+    /// Группы, в которых отключена капча
+    /// </summary>
+    HashSet<long> NoCaptchaGroups { get; }
+    
 } 
\ No newline at end of file
diff --git a/ClubDoorman/Services/IntroFlowService.cs b/ClubDoorman/Services/IntroFlowService.cs
index 7aecfd0..48daca8 100644
--- a/ClubDoorman/Services/IntroFlowService.cs
+++ b/ClubDoorman/Services/IntroFlowService.cs
@@ -24,6 +24,7 @@ public class IntroFlowService
     private readonly GlobalStatsManager _globalStatsManager;
     private readonly IModerationService _moderationService;
     private readonly IMessageService _messageService;
+    private readonly IAppConfig _appConfig;
 
     public IntroFlowService(
         ITelegramBotClientWrapper bot,
@@ -34,7 +35,8 @@ public class IntroFlowService
         IStatisticsService statisticsService,
         GlobalStatsManager globalStatsManager,
         IModerationService moderationService,
-        IMessageService messageService)
+        IMessageService messageService,
+        IAppConfig appConfig)
     {
         _bot = bot;
         _logger = logger;
@@ -45,6 +47,7 @@ public class IntroFlowService
         _globalStatsManager = globalStatsManager;
         _moderationService = moderationService;
         _messageService = messageService;
+        _appConfig = appConfig;
     }
 
     public async Task ProcessNewUserAsync(Message? userJoinMessage, User user, Chat? chat = default, CancellationToken cancellationToken = default)
@@ -53,7 +56,7 @@ public class IntroFlowService
         Debug.Assert(chat != null);
         
         // Проверка whitelist - если активен, работаем только в разрешённых чатах
-        if (!Config.IsChatAllowed(chat.Id))
+        if (!_appConfig.IsChatAllowed(chat.Id))
         {
             _logger.LogDebug("Чат {ChatId} ({ChatTitle}) не в whitelist - игнорируем IntroFlow", chat.Id, chat.Title);
             return;
diff --git a/ClubDoorman/Services/MessageService.cs b/ClubDoorman/Services/MessageService.cs
index 6e3d481..0bb459a 100644
--- a/ClubDoorman/Services/MessageService.cs
+++ b/ClubDoorman/Services/MessageService.cs
@@ -19,19 +19,22 @@ public class MessageService : IMessageService
     private readonly MessageTemplates _templates;
     private readonly ILoggingConfigurationService _configService;
     private readonly IServiceChatDispatcher _serviceChatDispatcher;
+    private readonly IAppConfig _appConfig;
     
     public MessageService(
         ITelegramBotClientWrapper bot,
         ILogger<MessageService> logger,
         MessageTemplates templates,
         ILoggingConfigurationService configService,
-        IServiceChatDispatcher serviceChatDispatcher)
+        IServiceChatDispatcher serviceChatDispatcher,
+        IAppConfig appConfig)
     {
         _bot = bot ?? throw new ArgumentNullException(nameof(bot));
         _logger = logger ?? throw new ArgumentNullException(nameof(logger));
         _templates = templates ?? throw new ArgumentNullException(nameof(templates));
         _configService = configService ?? throw new ArgumentNullException(nameof(configService));
         _serviceChatDispatcher = serviceChatDispatcher ?? throw new ArgumentNullException(nameof(serviceChatDispatcher));
+        _appConfig = appConfig ?? throw new ArgumentNullException(nameof(appConfig));
     }
     
     /// <summary>
@@ -195,9 +198,9 @@ public class MessageService : IMessageService
     /// <summary>
     /// Проверяет, является ли группа исключением для рекламы VPN
     /// </summary>
-    private static bool IsNoAdGroup(long chatId)
+    private bool IsNoAdGroup(long chatId)
     {
-        return Config.NoVpnAdGroups.Contains(chatId);
+        return _appConfig.NoVpnAdGroups.Contains(chatId);
     }
     
     public async Task<Message?> ForwardToAdminWithNotificationAsync(Message originalMessage, AdminNotificationType type, NotificationData data, CancellationToken cancellationToken = default)
@@ -206,7 +209,7 @@ public class MessageService : IMessageService
         {
             // Пересылаем оригинальное сообщение
             var forward = await _bot.ForwardMessage(
-                new ChatId(Config.AdminChatId),
+                new ChatId(_appConfig.AdminChatId),
                 originalMessage.Chat.Id,
                 originalMessage.MessageId,
                 cancellationToken: cancellationToken
@@ -217,7 +220,7 @@ public class MessageService : IMessageService
             var message = _templates.FormatNotificationTemplate(template, data);
             
             var notification = await _bot.SendMessage(
-                Config.AdminChatId,
+                _appConfig.AdminChatId,
                 message,
                 parseMode: ParseMode.Markdown,
                 replyParameters: forward,
@@ -240,7 +243,7 @@ public class MessageService : IMessageService
         {
             // Пересылаем оригинальное сообщение
             var forward = await _bot.ForwardMessage(
-                new ChatId(Config.LogAdminChatId),
+                new ChatId(_appConfig.LogAdminChatId),
                 originalMessage.Chat.Id,
                 originalMessage.MessageId,
                 cancellationToken: cancellationToken
@@ -251,7 +254,7 @@ public class MessageService : IMessageService
             var message = _templates.FormatNotificationTemplate(template, data);
             
             var notification = await _bot.SendMessage(
-                Config.LogAdminChatId,
+                _appConfig.LogAdminChatId,
                 message,
                 parseMode: ParseMode.Markdown,
                 replyParameters: forward,
diff --git a/ClubDoorman/Worker.cs b/ClubDoorman/Worker.cs
index 1a50399..6beb718 100644
--- a/ClubDoorman/Worker.cs
+++ b/ClubDoorman/Worker.cs
@@ -26,7 +26,8 @@ internal sealed class Worker(
     IAiChecks aiChecks,
     IChatLinkFormatter chatLinkFormatter,
     ITelegramBotClientWrapper bot,
-    IMessageService messageService
+    IMessageService messageService,
+    IAppConfig appConfig
 ) : BackgroundService
 {
     // Классы CaptchaInfo и Stats перенесены в Models
@@ -45,6 +46,7 @@ internal sealed class Worker(
     private readonly IAiChecks _aiChecks = aiChecks;
     private readonly IChatLinkFormatter _chatLinkFormatter = chatLinkFormatter;
     private readonly IMessageService _messageService = messageService;
+    private readonly IAppConfig _appConfig = appConfig;
     private readonly GlobalStatsManager _globalStatsManager = new();
     private User _me = default!;
     
@@ -65,13 +67,9 @@ internal sealed class Worker(
         
         var whitelistVar = Environment.GetEnvironmentVariable("DOORMAN_WHITELIST");
         Console.WriteLine($"[DEBUG] DOORMAN_WHITELIST env var: '{whitelistVar}'");
-        Console.WriteLine($"[DEBUG] Loaded {Config.WhitelistChats.Count} whitelist groups: [{string.Join(", ", Config.WhitelistChats)}]");
-        Console.WriteLine($"[DEBUG] Private /start allowed: {Config.IsPrivateStartAllowed()}");
         
         var logChatVar = Environment.GetEnvironmentVariable("DOORMAN_LOG_ADMIN_CHAT");
         Console.WriteLine($"[DEBUG] DOORMAN_LOG_ADMIN_CHAT env var: '{logChatVar}'");
-        Console.WriteLine($"[DEBUG] Log admin chat ID: {Config.LogAdminChatId}");
-        Console.WriteLine($"[DEBUG] Using separate log chat: {Config.LogAdminChatId != Config.AdminChatId}");
         
         var testBlacklistVar = Environment.GetEnvironmentVariable("DOORMAN_TEST_BLACKLIST_IDS");
         Console.WriteLine($"[DEBUG] DOORMAN_TEST_BLACKLIST_IDS env var: '{testBlacklistVar}'");
