commit b70087809954eb605a2c8325284fdda3ec86aa7c
Author: Mikhail Stepanov <kpblcaoo@gmail.com>
Date:   Thu Jul 24 19:45:05 2025 +0300

    refactor: убрать дублирование API для CaptchaService и MessageService - использовать только Request объекты
    
    - Удалить старые методы CreateCaptchaAsync с параметрами
    - Удалить старые методы SendCaptchaMessageAsync с параметрами
    - Удалить старые методы SendErrorNotificationAsync с параметрами
    - Заменить вызовы на использование Request объектов
    - Обновить тесты MessageHandlerFakeTests для новых методов
    - Добавить using для ClubDoorman.Models.Requests
    
    Все основные тесты проходят, остались ошибки в тестах CaptchaService

diff --git a/ClubDoorman.Test/Unit/Handlers/MessageHandlerFakeTests.cs b/ClubDoorman.Test/Unit/Handlers/MessageHandlerFakeTests.cs
index c7f6e37..8bf567d 100644
--- a/ClubDoorman.Test/Unit/Handlers/MessageHandlerFakeTests.cs
+++ b/ClubDoorman.Test/Unit/Handlers/MessageHandlerFakeTests.cs
@@ -10,6 +10,7 @@ using Telegram.Bot;
 using Moq;
 using Microsoft.Extensions.Logging;
 using ClubDoorman.Models;
+using ClubDoorman.Models.Requests;
 using ClubDoorman.Handlers.Commands;
 
 namespace ClubDoorman.Test.Unit.Handlers;
@@ -114,7 +115,7 @@ public class MessageHandlerFakeTests
         // Assert
         // Проверяем, что была вызвана отправка капчи
         _factory.CaptchaServiceMock.Verify(
-            x => x.CreateCaptchaAsync(It.IsAny<Chat>(), It.IsAny<User>(), It.IsAny<Message>()),
+            x => x.CreateCaptchaAsync(It.IsAny<CreateCaptchaRequest>()),
             Times.Once);
     }
 
@@ -171,7 +172,7 @@ public class MessageHandlerFakeTests
         // Assert
         // Сервисные сообщения обрабатываются как новые участники
         _factory.CaptchaServiceMock.Verify(
-            x => x.CreateCaptchaAsync(It.IsAny<Chat>(), It.IsAny<User>(), It.IsAny<Message>()),
+            x => x.CreateCaptchaAsync(It.IsAny<CreateCaptchaRequest>()),
             Times.Once);
     }
 
diff --git a/ClubDoorman/Handlers/MessageHandler.cs b/ClubDoorman/Handlers/MessageHandler.cs
index af7b58b..ba0cdad 100644
--- a/ClubDoorman/Handlers/MessageHandler.cs
+++ b/ClubDoorman/Handlers/MessageHandler.cs
@@ -5,6 +5,7 @@ using ClubDoorman.Handlers.Commands;
 using ClubDoorman.Infrastructure;
 using ClubDoorman.Models;
 using ClubDoorman.Models.Notifications;
+using ClubDoorman.Models.Requests;
 using ClubDoorman.Services;
 using Microsoft.Extensions.DependencyInjection;
 using Telegram.Bot;
@@ -546,7 +547,8 @@ public class MessageHandler : IUpdateHandler
         }
 
         // Создаем капчу
-        var captchaInfo = await _captchaService.CreateCaptchaAsync(chat, user, userJoinMessage);
+        var request = new CreateCaptchaRequest(chat, user, userJoinMessage);
+        var captchaInfo = await _captchaService.CreateCaptchaAsync(request);
         if (captchaInfo == null)
         {
             _logger.LogInformation($"[NO_CAPTCHA] Капча не требуется для чата {chat.Id}");
diff --git a/ClubDoorman/Services/CaptchaService.cs b/ClubDoorman/Services/CaptchaService.cs
index 3f9b019..ae589f7 100644
--- a/ClubDoorman/Services/CaptchaService.cs
+++ b/ClubDoorman/Services/CaptchaService.cs
@@ -42,12 +42,6 @@ public class CaptchaService : ICaptchaService
     /// <param name="userJoinMessage">Сообщение о присоединении пользователя (опционально)</param>
     /// <returns>Информация о созданной капче или null, если капча отключена для чата</returns>
     /// <exception cref="ArgumentNullException">Если chat или user равны null</exception>
-    public async Task<CaptchaInfo?> CreateCaptchaAsync(Chat chat, User user, Message? userJoinMessage = null)
-    {
-        var request = new CreateCaptchaRequest(chat, user, userJoinMessage);
-        return await CreateCaptchaAsync(request);
-    }
-
     /// <summary>
     /// Создает капчу используя Request объект
     /// </summary>
@@ -110,13 +104,14 @@ public class CaptchaService : ICaptchaService
         Message captchaMessage;
         try
         {
-            captchaMessage = await _messageService.SendCaptchaMessageAsync(
+            var captchaRequest = new SendCaptchaMessageRequest(
                 request.Chat,
                 welcomeMessage,
                 replyParams,
                 new InlineKeyboardMarkup(keyboard),
-                cancellationToken: default
+                default
             );
+            captchaMessage = await _messageService.SendCaptchaMessageAsync(captchaRequest);
         }
         catch (Exception ex)
         {
diff --git a/ClubDoorman/Services/ICaptchaService.cs b/ClubDoorman/Services/ICaptchaService.cs
index aca4032..0a414ca 100644
--- a/ClubDoorman/Services/ICaptchaService.cs
+++ b/ClubDoorman/Services/ICaptchaService.cs
@@ -9,16 +9,6 @@ namespace ClubDoorman.Services;
 /// </summary>
 public interface ICaptchaService
 {
-    /// <summary>
-    /// Создает капчу для нового пользователя
-    /// </summary>
-    /// <param name="chat">Чат, в котором создается капча</param>
-    /// <param name="user">Пользователь, для которого создается капча</param>
-    /// <param name="userJoinMessage">Сообщение о присоединении пользователя (опционально)</param>
-    /// <returns>Информация о созданной капче или null, если капча отключена для чата</returns>
-    /// <exception cref="ArgumentNullException">Если chat или user равны null</exception>
-    Task<CaptchaInfo?> CreateCaptchaAsync(Chat chat, User user, Message? userJoinMessage = null);
-
     /// <summary>
     /// Создает капчу используя Request объект
     /// </summary>
diff --git a/ClubDoorman/Services/IMessageService.cs b/ClubDoorman/Services/IMessageService.cs
index 8afb79b..56796a0 100644
--- a/ClubDoorman/Services/IMessageService.cs
+++ b/ClubDoorman/Services/IMessageService.cs
@@ -35,11 +35,6 @@ public interface IMessageService
     /// </summary>
     Task<Message> SendWelcomeMessageAsync(SendWelcomeMessageRequest request);
 
-    /// <summary>
-    /// Отправляет сообщение капчи с кнопками
-    /// </summary>
-    Task<Message> SendCaptchaMessageAsync(Chat chat, string message, ReplyParameters? replyParameters, InlineKeyboardMarkup replyMarkup, CancellationToken cancellationToken = default);
-    
     /// <summary>
     /// Отправляет сообщение капчи используя Request объект
     /// </summary>
@@ -55,11 +50,6 @@ public interface IMessageService
     /// </summary>
     Task<Message?> ForwardToLogWithNotificationAsync(Message originalMessage, LogNotificationType type, NotificationData data, CancellationToken cancellationToken = default);
     
-    /// <summary>
-    /// Отправить уведомление об ошибке
-    /// </summary>
-    Task SendErrorNotificationAsync(Exception ex, string context, User? user = null, Chat? chat = null, CancellationToken cancellationToken = default);
-    
     /// <summary>
     /// Отправить уведомление об ошибке используя Request объект
     /// </summary>
diff --git a/ClubDoorman/Services/IntroFlowService.cs b/ClubDoorman/Services/IntroFlowService.cs
index f31dcc2..7aecfd0 100644
--- a/ClubDoorman/Services/IntroFlowService.cs
+++ b/ClubDoorman/Services/IntroFlowService.cs
@@ -103,14 +103,15 @@ public class IntroFlowService
         }
 
         // Создаем капчу через сервис
-        var captchaInfo = await _captchaService.CreateCaptchaAsync(chat, user, userJoinMessage);
+        var captchaRequest = new CreateCaptchaRequest(chat, user, userJoinMessage);
+        var captchaInfo = await _captchaService.CreateCaptchaAsync(captchaRequest);
         
         // Если капча отключена для этой группы, отправляем приветствие сразу
         if (captchaInfo == null)
         {
             _logger.LogInformation("[NO_CAPTCHA] Капча отключена для чата {ChatId} - отправляем приветствие сразу после проверок", chat.Id);
-            var request = new SendWelcomeMessageRequest(user, chat, "приветствие без капчи", cancellationToken);
-            await _messageService.SendWelcomeMessageAsync(request);
+            var welcomeRequest = new SendWelcomeMessageRequest(user, chat, "приветствие без капчи", cancellationToken);
+            await _messageService.SendWelcomeMessageAsync(welcomeRequest);
         }
         else
         {
diff --git a/ClubDoorman/Services/MessageService.cs b/ClubDoorman/Services/MessageService.cs
index c8d1967..6e3d481 100644
--- a/ClubDoorman/Services/MessageService.cs
+++ b/ClubDoorman/Services/MessageService.cs
@@ -268,16 +268,7 @@ public class MessageService : IMessageService
         }
     }
     
-    /// <summary>
-    /// Отправить уведомление об ошибке
-    /// </summary>
-    public async Task SendErrorNotificationAsync(Exception ex, string context, User? user = null, Chat? chat = null, CancellationToken cancellationToken = default)
-    {
-        var request = new SendErrorNotificationRequest(ex, context, user, chat, cancellationToken);
-        await SendErrorNotificationAsync(request);
-    }
-    
-    /// <summary>
+        /// <summary>
     /// Отправить уведомление об ошибке используя Request объект
     /// </summary>
     public async Task SendErrorNotificationAsync(SendErrorNotificationRequest request)
@@ -321,15 +312,6 @@ public class MessageService : IMessageService
         }
     }
     
-    /// <summary>
-    /// Отправляет сообщение капчи с кнопками
-    /// </summary>
-    public async Task<Message> SendCaptchaMessageAsync(Chat chat, string message, ReplyParameters? replyParameters, InlineKeyboardMarkup replyMarkup, CancellationToken cancellationToken = default)
-    {
-        var request = new SendCaptchaMessageRequest(chat, message, replyParameters, replyMarkup, cancellationToken);
-        return await SendCaptchaMessageAsync(request);
-    }
-    
     /// <summary>
     /// Отправляет сообщение капчи используя Request объект
     /// </summary>
