using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Caching;
using Polly;
using Polly.Retry;
using Telegram.Bot;
using Telegram.Bot.Types;
using tryAGI.OpenAI;

namespace ClubDoorman;

internal class AiChecks
{
    private readonly TelegramBotClient _bot;
    private readonly ILogger _logger;
    private readonly OpenAiClient? _api;
    private readonly JsonSerializerOptions _jsonOptions = new() { Converters = { new JsonStringEnumConverter() } };
    
    // Retry policy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
    private readonly ResiliencePipeline _retry = new ResiliencePipelineBuilder()
        .AddRetry(new RetryStrategyOptions() { Delay = TimeSpan.FromMilliseconds(50) })
        .Build();
    
    const string Model = "google/gemini-2.5-flash";
    
    public AiChecks(TelegramBotClient bot, ILogger logger)
    {
        _bot = bot;
        _logger = logger;
        _api = Config.OpenRouterApi == null ? null : CustomProviders.OpenRouter(Config.OpenRouterApi);
    }

    private static string CacheKey(long userId) => $"ai_profile_check:{userId}";

    /// <summary>
    /// –û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ
    /// </summary>
    public void MarkUserOkay(long userId)
    {
        var cacheItem = new CacheItem(CacheKey(userId), new SpamPhotoBio(new SpamProbability(), [], ""));
        var policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddDays(30) };
        MemoryCache.Default.Set(cacheItem, policy);
        _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π", userId);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è/—Å–ø–∞–º–∞
    /// </summary>
    public async ValueTask<SpamPhotoBio> GetAttentionBaitProbability(Telegram.Bot.Types.User user, Func<string, Task>? ifChanged = default)
    {
        if (_api == null)
        {
            _logger.LogDebug("OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ñ–∏–ª—è");
            return new SpamPhotoBio(new SpamProbability(), [], "");
        }

        var cached = MemoryCache.Default.Get(CacheKey(user.Id)) as SpamPhotoBio;
        if (cached != null)
        {
            _logger.LogDebug("–ù–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability}", user.Id, cached.SpamProbability.Probability);
            return cached;
        }

        var probability = new SpamProbability();
        var pic = Array.Empty<byte>();
        var nameBioUser = string.Empty;

        try
        {
            var userChat = await _bot.GetChat(user.Id);
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∏–æ –∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            if (userChat.Bio == null && userChat.LinkedChatId == null)
            {
                _logger.LogDebug("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –Ω–µ—Ç –±–∏–æ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞", user.Id);
                if (userChat.Photo != null)
                    return await GetEroticPhotoBaitProbability(user, userChat);
                
                // –ù–µ—Ç –Ω–∏ –±–∏–æ, –Ω–∏ —Ñ–æ—Ç–æ - —Å—á–∏—Ç–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
                var result = new SpamPhotoBio(new SpamProbability(), [], "");
                CacheResult(user.Id, result);
                return result;
            }

            _logger.LogDebug("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} —Å –ø–æ–º–æ—â—å—é AI", user.Id);
            
            var sb = new StringBuilder();
            sb.Append($"–ò–º—è: {Utils.FullName(user)}");
            if (user.Username != null)
                sb.Append($"\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.Username}");
            if (userChat.Bio != null)
                sb.Append($"\n–û–ø–∏—Å–∞–Ω–∏–µ: {userChat.Bio}");

            nameBioUser = sb.ToString();
            byte[]? photoBytes = null;
            ChatCompletionRequestUserMessage? photoMessage = null;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (userChat.Photo != null)
            {
                using var ms = new MemoryStream();
                await _bot.GetInfoAndDownloadFile(userChat.Photo.BigFileId, ms);
                photoBytes = ms.ToArray();
                pic = photoBytes;
                photoMessage = photoBytes.AsUserMessage(mimeType: "image/jpg");
                sb.Append($"\n–§–æ—Ç–æ: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ");
            }

            var prompt = $"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç Telegram-–ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ ¬´–ø—Ä–æ–¥–∞–∂–Ω—ã–π¬ª –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å —Ü–µ–ª—å—é –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è. 
                –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1. 
                
                –û—Å–æ–±–µ–Ω–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–∑–Ω–∞–∫–∏:
                ‚Ä¢ —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (—ç–º–æ–¥–∑–∏ —Å –¥–≤–æ–π–Ω—ã–º —Å–º—ã—Å–ª–æ–º - üí¶, üíã, üëÑ, üçë, üçÜ, üçí, üçì, üçå –∏ –ø—Ä–æ—á–∏—Ö –≤ –∏–º–µ–Ω–∏, –ª—é–±–æ–π –Ω–∞–º—ë–∫ –Ω–∞ —ç—Ä–æ—Ç–∏–∫—É –∏ –ø–æ—Ä–Ω–æ, –≥–æ–ª—ã–µ —Ñ–æ—Ç–æ)
                ‚Ä¢ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö, –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, –∞—Ä–±–∏—Ç—Ä–∞–∂–µ, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞
                ‚Ä¢ —Å—Å—ã–ª–∫–∏ –Ω–∞ OnlyFans, —Å–æ—Ü—Å–µ—Ç–∏
                ‚Ä¢ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π —É–∫–∞–∑–∞–Ω –ø—Ä—è–º–æ –≤ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: HR, SMM, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥)
                
                –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:
                {nameBioUser}
                """;

            var messages = new List<ChatCompletionRequestMessage>
            {
                "–¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Telegram-–≥—Ä—É–ø–ø—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–º–æ-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ø–ª–∞—Ç–Ω—ã–º/—ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º".AsSystemMessage(),
                prompt.AsUserMessage(),
            };
            
            if (photoMessage != null)
                messages.Add(photoMessage);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if (userChat.LinkedChatId != null)
            {
                try
                {
                    var linkedChat = await _bot.GetChat(userChat.LinkedChatId.Value);
                    var info = new StringBuilder();
                    info.Append($"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {linkedChat.Title}");
                    if (linkedChat.Username != null)
                        info.Append($"\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{linkedChat.Username}");
                    if (linkedChat.Description != null)
                        info.Append($"\n–û–ø–∏—Å–∞–Ω–∏–µ: {linkedChat.Description}");
                    
                    messages.Add(info.ToString().AsUserMessage());
                }
                catch (Exception e)
                {
                    _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ {ChannelId}", userChat.LinkedChatId);
                }
            }

            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );

            if (response.Value1 != null)
            {
                probability = response.Value1;
                _logger.LogInformation("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability} - {Reason}", 
                    user.Id, probability.Probability, probability.Reason);
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }

        var finalResult = new SpamPhotoBio(probability, pic, nameBioUser);
        CacheResult(user.Id, finalResult);
        return finalResult;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    /// </summary>
    private async ValueTask<SpamPhotoBio> GetEroticPhotoBaitProbability(Telegram.Bot.Types.User user, ChatFullInfo userChat)
    {
        if (_api == null)
            return new SpamPhotoBio(new SpamProbability(), [], "");

        var probability = new SpamProbability();
        var pic = Array.Empty<byte>();

        try
        {
            var photo = userChat.Photo!;
            using var ms = new MemoryStream();
            await _bot.GetInfoAndDownloadFile(photo.BigFileId, ms);
            var photoBytes = ms.ToArray();
            pic = photoBytes;
            
            var photoMessage = photoBytes.AsUserMessage(mimeType: "image/jpg");
            var prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–ª–∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω–æ. –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1.";
            
            var messages = new List<ChatCompletionRequestMessage> 
            { 
                prompt.AsUserMessage(), 
                photoMessage 
            };
            
            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );
            
            if (response.Value1 != null)
            {
                probability = response.Value1;
                _logger.LogInformation("AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability}", 
                    user.Id, probability.Probability);
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }

        return new SpamPhotoBio(probability, pic, Utils.FullName(user));
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞ —Å –ø–æ–º–æ—â—å—é AI
    /// </summary>
    public async ValueTask<SpamProbability> GetSpamProbability(Message message)
    {
        if (_api == null)
            return new SpamProbability();

        try
        {
            var text = message.Text ?? message.Caption ?? "";
            if (string.IsNullOrWhiteSpace(text))
                return new SpamProbability();

            var prompt = $"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞. –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1.
                
                –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞:
                ‚Ä¢ –†–µ–∫–ª–∞–º–∞ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
                ‚Ä¢ –ü—Ä–æ—Å—å–±—ã –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ —Å—Å—ã–ª–∫–∞–º
                ‚Ä¢ –ù–∞–≤—è–∑—á–∏–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                ‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
                
                –°–æ–æ–±—â–µ–Ω–∏–µ: {text}
                """;

            var messages = new List<ChatCompletionRequestMessage>
            {
                "–¢—ã ‚Äî –∞–Ω—Ç–∏—Å–ø–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞.".AsSystemMessage(),
                prompt.AsUserMessage()
            };

            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );

            if (response.Value1 != null)
            {
                _logger.LogDebug("AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {Probability} - {Reason}", 
                    response.Value1.Probability, response.Value1.Reason);
                return response.Value1;
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }

        return new SpamProbability();
    }

    private void CacheResult(long userId, SpamPhotoBio result)
    {
        var cacheItem = new CacheItem(CacheKey(userId), result);
        var policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(24) };
        MemoryCache.Default.Set(cacheItem, policy);
    }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
internal class SpamProbability
{
    public double Probability { get; set; }
    public string Reason { get; set; } = "";
}

internal sealed record SpamPhotoBio(SpamProbability SpamProbability, byte[] Photo, string NameBio); 