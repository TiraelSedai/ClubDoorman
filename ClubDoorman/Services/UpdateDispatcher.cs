using ClubDoorman.Handlers;
using Telegram.Bot.Types;

namespace ClubDoorman.Services;

/// <summary>
/// –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
/// </summary>
public class UpdateDispatcher : IUpdateDispatcher
{
    private readonly IEnumerable<IUpdateHandler> _updateHandlers;
    private readonly ILogger<UpdateDispatcher> _logger;

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    /// </summary>
    /// <param name="updateHandlers">–ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</param>
    /// <param name="logger">–õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π</param>
    /// <exception cref="ArgumentNullException">–ï—Å–ª–∏ updateHandlers –∏–ª–∏ logger —Ä–∞–≤–Ω—ã null</exception>
    public UpdateDispatcher(
        IEnumerable<IUpdateHandler> updateHandlers,
        ILogger<UpdateDispatcher> logger)
    {
        _updateHandlers = updateHandlers ?? throw new ArgumentNullException(nameof(updateHandlers));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
    /// </summary>
    /// <param name="update">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</param>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
    /// <exception cref="ArgumentNullException">–ï—Å–ª–∏ update —Ä–∞–≤–µ–Ω null</exception>
    public async Task DispatchAsync(Update update, CancellationToken cancellationToken = default)
    {
        if (update == null) throw new ArgumentNullException(nameof(update));

        try
        {
            _logger.LogDebug("üöÄ Dispatcher –ø–æ–ª—É—á–∏–ª update: Message={Msg}, Callback={CB}, ChatMember={CM}", 
                update.Message != null, update.CallbackQuery != null, update.ChatMember != null);
                
            // ARCHITECTURE - Consider if parallel processing or early termination is needed
            foreach (var handler in _updateHandlers)
            {
                if (handler.CanHandle(update))
                {
                    _logger.LogDebug("‚úÖ Handler {Type} –ø—Ä–∏–Ω—è–ª update", handler.GetType().Name);
                    await handler.HandleAsync(update, cancellationToken);
                }
                else
                {
                    _logger.LogDebug("‚ùå Handler {Type} –æ—Ç–∫–ª–æ–Ω–∏–ª update", handler.GetType().Name);
                }
            }
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {UpdateType}", update.Type);
            throw;
        }
    }
} 