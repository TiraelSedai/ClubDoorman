using ClubDoorman.Handlers;
using Telegram.Bot.Types;

namespace ClubDoorman.Services;

/// <summary>
/// –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
/// </summary>
public class UpdateDispatcher : IUpdateDispatcher
{
    private readonly IEnumerable<IUpdateHandler> _updateHandlers;
    private readonly ILogger<UpdateDispatcher> _logger;

    public UpdateDispatcher(
        IEnumerable<IUpdateHandler> updateHandlers,
        ILogger<UpdateDispatcher> logger)
    {
        _updateHandlers = updateHandlers;
        _logger = logger;
    }

    public async Task DispatchAsync(Update update, CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogDebug("üöÄ Dispatcher –ø–æ–ª—É—á–∏–ª update: Message={Msg}, Callback={CB}, ChatMember={CM}", 
                update.Message != null, update.CallbackQuery != null, update.ChatMember != null);
                
            foreach (var handler in _updateHandlers)
            {
                if (handler.CanHandle(update))
                {
                    _logger.LogDebug("‚úÖ Handler {Type} –ø—Ä–∏–Ω—è–ª update", handler.GetType().Name);
                    await handler.HandleAsync(update, cancellationToken);
                }
                else
                {
                    _logger.LogDebug("‚ùå Handler {Type} –æ—Ç–∫–ª–æ–Ω–∏–ª update", handler.GetType().Name);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {UpdateType}", update.Type);
        }
    }
} 