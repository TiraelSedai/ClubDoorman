using ClubDoorman.Infrastructure;
using Telegram.Bot.Types;

namespace ClubDoorman.Services;

/// <summary>
/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–ª–æ—É
/// </summary>
public class UserFlowLogger : IUserFlowLogger
{
    private readonly ILogger<UserFlowLogger> _logger;

    public UserFlowLogger(ILogger<UserFlowLogger> logger)
    {
        _logger = logger;
    }

    public void LogUserJoined(User user, Chat chat, string? joinReason = null)
    {
        var reasonText = !string.IsNullOrEmpty(joinReason) ? $" ({joinReason})" : "";
        _logger.LogInformation("üö™ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í–û–®–ï–õ: {User} (id={UserId}) –≤ —á–∞—Ç '{ChatTitle}' (id={ChatId}){ReasonText}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reasonText);
    }

    public void LogCaptchaShown(User user, Chat chat)
    {
        _logger.LogInformation("üß© –ö–ê–ü–ß–ê –ü–û–ö–ê–ó–ê–ù–ê: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogCaptchaPassed(User user, Chat chat)
    {
        _logger.LogInformation("‚úÖ –ö–ê–ü–ß–ê –ü–†–û–ô–î–ï–ù–ê: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogCaptchaFailed(User user, Chat chat)
    {
        _logger.LogInformation("‚ùå –ö–ê–ü–ß–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogWelcomeShown(User user, Chat chat)
    {
        _logger.LogInformation("üëã –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ü–û–ö–ê–ó–ê–ù–û: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogWelcomeRemoved(User user, Chat chat)
    {
        _logger.LogInformation("üóëÔ∏è –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –£–î–ê–õ–ï–ù–û: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogFirstMessage(User user, Chat chat, string messageText)
    {
        var truncatedText = messageText.Length > 100 ? messageText.Substring(0, 100) + "..." : messageText;
        _logger.LogInformation("üìù –ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}): {MessageText}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, truncatedText);
    }

    public void LogModerationStarted(User user, Chat chat, string messageText)
    {
        var truncatedText = messageText.Length > 100 ? messageText.Substring(0, 100) + "..." : messageText;
        _logger.LogInformation("üîç –ú–û–î–ï–†–ê–¶–ò–Ø –ù–ê–ß–ê–¢–ê: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}): {MessageText}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, truncatedText);
    }

    public void LogSpamListCheck(User user, Chat chat, bool passed, string? reason = null)
    {
        var status = passed ? "‚úÖ –ü–†–û–ô–î–ï–ù–û" : "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û";
        var reasonText = !string.IsNullOrEmpty(reason) ? $" - {reason}" : "";
        _logger.LogInformation("üìã –°–ü–ê–ú-–°–ü–ò–°–ö–ò {Status}: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}){ReasonText}", 
            status, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reasonText);
    }

    public void LogStopWordsCheck(User user, Chat chat, bool passed, string? reason = null)
    {
        var status = passed ? "‚úÖ –ü–†–û–ô–î–ï–ù–û" : "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û";
        var reasonText = !string.IsNullOrEmpty(reason) ? $" - {reason}" : "";
        _logger.LogInformation("üö´ –°–¢–û–ü-–°–õ–û–í–ê {Status}: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}){ReasonText}", 
            status, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reasonText);
    }

    public void LogKnownSpamCheck(User user, Chat chat, bool passed, string? reason = null)
    {
        var status = passed ? "‚úÖ –ü–†–û–ô–î–ï–ù–û" : "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û";
        var reasonText = !string.IsNullOrEmpty(reason) ? $" - {reason}" : "";
        _logger.LogInformation("üéØ –ò–ó–í–ï–°–¢–ù–´–ô –°–ü–ê–ú {Status}: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}){ReasonText}", 
            status, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reasonText);
    }

    public void LogMlAnalysis(User user, Chat chat, bool isSpam, double score, string? reason = null)
    {
        var status = isSpam ? "‚ùå –°–ü–ê–ú" : "‚úÖ –ù–ï –°–ü–ê–ú";
        var reasonText = !string.IsNullOrEmpty(reason) ? $" - {reason}" : "";
        _logger.LogInformation("ü§ñ ML-–ê–ù–ê–õ–ò–ó {Status} (—Å–∫–æ—Ä {Score:F3}): {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}){ReasonText}", 
            status, score, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reasonText);
    }

    public void LogModerationResult(User user, Chat chat, string action, string reason, double? confidence = null)
    {
        var confidenceText = confidence.HasValue ? $" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence.Value:F3})" : "";
        _logger.LogInformation("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–û–î–ï–†–ê–¶–ò–ò: {Action} - {Reason}{ConfidenceText} | {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
            action, reason, confidenceText, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id);
    }

    public void LogUserApproved(User user, Chat chat, string reason)
    {
        _logger.LogInformation("‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –û–î–û–ë–†–ï–ù: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogUserBanned(User user, Chat chat, string reason)
    {
        _logger.LogInformation("üö´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–ê–ù–ï–ù: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogUserRestricted(User user, Chat chat, string reason, TimeSpan? duration = null)
    {
        var durationText = duration.HasValue ? $" –Ω–∞ {duration.Value.TotalMinutes:F0} –º–∏–Ω—É—Ç" : "";
        _logger.LogInformation("‚ö†Ô∏è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –û–ì–†–ê–ù–ò–ß–ï–ù{durationText}: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            durationText, Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogUserRemovedFromApproved(User user, Chat chat, string reason)
    {
        _logger.LogInformation("üóëÔ∏è –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù –ò–ó –û–î–û–ë–†–ï–ù–ù–´–•: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogUserAddedToApproved(User user, Chat chat, string reason)
    {
        _logger.LogInformation("‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–ë–ê–í–õ–ï–ù –í –û–î–û–ë–†–ï–ù–ù–´–ï: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogUserMarkedAsSuspicious(User user, Chat chat, double mimicryScore, List<string> firstMessages)
    {
        var messagesText = string.Join(", ", firstMessages.Select(m => $"\"{m}\""));
        _logger.LogInformation("üé≠ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–û–ú–ï–ß–ï–ù –ö–ê–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - —Å–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: {Score:F2}, –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: [{Messages}]", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, mimicryScore, messagesText);
    }

    public void LogUserRemovedFromSuspicious(User user, Chat chat, string reason)
    {
        _logger.LogInformation("üîì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù –ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–•: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, reason);
    }

    public void LogAiProfileAnalysis(User user, Chat chat, double spamProbability, string reason)
    {
        _logger.LogInformation("ü§ñ AI –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø: {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {Probability:F2}, –ø—Ä–∏—á–∏–Ω–∞: {Reason}", 
            Utils.FullName(user), user.Id, chat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat.Id, spamProbability, reason);
    }

    public void LogChannelMessage(Chat senderChat, Chat targetChat, string messageText)
    {
        var truncatedText = messageText.Length > 100 ? messageText.Substring(0, 100) + "..." : messageText;
        _logger.LogInformation("üì¢ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ö–ê–ù–ê–õ–ê: –∫–∞–Ω–∞–ª '{SenderChat}' (id={SenderChatId}) –≤ —á–∞—Ç–µ '{TargetChat}' (id={TargetChatId}): {MessageText}", 
            senderChat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", senderChat.Id, targetChat.Title ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", targetChat.Id, truncatedText);
    }

    public void LogSystemError(Exception exception, string context, User? user = null, Chat? chat = null)
    {
        var userText = user != null ? $" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Utils.FullName(user)} (id={user.Id})" : "";
        var chatText = chat != null ? $" –≤ —á–∞—Ç–µ '{chat.Title}' (id={chat.Id})" : "";
        _logger.LogError(exception, "üö® –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê{UserText}{ChatText} - {Context}", userText, chatText, context);
    }
} 