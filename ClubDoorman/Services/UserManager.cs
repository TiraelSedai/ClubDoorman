using System.Collections.Concurrent;
using System.Globalization;
using System.Net.Http.Json;
using ClubDoorman.Infrastructure;

namespace ClubDoorman.Services;

internal sealed class UserManager : IUserManager
{
    private readonly ILogger<UserManager> _logger;
    private readonly ApprovedUsersStorage _approvedUsersStorage;
    private readonly IAppConfig _appConfig;
    private readonly ConcurrentDictionary<long, byte> _banlist = [];
    private readonly SemaphoreSlim _semaphore = new(1);
    private readonly HttpClient _clubHttpClient = new();
    private readonly HttpClient _httpClient = new();
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DOORMAN_TEST_BLACKLIST_IDS
    private static readonly HashSet<long> _testBlacklist = LoadTestBlacklist();

    public UserManager(ILogger<UserManager> logger, ApprovedUsersStorage approvedUsersStorage, IAppConfig appConfig)
    {
        _logger = logger;
        _approvedUsersStorage = approvedUsersStorage;
        _appConfig = appConfig;
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UserManager
        Console.WriteLine($"[DEBUG] UserManager —Å–æ–∑–¥–∞–Ω: —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {_testBlacklist.Count} ID(s): [{string.Join(", ", _testBlacklist)}]");
        
        if (appConfig.ClubServiceToken == null)
            _logger.LogWarning("DOORMAN_CLUB_SERVICE_TOKEN variable is not set, additional club checks disabled");
        else
            _clubHttpClient.DefaultRequestHeaders.Add("X-Service-Token", appConfig.ClubServiceToken);
    }

    public async Task RefreshBanlist()
    {
        try
        {
            await _semaphore.WaitAsync();
            try
            {
                var httpClient = new HttpClient();
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
                var banlist = await httpClient.GetFromJsonAsync<long[]>("https://lols.bot/spam/banlist.json", cts.Token);
                
                if (banlist != null && banlist.Length > 0)
                {
                    var oldCount = _banlist.Count;
                    
                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
                    foreach (var key in _banlist.Keys.ToArray())
                        _banlist.TryRemove(key, out _);
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: 1 = banned
                    foreach (var id in banlist)
                        _banlist.TryAdd(id, 1);
                    
                    _logger.LogInformation("–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–Ω–ª–∏—Å—Ç –∏–∑ lols.bot: –±—ã–ª–æ {OldCount}, —Å—Ç–∞–ª–æ {NewCount} –∑–∞–ø–∏—Å–µ–π", oldCount, _banlist.Count);
                }
                else
                {
                    _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –±–∞–Ω–ª–∏—Å—Ç –æ—Ç lols.bot –∏–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª null");
                }
            }
            finally
            {
                _semaphore.Release();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–ª–∏—Å—Ç –∏–∑ lols.bot");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    /// </summary>
    /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
    /// <param name="groupId">ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)</param>
    /// <returns>true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω</returns>
    public bool Approved(long userId, long? groupId = null)
    {
        return _approvedUsersStorage.IsApproved(userId, groupId);
    }

    /// <summary>
    /// –û–¥–æ–±—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    /// </summary>
    /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
    /// <param name="groupId">ID –≥—Ä—É–ø–ø—ã (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)</param>
    public async ValueTask Approve(long userId, long? groupId = null)
    {
        if (Config.GlobalApprovalMode)
        {
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –æ–¥–æ–±—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
            _approvedUsersStorage.ApproveUserGlobally(userId);
        }
        else
        {
            // –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º: –æ–¥–æ–±—Ä—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
            if (groupId.HasValue)
            {
                _approvedUsersStorage.ApproveUserInGroup(userId, groupId.Value);
            }
            else
            {
                // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ–¥–æ–±—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ fallback
                _approvedUsersStorage.ApproveUserGlobally(userId);
            }
        }
    }

    /// <summary>
    /// –£–¥–∞–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
    /// <param name="groupId">ID –≥—Ä—É–ø–ø—ã (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è)</param>
    /// <param name="removeAll">–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
    /// <returns>true, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ</returns>
    public bool RemoveApproval(long userId, long? groupId = null, bool removeAll = false)
    {
        try
        {
            if (removeAll)
            {
                return _approvedUsersStorage.RemoveAllApprovals(userId);
            }
            
            if (groupId.HasValue)
            {
                // –£–¥–∞–ª—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
                return _approvedUsersStorage.RemoveGroupApproval(userId, groupId.Value);
            }
            else
            {
                // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                return _approvedUsersStorage.RemoveGlobalApproval(userId);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public (bool isGlobal, Dictionary<long, GroupApprovalInfo> groupApprovals) GetApprovalInfo(long userId)
    {
        var isGlobal = _approvedUsersStorage.IsGloballyApproved(userId);
        var groupApprovals = _approvedUsersStorage.GetUserGroupApprovals(userId);
        return (isGlobal, groupApprovals);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏–π
    /// </summary>
    public (int globalCount, int groupCount, int totalGroupApprovals) GetApprovalStats()
    {
        return _approvedUsersStorage.GetApprovalStats();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–ª–∏—Å—Ç–µ —Å–ø–∞–º–µ—Ä–æ–≤.
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω–ª–∏—Å—Ç –∏–∑ lols.bot –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤.
    /// </summary>
    /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <returns>true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–ª–∏—Å—Ç–µ, false –µ—Å–ª–∏ –Ω–µ—Ç</returns>
    public async ValueTask<bool> InBanlist(long userId)
    {
        Console.WriteLine($"[DEBUG] UserManager.InBanlist: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId} (—Ç–µ—Å—Ç–æ–≤—ã—Ö ID: {_testBlacklist.Count})");
        _logger.LogDebug("InBanlist: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} (—Ç–µ—Å—Ç–æ–≤—ã—Ö ID: {TestCount})", userId, _testBlacklist.Count);
        
        // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç
        if (_testBlacklist.Contains(userId))
        {
            Console.WriteLine($"[DEBUG] üéØ –ù–ê–ô–î–ï–ù –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –±–ª—ç–∫–ª–∏—Å—Ç–µ: {userId}");
            _logger.LogWarning("üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –Ω–∞–π–¥–µ–Ω –≤ –¢–ï–°–¢–û–í–û–ú –±–ª—ç–∫–ª–∏—Å—Ç–µ", userId);
            return true;
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–Ω–ª–∏—Å—Ç–∞
        if (_banlist.TryGetValue(userId, out var cachedResult))
        {
            var isBanned = cachedResult == 1;
            _logger.LogDebug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {Status}", userId, isBanned ? "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" : "–ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
            return isBanned; // 1 = banned, 0 = not banned
        }
        
        // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º –±–∞–Ω–ª–∏—Å—Ç–µ - —Å—á–∏—Ç–∞–µ–º –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∫—ç—à–∏—Ä—É–µ–º
        _banlist.TryAdd(userId, 0); // 0 = not banned
        _logger.LogDebug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ù–ï –≤ –±–∞–Ω–ª–∏—Å—Ç–µ lols.bot, –∫—ç—à–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ", userId);
        return false;
    }

    public async ValueTask<string?> GetClubUsername(long userId)
    {
        if (_appConfig.ClubServiceToken == null)
            return null;
        var url = $"{_appConfig.ClubUrl}user/by_telegram_id/{userId}.json";
        try
        {
            using var cts = new CancellationTokenSource();
            cts.CancelAfter(TimeSpan.FromSeconds(5));
            var get = await _clubHttpClient.GetAsync(url, cts.Token);
            
            if (!get.IsSuccessStatusCode)
            {
                _logger.LogWarning("GetClubUsername: HTTP {StatusCode} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", get.StatusCode, userId);
                return null;
            }
            
            var content = await get.Content.ReadAsStringAsync(cts.Token);
            if (string.IsNullOrWhiteSpace(content) || !content.TrimStart().StartsWith("{"))
            {
                _logger.LogWarning("GetClubUsername: –Ω–µ JSON –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: '{Content}'", userId, content?.Length > 100 ? content.Substring(0, 100) + "..." : content);
                return null;
            }
            
            var response = await get.Content.ReadFromJsonAsync<ClubByTgIdResponse>(cancellationToken: cts.Token);
            var fullName = response?.user?.full_name;
            if (!string.IsNullOrEmpty(fullName))
                await Approve(userId); // –û–¥–æ–±—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–ª—É–±–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return fullName;
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "GetClubUsername –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", userId);
            return null;
        }
    }

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning disable IDE1006 // Naming Styles

    private record LolsBotApiResponse(long user_id, int? offenses, bool banned, bool ok, string? when, float? spam_factor, bool? scammer);

    internal class ClubByTgIdResponse
    {
        public Error? error { get; set; }
        public User? user { get; set; }
    }

    internal class Error
    {
        public string code { get; set; }
        public Data data { get; set; }
        public object message { get; set; }
        public string title { get; set; }
    }

    internal class Data { }

    internal class User
    {
        public string avatar { get; set; }
        public string bio { get; set; }
        public string city { get; set; }
        public string company { get; set; }
        public string country { get; set; }
        public DateTime created_at { get; set; }
        public string? full_name { get; set; }
        public string id { get; set; }
        public bool is_active_member { get; set; }
        public DateTime membership_expires_at { get; set; }
        public DateTime membership_started_at { get; set; }
        public string moderation_status { get; set; }
        public string payment_status { get; set; }
        public string position { get; set; }
        public string slug { get; set; }
        public int upvotes { get; set; }
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DOORMAN_TEST_BLACKLIST_IDS
    /// –§–æ—Ä–º–∞—Ç: "123456,789012,345678" (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    /// </summary>
    private static HashSet<long> LoadTestBlacklist()
    {
        var testIds = Environment.GetEnvironmentVariable("DOORMAN_TEST_BLACKLIST_IDS");
        if (string.IsNullOrWhiteSpace(testIds))
        {
            Console.WriteLine("[DEBUG] DOORMAN_TEST_BLACKLIST_IDS –Ω–µ –∑–∞–¥–∞–Ω–∞ - —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç –ø—É—Å—Ç–æ–π");
            return [];
        }

        var result = new HashSet<long>();
        var ids = testIds.Split(',', StringSplitOptions.RemoveEmptyEntries);
        
        foreach (var idStr in ids)
        {
            if (long.TryParse(idStr.Trim(), out var id))
            {
                result.Add(id);
            }
            else
            {
                Console.WriteLine($"[WARNING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ DOORMAN_TEST_BLACKLIST_IDS: '{idStr}'");
            }
        }
        
        Console.WriteLine($"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª—ç–∫–ª–∏—Å—Ç: {result.Count} ID(s) [{string.Join(", ", result)}]");
        return result;
    }

#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
#pragma warning restore IDE1006 // Naming Styles
} 