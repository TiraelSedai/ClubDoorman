using ClubDoorman.Infrastructure;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Models.Requests;
using ClubDoorman.Models.Logging;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Runtime.Caching;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
/// </summary>
public class MessageService : IMessageService
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly ILogger<MessageService> _logger;
    private readonly MessageTemplates _templates;
    private readonly ILoggingConfigurationService _configService;
    private readonly IServiceChatDispatcher _serviceChatDispatcher;
    
    public MessageService(
        ITelegramBotClientWrapper bot,
        ILogger<MessageService> logger,
        MessageTemplates templates,
        ILoggingConfigurationService configService,
        IServiceChatDispatcher serviceChatDispatcher)
    {
        _bot = bot ?? throw new ArgumentNullException(nameof(bot));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _templates = templates ?? throw new ArgumentNullException(nameof(templates));
        _configService = configService ?? throw new ArgumentNullException(nameof(configService));
        _serviceChatDispatcher = serviceChatDispatcher ?? throw new ArgumentNullException(nameof(serviceChatDispatcher));
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    /// </summary>
    public async Task SendAdminNotificationAsync(AdminNotificationType type, NotificationData data, CancellationToken cancellationToken = default)
    {
        try
        {
            await _serviceChatDispatcher.SendToAdminChatAsync(data, cancellationToken);
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç —Ç–∏–ø–∞ {Type}", type);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç —Ç–∏–ø–∞ {Type}", type);
            throw;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç
    /// </summary>
    public async Task SendLogNotificationAsync(LogNotificationType type, NotificationData data, CancellationToken cancellationToken = default)
    {
        try
        {
            await _serviceChatDispatcher.SendToLogChatAsync(data, cancellationToken);
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç —Ç–∏–ø–∞ {Type}", type);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-—á–∞—Ç —Ç–∏–ø–∞ {Type}", type);
            throw;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    /// </summary>
    public async Task SendUserNotificationAsync(User user, Chat chat, UserNotificationType type, object data, CancellationToken cancellationToken = default)
    {
        try
        {
            var template = _templates.GetUserTemplate(type);
            string message;
            
            // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è NotificationData, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormatNotificationTemplate
            if (data is NotificationData notificationData)
            {
                message = _templates.FormatNotificationTemplate(template, notificationData);
            }
            else
            {
                message = _templates.FormatTemplate(template, data);
            }
            
            await _bot.SendMessage(
                chat.Id,
                message,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ —á–∞—Ç–µ {ChatId} —Ç–∏–ø–∞ {Type}", user.Id, chat.Id, type);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ —á–∞—Ç–µ {ChatId} —Ç–∏–ø–∞ {Type}", user.Id, chat.Id, type);
            throw;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    public async Task<Message> SendUserNotificationWithReplyAsync(User user, Chat chat, UserNotificationType type, object data, CancellationToken cancellationToken = default)
    {
        try
        {
            var template = _templates.GetUserTemplate(type);
            string message;
            
            // –ï—Å–ª–∏ data —è–≤–ª—è–µ—Ç—Å—è NotificationData, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormatNotificationTemplate
            if (data is NotificationData notificationData)
            {
                message = _templates.FormatNotificationTemplate(template, notificationData);
            }
            else
            {
                message = _templates.FormatTemplate(template, data);
            }
            
            var sent = await _bot.SendMessage(
                chat.Id,
                message,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ —á–∞—Ç–µ {ChatId} —Ç–∏–ø–∞ {Type}", user.Id, chat.Id, type);
            return sent;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–ø–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ —á–∞—Ç–µ {ChatId} —Ç–∏–ø–∞ {Type}", user.Id, chat.Id, type);
            throw;
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è Request –æ–±—ä–µ–∫—Ç
    /// </summary>
    public async Task<Message> SendWelcomeMessageAsync(SendWelcomeMessageRequest request)
    {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ CallbackQueryHandler)
        var displayName = !string.IsNullOrEmpty(request.User.FirstName)
            ? System.Net.WebUtility.HtmlEncode(Utils.FullName(request.User))
            : (!string.IsNullOrEmpty(request.User.Username) ? "@" + request.User.Username : "–≥–æ—Å—Ç—å");
        
        var mention = $"<a href=\"tg://user?id={request.User.Id}\">{displayName}</a>";
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö)
        var isNoAdGroup = IsNoAdGroup(request.Chat.Id);
        var vpnAd = isNoAdGroup ? "" : "\n\n\nüìç <b>–ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã</b> \n <i>...</i>";
        
        string greetMsg;
        string mediaWarning;
        if (ChatSettingsManager.GetChatType(request.Chat.Id) == "announcement")
        {
            mediaWarning = "";
            greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏ –∏ —Å–ø–∞–º–æ–º –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°!{vpnAd}";
        }
        else
        {
            mediaWarning = Config.IsMediaFilteringDisabledForChat(request.Chat.Id) ? ", —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã" : ", –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã";
            greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —ç–º–æ–¥–∑–∏{mediaWarning} –∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã ‚Äî –æ–Ω–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°!{vpnAd}";
        }

        var captchaWelcomeData = new CaptchaWelcomeNotificationData(
            request.User, request.Chat, request.Reason, 0, mediaWarning, vpnAd);
        var sent = await SendUserNotificationWithReplyAsync(
            request.User, request.Chat, UserNotificationType.CaptchaWelcome, captchaWelcomeData, request.CancellationToken);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(20), request.CancellationToken);
                await _bot.DeleteMessage(request.Chat.Id, sent.MessageId, cancellationToken: request.CancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        }, request.CancellationToken);

        return sent;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–ª—è —Ä–µ–∫–ª–∞–º—ã VPN
    /// </summary>
    private static bool IsNoAdGroup(long chatId)
    {
        return Config.NoVpnAdGroups.Contains(chatId);
    }
    
    public async Task<Message?> ForwardToAdminWithNotificationAsync(Message originalMessage, AdminNotificationType type, NotificationData data, CancellationToken cancellationToken = default)
    {
        try
        {
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var forward = await _bot.ForwardMessage(
                new ChatId(Config.AdminChatId),
                originalMessage.Chat.Id,
                originalMessage.MessageId,
                cancellationToken: cancellationToken
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º
            var template = _templates.GetAdminTemplate(type);
            var message = _templates.FormatNotificationTemplate(template, data);
            
            var notification = await _bot.SendMessage(
                Config.AdminChatId,
                message,
                parseMode: ParseMode.Markdown,
                replyParameters: forward,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ {Type}", type);
            return notification;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ {Type}", type);
            return null;
        }
    }
    
    public async Task<Message?> ForwardToLogWithNotificationAsync(Message originalMessage, LogNotificationType type, NotificationData data, CancellationToken cancellationToken = default)
    {
        try
        {
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var forward = await _bot.ForwardMessage(
                new ChatId(Config.LogAdminChatId),
                originalMessage.Chat.Id,
                originalMessage.MessageId,
                cancellationToken: cancellationToken
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–ø–ª–∞–µ–º
            var template = _templates.GetLogTemplate(type);
            var message = _templates.FormatNotificationTemplate(template, data);
            
            var notification = await _bot.SendMessage(
                Config.LogAdminChatId,
                message,
                parseMode: ParseMode.Markdown,
                replyParameters: forward,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ {Type}", type);
            return notification;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ {Type}", type);
            return null;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    /// </summary>
    public async Task SendErrorNotificationAsync(Exception ex, string context, User? user = null, Chat? chat = null, CancellationToken cancellationToken = default)
    {
        var request = new SendErrorNotificationRequest(ex, context, user, chat, cancellationToken);
        await SendErrorNotificationAsync(request);
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É—è Request –æ–±—ä–µ–∫—Ç
    /// </summary>
    public async Task SendErrorNotificationAsync(SendErrorNotificationRequest request)
    {
        try
        {
            var errorData = new ErrorNotificationData(
                request.Exception, 
                request.Context, 
                request.User, 
                request.Chat);
            
            await SendAdminNotificationAsync(
                AdminNotificationType.SystemError, 
                errorData, 
                request.CancellationToken);
            
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {Context}", request.Context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {Context}", request.Context);
            throw;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è —Å —Ñ–æ—Ç–æ
    /// </summary>
    public async Task SendAiProfileAnalysisAsync(AiProfileAnalysisData data, CancellationToken cancellationToken = default)
    {
        try
        {
            await SendAdminNotificationAsync(AdminNotificationType.AiProfileAnalysis, data, cancellationToken);
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è");
            throw;
        }
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    /// </summary>
    public async Task<Message> SendCaptchaMessageAsync(Chat chat, string message, ReplyParameters? replyParameters, InlineKeyboardMarkup replyMarkup, CancellationToken cancellationToken = default)
    {
        var request = new SendCaptchaMessageRequest(chat, message, replyParameters, replyMarkup, cancellationToken);
        return await SendCaptchaMessageAsync(request);
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è Request –æ–±—ä–µ–∫—Ç
    /// </summary>
    public async Task<Message> SendCaptchaMessageAsync(SendCaptchaMessageRequest request)
    {
        try
        {
            var sent = await _bot.SendMessage(
                request.Chat.Id,
                request.Message,
                parseMode: ParseMode.Markdown,
                replyParameters: request.ReplyParameters,
                replyMarkup: request.ReplyMarkup,
                cancellationToken: request.CancellationToken
            );
            
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ —á–∞—Ç {ChatId}", request.Chat.Id);
            return sent;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏ –≤ —á–∞—Ç {ChatId}", request.Chat.Id);
            throw;
        }
    }
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —à–∞–±–ª–æ–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    public MessageTemplates GetTemplates()
    {
        return _templates;
    }
} 