using System.Diagnostics;
using ClubDoorman.Infrastructure;
using ClubDoorman.Services;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Models.Requests;
using Telegram.Bot;
using Telegram.Bot.Extensions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/// </summary>
public class IntroFlowService
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly ILogger<IntroFlowService> _logger;
    private readonly ICaptchaService _captchaService;
    private readonly IUserManager _userManager;
    private readonly IAiChecks _aiChecks;
    private readonly IStatisticsService _statisticsService;
    private readonly GlobalStatsManager _globalStatsManager;
    private readonly IModerationService _moderationService;
    private readonly IMessageService _messageService;

    public IntroFlowService(
        ITelegramBotClientWrapper bot,
        ILogger<IntroFlowService> logger,
        ICaptchaService captchaService,
        IUserManager userManager,
        IAiChecks aiChecks,
        IStatisticsService statisticsService,
        GlobalStatsManager globalStatsManager,
        IModerationService moderationService,
        IMessageService messageService)
    {
        _bot = bot;
        _logger = logger;
        _captchaService = captchaService;
        _userManager = userManager;
        _aiChecks = aiChecks;
        _statisticsService = statisticsService;
        _globalStatsManager = globalStatsManager;
        _moderationService = moderationService;
        _messageService = messageService;
    }

    public async Task ProcessNewUserAsync(Message? userJoinMessage, User user, Chat? chat = default, CancellationToken cancellationToken = default)
    {
        chat = userJoinMessage?.Chat ?? chat;
        Debug.Assert(chat != null);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist - –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if (!Config.IsChatAllowed(chat.Id))
        {
            _logger.LogDebug("–ß–∞—Ç {ChatId} ({ChatTitle}) –Ω–µ –≤ whitelist - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º IntroFlow", chat.Id, chat.Title);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
        var fullName = $"{user.FirstName} {user.LastName}".Trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
        if (fullName.Length > 40)
        {
            var isPermanent = fullName.Length > 75;
            await BanUserForLongName(
                userJoinMessage,
                user,
                fullName,
                isPermanent ? null : TimeSpan.FromMinutes(10),
                isPermanent ? "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω" : "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç",
                isPermanent ? "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ" : "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ",
                chat
            );
            return;
        }

        _logger.LogDebug("Intro flow {@User}", user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª—É–±–∞
        var clubUser = await _userManager.GetClubUsername(user.Id);
        if (clubUser != null)
        {
            _logger.LogDebug("User is {Name} from club", clubUser);
            return;
        }

        var chatId = chat.Id;

        if (await BanIfBlacklisted(user, chat, userJoinMessage))
            return;

        // AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ MessageHandler

        var key = _captchaService.GenerateKey(chatId, user.Id);
        if (_captchaService.GetCaptchaInfo(key) != null)
        {
            _logger.LogDebug("This user is already awaiting captcha challenge");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞–ø—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        var captchaRequest = new CreateCaptchaRequest(chat, user, userJoinMessage);
        var captchaInfo = await _captchaService.CreateCaptchaAsync(captchaRequest);
        
        // –ï—Å–ª–∏ –∫–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É
        if (captchaInfo == null)
        {
            _logger.LogInformation("[NO_CAPTCHA] –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {ChatId} - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫", chat.Id);
            var welcomeRequest = new SendWelcomeMessageRequest(user, chat, "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –∫–∞–ø—á–∏", cancellationToken);
            await _messageService.SendWelcomeMessageAsync(welcomeRequest);
        }
        else
        {
            _globalStatsManager.IncCaptcha(chatId, chat.Title ?? "");
        }
    }

    private async Task BanUserForLongName(
        Message? userJoinMessage,
        User user,
        string fullName,
        TimeSpan? banDuration,
        string banType,
        string nameDescription,
        Chat? chat = default)
    {
        try
        {
            chat = userJoinMessage?.Chat ?? chat;
            Debug.Assert(chat != null);
            
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ banDuration null - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞)
            await _bot.BanChatMember(
                chat.Id, 
                user.Id,
                banDuration.HasValue ? DateTime.UtcNow + banDuration.Value : null,
                revokeMessages: true  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
            
            // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–º –±–∞–Ω–µ
            if (!banDuration.HasValue)
            {
                _moderationService.CleanupUserFromAllLists(user.Id, chat.Id);
                _logger.LogInformation("üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –æ—á–∏—â–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –±–∞–Ω–∞ –≤ IntroFlow", user.Id);
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
            if (userJoinMessage != null)
            {
                await _bot.DeleteMessage(userJoinMessage.Chat.Id, (int)userJoinMessage.MessageId);
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            _statisticsService.IncrementLongNameBan(chat.Id);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await _messageService.SendAdminNotificationAsync(
                AdminNotificationType.AutoBan,
                new AutoBanNotificationData(user, chat, banType, $"{nameDescription} –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({fullName.Length} —Å–∏–º–≤–æ–ª–æ–≤): {fullName}")
            );
            _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to ban user with long username");
        }
    }

    private async Task<bool> BanIfBlacklisted(User user, Chat chat, Message? userJoinMessage = null)
    {
        if (!await _userManager.InBanlist(user.Id))
            return false;

        try
        {
            _statisticsService.IncrementBlacklistBan(chat.Id);
            
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4 —á–∞—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º revokeMessages: true —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            var banUntil = DateTime.UtcNow + TimeSpan.FromMinutes(240);
            await _bot.BanChatMember(chat.Id, user.Id, banUntil, revokeMessages: true);
            
            // –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (userJoinMessage != null)
            {
                try
                {
                    await _bot.DeleteMessage(chat.Id, userJoinMessage.MessageId);
                    _logger.LogDebug("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            if (_userManager.RemoveApproval(user.Id, chat.Id, removeAll: true))
            {
                await _messageService.SendAdminNotificationAsync(
                    AdminNotificationType.UserCleanup,
                    new UserCleanupNotificationData(user, chat, $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {FullName(user.FirstName, user.LastName)} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –±–∞–Ω–∞ –ø–æ –±–ª–µ–∫–ª–∏—Å—Ç—É")
                );
            }
            
            _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 4 —á–∞—Å–∞ –≤ —á–∞—Ç–µ {ChatTitle} (id={ChatId})", FullName(user.FirstName, user.LastName), user.Id, chat.Title, chat.Id);
            _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
            return true;
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to ban");
            await _messageService.SendAdminNotificationAsync(
                AdminNotificationType.Warning,
                new SimpleNotificationData(new User { Id = 0, FirstName = "System" }, chat, $"–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –±–ª–µ–∫–ª–∏—Å—Ç–∞ –≤ —á–∞—Ç–µ {chat.Title}. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞? –°—Ö–æ–¥–∏—Ç–µ –∑–∞–±–∞–Ω—å—Ç–µ —Ä—É–∫–∞–º–∏.")
            );
        }

        return false;
    }

    private static string FullName(string firstName, string? lastName) =>
        string.IsNullOrEmpty(lastName) ? firstName : $"{firstName} {lastName}";
} 