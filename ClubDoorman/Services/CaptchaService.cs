using System.Collections.Concurrent;
using ClubDoorman.Models;
using ClubDoorman.Infrastructure;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ø—á–µ–π
/// </summary>
public class CaptchaService : ICaptchaService
{
    private readonly ConcurrentDictionary<string, CaptchaInfo> _captchaNeededUsers = new();
    private readonly TelegramBotClient _bot;
    private readonly ILogger<CaptchaService> _logger;

    // –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private readonly List<string> _namesBlacklist = ["p0rn", "porn", "–ø–æ—Ä–Ω", "–ø0—Ä–Ω", "p–ærn", "–øo—Ä–Ω", "bot"];

    public CaptchaService(TelegramBotClient bot, ILogger<CaptchaService> logger)
    {
        _bot = bot;
        _logger = logger;
    }

    public async Task<CaptchaInfo> CreateCaptchaAsync(Chat chat, User user, Message? userJoinMessage = null)
    {
        const int challengeLength = 8;
        var correctAnswerIndex = Random.Shared.Next(challengeLength);
        var challenge = new List<int>(challengeLength);
        
        while (challenge.Count < challengeLength)
        {
            var rand = Random.Shared.Next(Captcha.CaptchaList.Count);
            if (!challenge.Contains(rand))
                challenge.Add(rand);
        }
        
        var correctAnswer = challenge[correctAnswerIndex];
        var keyboard = challenge
            .Select(x => new InlineKeyboardButton(Captcha.CaptchaList[x].Emoji) 
            { 
                CallbackData = $"cap_{user.Id}_{x}" 
            })
            .ToList();

        ReplyParameters? replyParams = null;
        if (userJoinMessage != null)
            replyParams = userJoinMessage;

        var fullNameForDisplay = Utils.FullName(user);
        var fullNameLower = fullNameForDisplay.ToLowerInvariant();
        var username = user.Username?.ToLower();
        
        if (_namesBlacklist.Any(fullNameLower.Contains) || 
            username?.Contains("porn") == true || 
            username?.Contains("p0rn") == true)
        {
            fullNameForDisplay = "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞";
        }

        var welcomeMessage = $"–ü—Ä–∏–≤–µ—Ç, <a href=\"tg://user?id={user.Id}\">{System.Net.WebUtility.HtmlEncode(fullNameForDisplay)}</a>! " +
                            $"–ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–µ {Captcha.CaptchaList[correctAnswer].Description}?";

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        var isNoAdGroup = IsNoAdGroup(chat.Id);
        var vpnAdHtml = isNoAdGroup ? "" : "\n\n üìç –ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã\n<i>...</i>";
        welcomeMessage += vpnAdHtml;

        var captchaMessage = await _bot.SendMessage(
            chat.Id,
            welcomeMessage,
            parseMode: ParseMode.Html,
            replyParameters: replyParams,
            replyMarkup: new InlineKeyboardMarkup(keyboard)
        );

        var cts = new CancellationTokenSource();
        var captchaInfo = new CaptchaInfo(chat.Id, chat.Title, DateTime.UtcNow, user, correctAnswer, cts, userJoinMessage);
        
        var key = GenerateKey(chat.Id, user.Id);
        _captchaNeededUsers.TryAdd(key, captchaInfo);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏ –±–∞–Ω —á–µ—Ä–µ–∑ 1.2 –º–∏–Ω—É—Ç—ã
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromMinutes(1.2), cts.Token);
                
                // –£–¥–∞–ª—è–µ–º –∫–∞–ø—á—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                if (_captchaNeededUsers.TryRemove(key, out var expiredCaptcha))
                {
                    _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É (—Ç–∞–π–º–∞—É—Ç) –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId})", 
                        Utils.FullName(expiredCaptcha.User), expiredCaptcha.User.Id, expiredCaptcha.ChatTitle ?? "-", expiredCaptcha.ChatId);
                    
                    // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 20 –º–∏–Ω—É—Ç
                    await _bot.BanChatMember(expiredCaptcha.ChatId, expiredCaptcha.User.Id, 
                        DateTime.UtcNow + TimeSpan.FromMinutes(20), revokeMessages: false);
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    await _bot.DeleteMessage(chat.Id, captchaMessage.MessageId);
                    if (userJoinMessage != null)
                        await _bot.DeleteMessage(chat.Id, userJoinMessage.MessageId);
                    
                    // –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
                    _ = Task.Run(async () =>
                    {
                        try
                        {
                            await Task.Delay(TimeSpan.FromMinutes(20));
                            await _bot.UnbanChatMember(expiredCaptcha.ChatId, expiredCaptcha.User.Id);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", expiredCaptcha.User.Id);
                        }
                    });
                }
            }
            catch (OperationCanceledException)
            {
                // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–ø—á–∏");
            }
        });

        return captchaInfo;
    }

    public async Task<bool> ValidateCaptchaAsync(string key, int answer)
    {
        if (!_captchaNeededUsers.TryRemove(key, out var info))
        {
            _logger.LogWarning("–ö–∞–ø—á–∞ {Key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", key);
            return false;
        }

        await info.Cts.CancelAsync();
        return info.CorrectAnswer == answer;
    }

    public CaptchaInfo? GetCaptchaInfo(string key)
    {
        return _captchaNeededUsers.TryGetValue(key, out var info) ? info : null;
    }

    public bool RemoveCaptcha(string key)
    {
        return _captchaNeededUsers.TryRemove(key, out _);
    }

    public string GenerateKey(long chatId, long userId)
    {
        return $"{chatId}_{userId}";
    }

    public async Task BanExpiredCaptchaUsersAsync()
    {
        if (_captchaNeededUsers.IsEmpty)
            return;

        var now = DateTime.UtcNow;
        var users = _captchaNeededUsers.ToArray();
        
        foreach (var (key, captchaInfo) in users)
        {
            var minutes = (now - captchaInfo.Timestamp).TotalMinutes;
            if (minutes > 1.3)
            {
                _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É (—Ç–∞–π–º–∞—É—Ç) –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId})", 
                    Utils.FullName(captchaInfo.User), captchaInfo.User.Id, captchaInfo.ChatTitle ?? "-", captchaInfo.ChatId);

                _captchaNeededUsers.TryRemove(key, out _);
                
                try
                {
                    await _bot.BanChatMember(captchaInfo.ChatId, captchaInfo.User.Id, 
                        now + TimeSpan.FromMinutes(20), revokeMessages: false);
                    
                    if (captchaInfo.UserJoinedMessage != null)
                        await _bot.DeleteMessage(captchaInfo.ChatId, captchaInfo.UserJoinedMessage.MessageId);

                    // –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    _ = Task.Run(async () =>
                    {
                        try
                        {
                            await Task.Delay(TimeSpan.FromMinutes(20));
                            await _bot.UnbanChatMember(captchaInfo.ChatId, captchaInfo.User.Id);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", captchaInfo.User.Id);
                        }
                    });
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∫–∞–ø—á—É");
                }
            }
        }
    }

    private static bool IsNoAdGroup(long chatId)
    {
        return Config.NoVpnAdGroups.Contains(chatId);
    }
} 