using System.Collections.Concurrent;
using System.Runtime.Caching;
using ClubDoorman.Models;
using ClubDoorman.Infrastructure;
using Telegram.Bot.Types;
using Telegram.Bot;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
/// </summary>
public class ModerationService : IModerationService
{
    private readonly SpamHamClassifier _classifier;
    private readonly MimicryClassifier _mimicryClassifier;
    private readonly BadMessageManager _badMessageManager;
    private readonly IUserManager _userManager;
    private readonly AiChecks _aiChecks;
    private readonly SuspiciousUsersStorage _suspiciousUsersStorage;
    private readonly ITelegramBotClient _botClient;
    private readonly ILogger<ModerationService> _logger;

    // –°—á–µ—Ç—á–∏–∫–∏ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    private readonly ConcurrentDictionary<long, int> _goodUserMessages = new();
    private readonly ConcurrentDictionary<string, int> _groupGoodUserMessages = new();
    private readonly ConcurrentDictionary<long, DateTime> _warnedUsers = new();
    
    // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫—Ä–∏–∏
    private readonly ConcurrentDictionary<long, List<string>> _userFirstMessages = new();
    private readonly ConcurrentDictionary<string, List<string>> _groupUserFirstMessages = new();
    
    // –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private readonly ConcurrentDictionary<long, int> _suspiciousUserMessages = new();
    private readonly ConcurrentDictionary<string, int> _groupSuspiciousUserMessages = new();

    public ModerationService(
        SpamHamClassifier classifier,
        MimicryClassifier mimicryClassifier,
        BadMessageManager badMessageManager,
        IUserManager userManager,
        AiChecks aiChecks,
        SuspiciousUsersStorage suspiciousUsersStorage,
        ITelegramBotClient botClient,
        ILogger<ModerationService> logger)
    {
        _classifier = classifier;
        _mimicryClassifier = mimicryClassifier;
        _badMessageManager = badMessageManager;
        _userManager = userManager;
        _aiChecks = aiChecks;
        _suspiciousUsersStorage = suspiciousUsersStorage;
        _botClient = botClient;
        _logger = logger;
    }

    public async Task<ModerationResult> CheckMessageAsync(Message message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message));

        var user = message.From!;
        var text = message.Text ?? message.Caption;
        var chat = message.Chat;

        // –ö—ç—à–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if (text != null)
        {
            MemoryCache.Default.Set(
                new CacheItem($"{chat.Id}_{user.Id}", text),
                new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(1) }
            );
        }

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª—ç–∫–ª–∏—Å—Ç–∞
        if (await _userManager.InBanlist(user.Id))
        {
            return new ModerationResult(ModerationAction.Ban, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ —Å–ø–∞–º–µ—Ä–æ–≤");
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
        if (message.ReplyMarkup != null)
        {
            return new ModerationResult(ModerationAction.Ban, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏");
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Story
        if (message.Story != null)
        {
            return new ModerationResult(ModerationAction.Delete, "–°—Ç–æ—Ä–∏—Å");
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞/–º–µ–¥–∏–∞
        if (string.IsNullOrWhiteSpace(text))
        {
            _logger.LogDebug("Empty text/caption");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞
            var mediaResult = CheckMediaContent(message, chat.Id);
            if (mediaResult != null)
                return mediaResult;

            return new ModerationResult(ModerationAction.Report, "–ú–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏");
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–ª–æ—Ö–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        var isKnownBad = _badMessageManager.KnownBadMessage(text);
        _logger.LogDebug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–ª–æ—Ö–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —Ç–µ–∫—Å—Ç='{Text}', –∏–∑–≤–µ—Å—Ç–Ω–æ–µ={IsKnownBad}", 
            text.Length > 50 ? text.Substring(0, 50) + "..." : text, isKnownBad);
            
        if (isKnownBad)
        {
            _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ: '{Text}'", text);
            return new ModerationResult(ModerationAction.Ban, "–ò–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ");
        }

        // 6-10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        return await CheckTextContentAsync(text, message);
    }

    public async Task<ModerationResult> CheckUserNameAsync(User user)
    {
        if (user == null)
            throw new ArgumentNullException(nameof(user));

        var fullName = Utils.FullName(user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
        if (fullName.Length > 75)
        {
            return new ModerationResult(ModerationAction.Ban, $"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è ({fullName.Length} —Å–∏–º–≤–æ–ª–æ–≤)");
        }
        
        if (fullName.Length > 40)
        {
            return new ModerationResult(ModerationAction.Report, $"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è ({fullName.Length} —Å–∏–º–≤–æ–ª–æ–≤)");
        }

        return new ModerationResult(ModerationAction.Allow, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    public Task ExecuteModerationActionAsync(Message message, ModerationResult result)
    {
        // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ Worker.cs, –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–∞ –ø–æ–∑–∂–µ
        throw new NotImplementedException("–õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö");
    }

    public bool IsUserApproved(long userId, long? chatId = null)
    {
        if (Config.UseNewApprovalSystem)
        {
            return _userManager.Approved(userId, chatId);
        }
        else
        {
            return _userManager.Approved(userId);
        }
    }

    public async Task IncrementGoodMessageCountAsync(User user, Chat chat, string messageText)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
        if (_suspiciousUsersStorage.IsSuspicious(user.Id, chat.Id))
        {
            _logger.LogDebug("üî∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} —É–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ suspicious", Utils.FullName(user));
            await HandleSuspiciousUserMessage(user, chat);
            return;
        }

        _logger.LogDebug("üìä –°–∏—Å—Ç–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: UseNew={UseNew}, GlobalMode={GlobalMode}, User={User}", 
            Config.UseNewApprovalSystem, Config.GlobalApprovalMode, Utils.FullName(user));

        if (Config.UseNewApprovalSystem && !Config.GlobalApprovalMode)
        {
            // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º
            _logger.LogDebug("‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –¥–ª—è {User}", Utils.FullName(user));
            await HandleGroupModeMessage(user, chat, messageText);
        }
        else
        {
            // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            _logger.LogDebug("‚û°Ô∏è –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è {User}", Utils.FullName(user));
            await HandleGlobalModeMessage(user, chat, messageText);
        }
    }

    private async Task HandleSuspiciousUserMessage(User user, Chat chat)
    {
        var groupUserKey = $"{chat.Id}_{user.Id}";
        var suspiciousCount = _groupSuspiciousUserMessages.AddOrUpdate(groupUserKey, 1, (_, oldValue) => oldValue + 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ storage
        _suspiciousUsersStorage.UpdateMessageCount(user.Id, chat.Id, suspiciousCount);
        
        if (suspiciousCount >= Config.SuspiciousToApprovedMessageCount)
        {
            _logger.LogInformation(
                "Suspicious user {FullName} behaved well for {Count} additional messages in group {GroupTitle}, approving",
                Utils.FullName(user),
                suspiciousCount,
                chat.Title ?? chat.Id.ToString()
            );
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
            _suspiciousUsersStorage.RemoveSuspicious(user.Id, chat.Id);
            await _userManager.Approve(user.Id, chat.Id);
            _groupSuspiciousUserMessages.TryRemove(groupUserKey, out _);
            _warnedUsers.TryRemove(user.Id, out _);
        }
    }

    private async Task HandleGroupModeMessage(User user, Chat chat, string messageText)
    {
        var groupUserKey = $"{chat.Id}_{user.Id}";
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫—Ä–∏–∏
        if (!string.IsNullOrWhiteSpace(messageText))
        {
            var messages = _groupUserFirstMessages.GetOrAdd(groupUserKey, _ => new List<string>());
            if (messages.Count < 3)
            {
                messages.Add(messageText.Trim());
            }
        }
        
        var goodInteractions = _groupGoodUserMessages.AddOrUpdate(groupUserKey, 1, (_, oldValue) => oldValue + 1);
        
        if (goodInteractions >= 3)
        {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞
            _logger.LogDebug("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞={SuspiciousEnabled}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={User}", 
                Config.SuspiciousDetectionEnabled, Utils.FullName(user));
                
            if (Config.SuspiciousDetectionEnabled && await AnalyzeMimicryAndMarkSuspicious(user, chat, groupUserKey))
            {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
                _groupGoodUserMessages.TryRemove(groupUserKey, out _);
                _groupUserFirstMessages.TryRemove(groupUserKey, out _);
                return;
            }
            
            // –û–±—ã—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            _logger.LogInformation(
                "User {FullName} behaved well for the last {Count} messages in group {GroupTitle}, approving in this group",
                Utils.FullName(user),
                goodInteractions,
                chat.Title ?? chat.Id.ToString()
            );
            
            await _userManager.Approve(user.Id, chat.Id);
            _groupGoodUserMessages.TryRemove(groupUserKey, out _);
            _groupUserFirstMessages.TryRemove(groupUserKey, out _);
            _warnedUsers.TryRemove(user.Id, out _);
        }
    }

    private async Task HandleGlobalModeMessage(User user, Chat chat, string messageText)
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫—Ä–∏–∏
        if (!string.IsNullOrWhiteSpace(messageText))
        {
            var messages = _userFirstMessages.GetOrAdd(user.Id, _ => new List<string>());
            if (messages.Count < 3)
            {
                messages.Add(messageText.Trim());
            }
        }
        
        var goodInteractions = _goodUserMessages.AddOrUpdate(user.Id, 1, (_, oldValue) => oldValue + 1);
        
        if (goodInteractions >= 3)
        {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞
            _logger.LogDebug("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π): —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞={SuspiciousEnabled}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={User}", 
                Config.SuspiciousDetectionEnabled, Utils.FullName(user));
                
            if (Config.SuspiciousDetectionEnabled && await AnalyzeMimicryAndMarkSuspicious(user, chat, user.Id.ToString()))
            {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
                _goodUserMessages.TryRemove(user.Id, out _);
                _userFirstMessages.TryRemove(user.Id, out _);
                return;
            }
            
            // –û–±—ã—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            _logger.LogInformation(
                "User {FullName} behaved well for the last {Count} messages, approving {Mode}",
                Utils.FullName(user),
                goodInteractions,
                Config.GlobalApprovalMode ? "globally" : "in old system"
            );
            
            await _userManager.Approve(user.Id, Config.GlobalApprovalMode ? null : chat.Id);
            _goodUserMessages.TryRemove(user.Id, out _);
            _userFirstMessages.TryRemove(user.Id, out _);
            _warnedUsers.TryRemove(user.Id, out _);
        }
    }

    /// <summary>
    /// –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö, –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö, –∫—ç—à–µ–π)
    /// </summary>
    public void CleanupUserFromAllLists(long userId, long chatId)
    {
        try
        {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
            _suspiciousUsersStorage.RemoveSuspicious(userId, chatId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            _userManager.RemoveApproval(userId, chatId);
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            var groupUserKey = $"{chatId}_{userId}";
            _goodUserMessages.TryRemove(userId, out _);
            _groupGoodUserMessages.TryRemove(groupUserKey, out _);
            _suspiciousUserMessages.TryRemove(userId, out _);
            _groupSuspiciousUserMessages.TryRemove(groupUserKey, out _);
            _warnedUsers.TryRemove(userId, out _);
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            _userFirstMessages.TryRemove(userId, out _);
            _groupUserFirstMessages.TryRemove(groupUserKey, out _);
            
            _logger.LogInformation("üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ {ChatId}", userId, chatId);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ {ChatId}", userId, chatId);
        }
    }

    /// <summary>
    /// –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
    /// </summary>
    public async Task<bool> BanAndCleanupUserAsync(long userId, long chatId, int? messageIdToDelete = null)
    {
        try
        {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if (messageIdToDelete.HasValue)
            {
                try
                {
                    await _botClient.DeleteMessage(chatId, messageIdToDelete.Value);
                    _logger.LogInformation("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –∏–∑ —á–∞—Ç–∞ {ChatId}", messageIdToDelete.Value, chatId);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –∏–∑ —á–∞—Ç–∞ {ChatId}", messageIdToDelete.Value, chatId);
                }
            }
            
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await _botClient.BanChatMember(chatId, userId);
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
            CleanupUserFromAllLists(userId, chatId);
            
            _logger.LogInformation("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –∑–∞–±–∞–Ω–µ–Ω –∏ –æ—á–∏—â–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞ {ChatId}", userId, chatId);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}", userId, chatId);
            return false;
        }
    }

    /// <summary>
    /// –°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–¥–æ–±—Ä—è–µ—Ç –µ–≥–æ
    /// </summary>
    public async Task<bool> UnrestrictAndApproveUserAsync(long userId, long chatId)
    {
        try
        {
            // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            await _botClient.RestrictChatMember(
                chatId: chatId,
                userId: userId,
                permissions: new Telegram.Bot.Types.ChatPermissions
                {
                    CanSendMessages = true,
                    CanSendAudios = true,
                    CanSendDocuments = true,
                    CanSendPhotos = true,
                    CanSendVideos = true,
                    CanSendVideoNotes = true,
                    CanSendVoiceNotes = true,
                    CanSendPolls = true,
                    CanSendOtherMessages = true,
                    CanAddWebPagePreviews = true,
                    CanChangeInfo = false,
                    CanInviteUsers = false,
                    CanPinMessages = false,
                    CanManageTopics = false
                },
                useIndependentChatPermissions: true
            );

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
            CleanupUserFromAllLists(userId, chatId);
            
            // –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)
            await _userManager.Approve(userId, chatId);

            _logger.LogInformation("üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω –≤ —á–∞—Ç–µ {ChatId}", userId, chatId);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}", userId, chatId);
            return false;
        }
    }

    private async Task<bool> AnalyzeMimicryAndMarkSuspicious(User user, Chat chat, string userKey)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            List<string> firstMessages;
            if (userKey.Contains("_"))
            {
                // –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º
                firstMessages = _groupUserFirstMessages.GetValueOrDefault(userKey, new List<string>());
            }
            else
            {
                // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                firstMessages = _userFirstMessages.GetValueOrDefault(user.Id, new List<string>());
            }
            
            if (firstMessages.Count < 3)
            {
                _logger.LogWarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫—Ä–∏–∏: {Count}", firstMessages.Count);
                return false;
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–º–∏–∫—Ä–∏—é
            var mimicryScore = _mimicryClassifier.AnalyzeMessages(firstMessages);
            
            if (mimicryScore >= Config.MimicryThreshold)
            {
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ
                var suspiciousInfo = new SuspiciousUserInfo(
                    SuspiciousAt: DateTime.UtcNow,
                    FirstMessages: firstMessages,
                    MimicryScore: mimicryScore,
                    AiDetectEnabled: false,
                    MessagesSinceSuspicious: 0
                );
                
                _suspiciousUsersStorage.AddSuspicious(user.Id, chat.Id, suspiciousInfo);
                
                _logger.LogWarning(
                    "User {FullName} marked as suspicious in chat {ChatTitle} with mimicry score {Score:F2}. First messages: [{Messages}]",
                    Utils.FullName(user),
                    chat.Title ?? chat.Id.ToString(),
                    mimicryScore,
                    string.Join(", ", firstMessages.Select(m => $"\"{m}\""))
                );
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
                await NotifyAdminsAboutSuspiciousUser(user, chat, suspiciousInfo);
                
                return true;
            }
            
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∏–º–∏–∫—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            return false;
        }
    }

    private async Task NotifyAdminsAboutSuspiciousUser(User user, Chat chat, SuspiciousUserInfo info)
    {
        try
        {
            var userName = Utils.FullName(user);
            var chatName = chat.Title ?? chat.Id.ToString();
            var score = info.MimicryScore.ToString("F2");
            
            var messageText = $"üîç *–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω*\n\n" +
                             $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{userName}](tg://user?id={user.Id})\n" +
                             $"üè† –ß–∞—Ç: *{chatName}*\n" +
                             $"üìä –û—Ü–µ–Ω–∫–∞ –º–∏–º–∏–∫—Ä–∏–∏: *{score}*\n" +
                             $"üïê –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {info.SuspiciousAt:yyyy-MM-dd HH:mm}\n\n" +
                             $"üìù –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n";

                         for (int i = 0; i < info.FirstMessages.Count; i++)
             {
                 var msg = info.FirstMessages[i];
                 if (msg.Length > 50)
                     msg = msg.Substring(0, 50) + "...";
                 messageText += $"{i + 1}. `{msg}`\n";
             }

             messageText += $"\n‚úÖ –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω—É–∂–Ω–æ –µ—â—ë {Config.SuspiciousToApprovedMessageCount} —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π";

             // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
             var approveCallback = $"suspicious_approve_{user.Id}_{chat.Id}";
             var banCallback = $"suspicious_ban_{user.Id}_{chat.Id}";
             var aiCallback = $"suspicious_ai_{user.Id}_{chat.Id}";
             
             _logger.LogDebug("üéõÔ∏è –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏: –æ–¥–æ–±—Ä–∏—Ç—å={Approve}, –∑–∞–±–∞–Ω–∏—Ç—å={Ban}, AI={Ai}", 
                 approveCallback, banCallback, aiCallback);
             
             var keyboard = new Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup(new[]
             {
                 new[]
                 {
                     Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", approveCallback),
                     Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", banCallback)
                 },
                 new[]
                 {
                     Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üîç AI –∞–Ω–∞–ª–∏–∑ –≤–∫–ª/–≤—ã–∫–ª", aiCallback)
                 }
             });

             await _botClient.SendMessage(
                 chatId: Config.LogAdminChatId,
                 text: messageText,
                 parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
                 replyMarkup: keyboard,
                 cancellationToken: default
             );

            _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {UserId} –≤ —á–∞—Ç–µ {ChatId}", 
                user.Id, chat.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {UserId}", user.Id);
        }
    }

    private ModerationResult? CheckMediaContent(Message message, long chatId)
    {
        var hasPhotoOrVideo = message.Photo != null || message.Video != null;
        var hasStickerOrDocument = message.Sticker != null || message.Document != null;
        var chatType = ChatSettingsManager.GetChatType(chatId);
        var isAnnouncement = chatType == "announcement";

        // –ù–µ —Ä–µ–ø–æ—Ä—Ç–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if (Config.IsMediaFilteringDisabledForChat(chatId) && hasPhotoOrVideo && !hasStickerOrDocument)
            return null;

        // –°—Ç–∏–∫–µ—Ä—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –±–ª–æ–∫–∏—Ä—É–µ–º –≤ –Ω–µ—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (!isAnnouncement && hasStickerOrDocument)
        {
            return new ModerationResult(ModerationAction.Delete, "–í –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã");
        }

        // –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        if (!Config.IsMediaFilteringDisabledForChat(chatId) && !isAnnouncement && hasPhotoOrVideo)
        {
            return new ModerationResult(ModerationAction.Delete, "–í –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –≤–∏–¥–µ–æ");
        }

        return null;
    }

    private async Task<ModerationResult> CheckTextContentAsync(string text, Message message)
    {
        var chatType = ChatSettingsManager.GetChatType(message.Chat.Id);
        var isAnnouncement = chatType == "announcement";

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ–¥–∑–∏
        var tooManyEmojis = SimpleFilters.TooManyEmojis(text);
        _logger.LogDebug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ–¥–∑–∏: —Ç–µ–∫—Å—Ç='{Text}', –º–Ω–æ–≥–æ–≤–∞—Ç–æ={TooMany}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ={IsAnnouncement}", 
            text.Length > 50 ? text.Substring(0, 50) + "..." : text, tooManyEmojis, isAnnouncement);
            
        if (!isAnnouncement && tooManyEmojis)
        {
            _logger.LogInformation("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ: '{Text}'", text);
            return new ModerationResult(ModerationAction.Delete, "–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ–≤–∞—Ç–æ —ç–º–æ–¥–∂–∏");
        }

        var normalized = TextProcessor.NormalizeText(text);

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ lookalike —Å–∏–º–≤–æ–ª–æ–≤
        var lookalike = SimpleFilters.FindAllRussianWordsWithLookalikeSymbolsInNormalizedText(normalized);
        if (lookalike.Count > 2)
        {
            var tailMessage = lookalike.Count > 5 ? ", –∏ –¥—Ä—É–≥–∏–µ" : "";
            var reason = $"–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞ –º–∞—Å–∫–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–¥ —Ä—É—Å—Å–∫–∏–µ: {string.Join(", ", lookalike.Take(5))}{tailMessage}";
            
            if (Config.LookAlikeAutoBan)
            {
                return new ModerationResult(ModerationAction.Ban, reason);
            }
            
            return new ModerationResult(ModerationAction.Delete, reason);
        }

        // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤
        var hasStopWords = SimpleFilters.HasStopWords(normalized);
        _logger.LogDebug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤: —Ç–µ–∫—Å—Ç='{Text}', –Ω–∞–π–¥–µ–Ω—ã={HasStopWords}", normalized, hasStopWords);
        
        if (hasStopWords)
        {
            _logger.LogInformation("–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ: '{Text}'", normalized);
            return new ModerationResult(ModerationAction.Delete, "–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞");
        }

        // 9. ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–∞–º–∞
        var (spam, score) = await _classifier.IsSpam(normalized);
        _logger.LogDebug("ML –∞–Ω–∞–ª–∏–∑: —Ç–µ–∫—Å—Ç='{Text}', —Å–ø–∞–º={Spam}, —Å–∫–æ—Ä={Score}", normalized, spam, score);
        
        if (spam)
        {
            _logger.LogInformation("ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–ø–∞–º: '{Text}', —Å–∫–æ—Ä={Score}", normalized, score);
            return new ModerationResult(ModerationAction.Delete, $"ML —Ä–µ—à–∏–ª —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º, —Å–∫–æ—Ä {score}", score);
        }

        // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ ham
        if (score > -0.6 && Config.LowConfidenceHamForward)
        {
            return new ModerationResult(ModerationAction.RequireManualReview, 
                $"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥—É–º–∞–µ—Ç —á—Ç–æ —ç—Ç–æ –ù–ï —Å–ø–∞–º, –Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Å –Ω–∏–∑–∫–∏–π: —Å–∫–æ—Ä {score}", score);
        }

        // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å
        return new ModerationResult(ModerationAction.Allow, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", score);
    }

    public bool SetAiDetectForSuspiciousUser(long userId, long chatId, bool enabled)
    {
        return _suspiciousUsersStorage.SetAiDetectEnabled(userId, chatId, enabled);
    }

    public (int TotalSuspicious, int WithAiDetect, int GroupsCount) GetSuspiciousUsersStats()
    {
        return _suspiciousUsersStorage.GetStats();
    }

    public List<(long UserId, long ChatId)> GetAiDetectUsers()
    {
        return _suspiciousUsersStorage.GetAiDetectUsers();
    }

    /// <summary>
    /// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ readonly –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    /// </summary>
    private async Task<bool> RestrictUserToReadOnly(User user, Chat chat, TimeSpan duration)
    {
        try
        {
            var until = DateTime.UtcNow.Add(duration);
            await _botClient.RestrictChatMember(
                chatId: chat.Id,
                userId: user.Id,
                permissions: new Telegram.Bot.Types.ChatPermissions
                {
                    CanSendMessages = false,
                    CanSendAudios = false,
                    CanSendDocuments = false,
                    CanSendPhotos = false,
                    CanSendVideos = false,
                    CanSendVideoNotes = false,
                    CanSendVoiceNotes = false,
                    CanSendPolls = false,
                    CanSendOtherMessages = false,
                    CanAddWebPagePreviews = false,
                    CanChangeInfo = false,
                    CanInviteUsers = false,
                    CanPinMessages = false,
                    CanManageTopics = false
                },
                untilDate: until,
                useIndependentChatPermissions: true
            );

            _logger.LogInformation("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ readonly –¥–æ {Until}", 
                Utils.FullName(user), until);
            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User}", Utils.FullName(user));
            return false;
        }
    }

    public async Task<bool> CheckAiDetectAndNotifyAdminsAsync(User user, Chat chat, Message message)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI –¥–µ—Ç–µ–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var suspiciousUsers = _suspiciousUsersStorage.GetAiDetectUsers();
        var userHasAiDetect = suspiciousUsers.Any(u => u.UserId == user.Id && u.ChatId == chat.Id);
        
        if (!userHasAiDetect)
            return false;

        try
        {
            var userName = Utils.FullName(user);
            var chatName = chat.Title ?? chat.Id.ToString();
            var messageText = message.Text ?? message.Caption ?? "";
            
            if (string.IsNullOrWhiteSpace(messageText))
            {
                _logger.LogDebug("üîç AI –¥–µ—Ç–µ–∫—Ç: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {User}", userName);
                return false;
            }

            _logger.LogInformation("üîçü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User}: '{Text}'", 
                userName, messageText.Substring(0, Math.Min(messageText.Length, 100)));

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            var suspiciousUser = _suspiciousUsersStorage.GetSuspiciousUser(user.Id, chat.Id);
            var firstMessages = suspiciousUser?.FirstMessages ?? new List<string>();
            var mimicryScore = suspiciousUser?.MimicryScore ?? 0.0;

            // –í—ã–∫–ª—é—á–∞–µ–º AI –¥–µ—Ç–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
            _suspiciousUsersStorage.SetAiDetectEnabled(user.Id, chat.Id, false);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            var aiResult = await _aiChecks.GetSuspiciousUserSpamProbability(message, user, firstMessages, mimicryScore);
            var (isSpamByMl, mlScore) = await _classifier.IsSpam(messageText);
            var spamProbability = aiResult.Probability; // –ø–æ–ª—É—á–∞–µ–º double –∏–∑ SpamProbability
            
            var aiReason = aiResult.Reason ?? "–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è";
            var isDefiniteSpam = spamProbability > 0.8 || mlScore > 1.5; // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ø–∞–º–µ
            var isUncertain = spamProbability > 0.4 || mlScore > -0.3;   // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è

            if (isDefiniteSpam)
            {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å–∞ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await _botClient.DeleteMessage(chat.Id, message.MessageId);
                await RestrictUserToReadOnly(user, chat, TimeSpan.FromHours(2));
                
                var deleteNotification = $"üîçü§ñüö´ *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞*\n\n" +
                                       $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{userName}](tg://user?id={user.Id})\n" +
                                       $"üè† –ß–∞—Ç: *{chatName}*\n" +
                                       $"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: `{messageText.Substring(0, Math.Min(messageText.Length, 200))}`\n" +
                                       $"üé≠ –°–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: *{mimicryScore:F2}*\n" +
                                       $"ü§ñ AI –∞–Ω–∞–ª–∏–∑: *{spamProbability:F2}* - {aiReason}\n" +
                                       $"üî¨ ML —Å–∫–æ—Ä: *{mlScore:F2}*\n" +
                                       $"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å–∞**";

                var keyboard = new Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", $"suspicious_approve_{user.Id}_{chat.Id}"),
                        Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", $"suspicious_ban_{user.Id}_{chat.Id}")
                    }
                });

                await _botClient.SendMessage(
                    chatId: Config.AdminChatId,
                    text: deleteNotification,
                    parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
                    replyMarkup: keyboard,
                    cancellationToken: default
                );

                _logger.LogInformation("üîçü§ñüö´ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ –æ—Ç {User}, –º–∏–º–∏–∫—Ä–∏—è={MimicryScore}, AI={AiScore}, ML={MlScore}", 
                    userName, mimicryScore, spamProbability, mlScore);
                
                return true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            }
            else if (isUncertain)
            {
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 2 —á–∞—Å–∞ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await RestrictUserToReadOnly(user, chat, TimeSpan.FromHours(2));
                
                var uncertainNotification = $"üîçü§ñ‚ùì *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n" +
                                          $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{userName}](tg://user?id={user.Id})\n" +
                                          $"üè† –ß–∞—Ç: *{chatName}*\n" +
                                          $"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: `{messageText.Substring(0, Math.Min(messageText.Length, 200))}`\n" +
                                          $"üé≠ –°–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: *{mimicryScore:F2}*\n" +
                                          $"ü§ñ AI –∞–Ω–∞–ª–∏–∑: *{spamProbability:F2}* - {aiReason}\n" +
                                          $"üî¨ ML —Å–∫–æ—Ä: *{mlScore:F2}*\n" +
                                          $"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ 2 —á–∞—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ.";

                var keyboard = new Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", $"suspicious_approve_{user.Id}_{chat.Id}"),
                        Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData("üóë –£–¥–∞–ª–∏—Ç—å + –±–∞–Ω", $"suspicious_ban_{user.Id}_{chat.Id}")
                    }
                });

                // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await _botClient.ForwardMessage(
                    chatId: Config.AdminChatId,
                    fromChatId: chat.Id,
                    messageId: message.MessageId,
                    cancellationToken: default
                );

                await _botClient.SendMessage(
                    chatId: Config.AdminChatId,
                    text: uncertainNotification,
                    parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown,
                    replyMarkup: keyboard,
                    cancellationToken: default
                );

                _logger.LogInformation("üîçü§ñ‚ùì –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User}, –º–∏–º–∏–∫—Ä–∏—è={MimicryScore}, AI={AiScore}, ML={MlScore}", 
                    userName, mimicryScore, spamProbability, mlScore);
                
                return true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
            }
            else
            {
                // –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                _logger.LogInformation("üîçü§ñ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {User} –ø—Ä–∏–∑–Ω–∞–Ω–æ —á–∏—Å—Ç—ã–º, –º–∏–º–∏–∫—Ä–∏—è={MimicryScore}, AI={AiScore}, ML={MlScore}", 
                    userName, mimicryScore, spamProbability, mlScore);
                
                return false; // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º AI –¥–µ—Ç–µ–∫—Ç
            _suspiciousUsersStorage.SetAiDetectEnabled(user.Id, chat.Id, false);
            return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        }
    }
} 