using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Runtime.Caching;
using System.Net.Http;
using Polly;
using Polly.Retry;
using Telegram.Bot;
using Telegram.Bot.Types;
using tryAGI.OpenAI;
using ClubDoorman.Infrastructure;

namespace ClubDoorman.Services;

public class AiChecks : IAiChecks
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly ILogger<AiChecks> _logger;
    private readonly IAppConfig _appConfig;
    private readonly OpenAiClient? _api;
    private readonly JsonSerializerOptions _jsonOptions = new() { Converters = { new JsonStringEnumConverter() } };
    
    // Retry policy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ API
    private readonly ResiliencePipeline _retry = new ResiliencePipelineBuilder()
        .AddRetry(new RetryStrategyOptions() { Delay = TimeSpan.FromMilliseconds(50) })
        .AddTimeout(TimeSpan.FromSeconds(30)) // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã
        .Build();
    
    const string Model = "google/gemini-2.5-flash";
    
    public AiChecks(ITelegramBotClientWrapper bot, ILogger<AiChecks> logger, IAppConfig appConfig)
    {
        _bot = bot;
        _logger = logger;
        _appConfig = appConfig;
        _api = _appConfig.OpenRouterApi == null ? null : CustomProviders.OpenRouter(_appConfig.OpenRouterApi);
        
        if (_api == null)
        {
            _logger.LogWarning("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –û–¢–ö–õ–Æ–ß–ï–ù: DOORMAN_OPENROUTER_API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 'test-api-key'");
        }
        else
        {
            _logger.LogInformation("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –í–ö–õ–Æ–ß–ï–ù: OpenRouter API –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
    }

    private static string CacheKey(long userId) => $"ai_profile_check:{userId}";

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    /// </summary>
    public static bool IsBoringGreeting(string? messageText)
    {
        if (string.IsNullOrWhiteSpace(messageText))
            return false;
            
        var text = messageText.Trim().ToLowerInvariant();
        
        // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        text = text.TrimEnd('.', '!', '?', ',');
        
        var boringGreetings = new[]
        {
            "–ø—Ä–∏–≤–µ—Ç", "hi", "hello", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "hola", "salut", "ciao", "hey", "qq", ".", "–π–æ", "yo",
            "–∑–¥–∞—Ä–æ–≤–∞", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "—Ö–∞–π", "—Ö–µ–ª–ª–æ", "—Ö–µ–ª–ª–æ—É", "–¥–∞—Ä–æ–≤–∞", "–∑–¥–æ—Ä–æ–≤",
            "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Å–∞–ª—é—Ç", "—Ö–µ–ª–æ", "hell", "—Ö–∏", "q",
            "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "good morning", "good evening", "good day",
            "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–¥–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞", "–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", "–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç",
            "–≤—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–≤—Å–µ–º —Ö–∞–π", "–≤—Å–µ–º –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
        };
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ –±–∞–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        return boringGreetings.Contains(text);
    }

    /// <summary>
    /// –û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ
    /// </summary>
    public void MarkUserOkay(long userId)
    {
        var cacheItem = new CacheItem(CacheKey(userId), new SpamPhotoBio(new SpamProbability(), [], ""));
        var policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddDays(30) };
        MemoryCache.Default.Set(cacheItem, policy);
        _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π", userId);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è/—Å–ø–∞–º–∞
    /// </summary>
    public async ValueTask<SpamPhotoBio> GetAttentionBaitProbability(Telegram.Bot.Types.User user, Func<string, Task>? ifChanged = default)
    {
        return await GetAttentionBaitProbability(user, null, ifChanged);
    }
    
    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è/—Å–ø–∞–º–∞ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    /// </summary>
    public async ValueTask<SpamPhotoBio> GetAttentionBaitProbability(Telegram.Bot.Types.User user, string? messageText, Func<string, Task>? ifChanged = default)
    {
        if (user == null)
        {
            _logger.LogDebug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
            return new SpamPhotoBio(new SpamProbability(), [], "");
        }

        if (_api == null)
        {
            _logger.LogDebug("OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ñ–∏–ª—è");
            return new SpamPhotoBio(new SpamProbability(), [], "");
        }

        var cached = MemoryCache.Default.Get(CacheKey(user.Id)) as SpamPhotoBio;
        if (cached != null)
        {
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={Probability}, —Ñ–æ—Ç–æ={PhotoSize} –±–∞–π—Ç", 
                user.Id, cached.SpamProbability.Probability, cached.Photo.Length);
            return cached;
        }
        
        _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑", user.Id);

        var probability = new SpamProbability();
        var pic = Array.Empty<byte>();
        var nameBioUser = string.Empty;

        try
        {
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–ª—É—á–∞–µ–º GetChatFullInfo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            var userChat = await _bot.GetChatFullInfo(user.Id);
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: GetChatFullInfo –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, Bio: {Bio}, LinkedChatId: {LinkedChatId}, Photo: {Photo}", 
                user.Id, userChat.Bio ?? "null", userChat.LinkedChatId?.ToString() ?? "null", userChat.Photo?.ToString() ?? "null");
            
            // –§–ò–ö–°: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∏–æ –∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ + —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (userChat.Bio == null && userChat.LinkedChatId == null)
            {
                _logger.LogDebug("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –Ω–µ—Ç –±–∏–æ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞", user.Id);
                if (userChat.Photo != null)
                {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ + —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (!string.IsNullOrWhiteSpace(messageText))
                    {
                        _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∏–∂–µ (–Ω–µ return)
                    }
                    else
                    {
                        // –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                        return await GetEroticPhotoBaitProbability(user, userChat);
                    }
                }
                else
                {
                    // –ù–µ—Ç –Ω–∏ –±–∏–æ, –Ω–∏ —Ñ–æ—Ç–æ - —Å—á–∏—Ç–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
                    var result = new SpamPhotoBio(new SpamProbability(), [], "");
                    CacheResult(user.Id, result);
                    return result;
                }
            }

            _logger.LogDebug("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} —Å –ø–æ–º–æ—â—å—é AI", user.Id);
            
            var sb = new StringBuilder();
            sb.Append($"–ò–º—è: {Utils.FullName(user)}");
            if (user.Username != null)
                sb.Append($"\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.Username}");
            if (userChat.Bio != null)
                sb.Append($"\n–û–ø–∏—Å–∞–Ω–∏–µ: {userChat.Bio}");

            nameBioUser = sb.ToString();
            byte[]? photoBytes = null;
            ChatCompletionRequestUserMessage? photoMessage = null;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º userChat.Photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, Photo: {Photo}", 
                user.Id, userChat.Photo?.ToString() ?? "null");
                
            if (userChat.Photo != null)
            {
                _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, FileId: {FileId}", 
                    user.Id, userChat.Photo.BigFileId);
                    
                try
                {
                    using var ms = new MemoryStream();
                    await _bot.GetInfoAndDownloadFile(userChat.Photo.BigFileId, ms);
                    photoBytes = ms.ToArray();
                    pic = photoBytes;
                    photoMessage = photoBytes.ToUserMessage(mimeType: "image/jpg");
                    _logger.LogDebug("üîç PHOTO MESSAGE: Content —Å–æ–∑–¥–∞–Ω, —Ç–∏–ø={Type}", photoMessage.Content.GetType().Name);
                    sb.Append($"\n–§–æ—Ç–æ: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ");
                    
                    _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, —Ä–∞–∑–º–µ—Ä: {Size} –±–∞–π—Ç", 
                        user.Id, photoBytes.Length);
                    _logger.LogDebug("üîç –§–û–¢–û: {Size} –±–∞–π—Ç, fileId={FileId}", photoBytes.Length, userChat.Photo.BigFileId);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
                }
            }
            else
            {
                _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –Ω–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", user.Id);
            }

            var prompt = $"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç Telegram-–ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ ¬´–ø—Ä–æ–¥–∞–∂–Ω—ã–π¬ª –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å —Ü–µ–ª—å—é –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è. 
                –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1. 
                
                –í–ê–ñ–ù–û: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±–µ–∑ –≤–æ–¥—ã!
                –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å!
                –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!
                
                –û—Å–æ–±–µ–Ω–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–∑–Ω–∞–∫–∏:
                ‚Ä¢ —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (—ç–º–æ–¥–∑–∏ —Å –¥–≤–æ–π–Ω—ã–º —Å–º—ã—Å–ª–æ–º - üí¶, üíã, üëÑ, üçë, üçÜ, üçí, üçì, üçå –∏ –ø—Ä–æ—á–∏—Ö –≤ –∏–º–µ–Ω–∏, –ª—é–±–æ–π –Ω–∞–º—ë–∫ –Ω–∞ —ç—Ä–æ—Ç–∏–∫—É –∏ –ø–æ—Ä–Ω–æ, –≥–æ–ª—ã–µ —Ñ–æ—Ç–æ)
                ‚Ä¢ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ: —Å–ª–∏—à–∫–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ
                ‚Ä¢ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö, –∑–∞—Ä–∞–±–æ—Ç–∫–µ, —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, –∞—Ä–±–∏—Ç—Ä–∞–∂–µ, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞
                ‚Ä¢ —Å—Å—ã–ª–∫–∏ –Ω–∞ OnlyFans, —Å–æ—Ü—Å–µ—Ç–∏
                ‚Ä¢ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π —É–∫–∞–∑–∞–Ω –ø—Ä—è–º–æ –≤ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: HR, SMM, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥)
                ‚Ä¢ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: —Ä–µ–∫–ª–∞–º–∞ —É—Å–ª—É–≥, –Ω–∞–≤—è–∑—á–∏–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥, –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                ‚Ä¢ ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –±–∞–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–ø—Ä–∏–≤–µ—Ç, hello, hi, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ —Ç.–ø.) - —ç—Ç–æ –û–°–ù–û–í–ù–ê–Ø —Ç–∞–∫—Ç–∏–∫–∞ —Å–ø–∞–º–µ—Ä–æ–≤! –û–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à—É—Ç –Ω–µ–≤–∏–Ω–Ω–æ–µ "–ø—Ä–∏–≤–µ—Ç" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ä–µ–∫–ª–∞–º—É. 
                ‚Ä¢ –ü–†–ê–í–ò–õ–û: –ø—É—Å—Ç–æ–π/–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å + –±–∞–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ = –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ (0.7-0.9)
                ‚Ä¢ –ü–†–ê–í–ò–õ–û: –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ + –±–∞–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ = –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ (0.8-0.95)
                ‚Ä¢ –û–±—ã—á–Ω—ã–µ –ª—é–¥–∏ –ø–∏—à—É—Ç —á—Ç–æ-—Ç–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ø—Ä–∏–≤–µ—Ç"
                
                –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:
                {nameBioUser}
                {(string.IsNullOrWhiteSpace(messageText) ? "" : $"\n\n–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{messageText}")}
                """;

            var messages = new List<ChatCompletionRequestMessage>
            {
                "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä Telegram-–≥—Ä—É–ø–ø—ã. –ë–ê–ù–ê–õ–¨–ù–´–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø - –≠–¢–û –û–°–ù–û–í–ù–ê–Ø –¢–ê–ö–¢–ò–ö–ê –°–ü–ê–ú–ï–†–û–í! –û–Ω–∏ –ø–∏—à—É—Ç '–ø—Ä–∏–≤–µ—Ç' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞ –ø–æ—Ç–æ–º —Å–ø–∞–º—è—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã—è–≤–ª—è—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ—Ö, –∫—Ç–æ –ø–∏—à–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å + –±–∞–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ = —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ø–∞–º–µ—Ä (0.7-0.9). –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú–ò (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).".ToSystemMessage(),
                prompt.ToUserMessage(),
            };
            
            if (photoMessage != null)
                messages.Add(photoMessage);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            if (userChat.LinkedChatId != null)
            {
                try
                {
                    var linkedChat = await _bot.GetChatFullInfo(userChat.LinkedChatId.Value);
                    var info = new StringBuilder();
                    info.Append($"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {linkedChat.Title}");
                    if (linkedChat.Username != null)
                        info.Append($"\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{linkedChat.Username}");
                    if (linkedChat.Description != null)
                        info.Append($"\n–û–ø–∏—Å–∞–Ω–∏–µ: {linkedChat.Description}");
                    
                    messages.Add(info.ToString().ToUserMessage());
                }
                catch (Exception e)
                {
                    _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ {ChannelId}", userChat.LinkedChatId);
                }
            }

            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {MessagesCount}", 
                user.Id, messages.Count);
            _logger.LogDebug("üîç –û–¢–ü–†–ê–í–ö–ê –í AI: messages.Count={Count}, photoMessage={PhotoMessage}", 
                messages.Count, photoMessage != null ? "–ï–°–¢–¨" : "–ù–ï–¢");
                
            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );

            if (response.Value1 != null)
            {
                probability = response.Value1;
                _logger.LogInformation("AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability} - {Reason}", 
                    user.Id, probability.Probability, probability.Reason);
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }

        var finalResult = new SpamPhotoBio(probability, pic, nameBioUser);
        CacheResult(user.Id, finalResult);
        return finalResult;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    /// </summary>
    private async ValueTask<SpamPhotoBio> GetEroticPhotoBaitProbability(Telegram.Bot.Types.User user, ChatFullInfo userChat)
    {
        if (_api == null)
            return new SpamPhotoBio(new SpamProbability(), [], "");

        var probability = new SpamProbability();
        var pic = Array.Empty<byte>();

        try
        {
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: GetEroticPhotoBaitProbability –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, Photo: {Photo}", 
                user.Id, userChat.Photo?.ToString() ?? "null");
                
            var photo = userChat.Photo!;
            using var ms = new MemoryStream();
            await _bot.GetInfoAndDownloadFile(photo.BigFileId, ms);
            var photoBytes = ms.ToArray();
            pic = photoBytes;
            
            _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ GetEroticPhotoBaitProbability –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, —Ä–∞–∑–º–µ—Ä: {Size} –±–∞–π—Ç", 
                user.Id, photoBytes.Length);
            
            var photoMessage = photoBytes.ToUserMessage(mimeType: "image/jpg");
            var prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–∫—Å—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–ª–∏ —Ä–∞–∑–≤—Ä–∞—Ç–Ω–æ. –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1.";
            
            var messages = new List<ChatCompletionRequestMessage> 
            { 
                prompt.ToUserMessage(), 
                photoMessage 
            };
            
            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );
            
            if (response.Value1 != null)
            {
                probability = response.Value1;
                _logger.LogInformation("AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability}", 
                    user.Id, probability.Probability);
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }

        return new SpamPhotoBio(probability, pic, Utils.FullName(user));
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞ —Å –ø–æ–º–æ—â—å—é AI
    /// </summary>
    /// <param name="message">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</param>
    /// <returns>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∞–º–æ–º</returns>
    /// <exception cref="AiServiceException">–í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö AI —Å–µ—Ä–≤–∏—Å–∞</exception>
    /// <exception cref="ArgumentNullException">–í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ message —Ä–∞–≤–µ–Ω null</exception>
    public async ValueTask<SpamProbability> GetSpamProbability(Message message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message), "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");

        if (_api == null)
        {
            _logger.LogDebug("AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
            return new SpamProbability();
        }

        try
        {
            var text = message.Text ?? message.Caption ?? "";
            if (string.IsNullOrWhiteSpace(text))
            {
                _logger.LogDebug("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑");
                return new SpamProbability();
            }

            var prompt = $"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞. –û—Ç–≤–µ—á–∞–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç 0 –¥–æ 1.
                –í–ê–ñ–ù–û: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)!
                
                –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞:
                ‚Ä¢ –†–µ–∫–ª–∞–º–∞ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥
                ‚Ä¢ –ü—Ä–æ—Å—å–±—ã –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ —Å—Å—ã–ª–∫–∞–º
                ‚Ä¢ –ù–∞–≤—è–∑—á–∏–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                ‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                ‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
                
                –°–æ–æ–±—â–µ–Ω–∏–µ: {text}
                """;

            var messages = new List<ChatCompletionRequestMessage>
            {
                "–¢—ã ‚Äî –∞–Ω—Ç–∏—Å–ø–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú–ò (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).".ToSystemMessage(),
                prompt.ToUserMessage()
            };

            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );

            if (response.Value1 != null)
            {
                _logger.LogDebug("AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {Probability} - {Reason}", 
                    response.Value1.Probability, response.Value1.Reason);
                return response.Value1;
            }
            else
            {
                _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
                return new SpamProbability();
            }
        }
        catch (OperationCanceledException ex)
        {
            _logger.LogWarning(ex, "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            return new SpamProbability();
        }
        catch (HttpRequestException ex)
        {
            _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            return new SpamProbability();
        }
        catch (JsonException ex)
        {
            _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            return new SpamProbability();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            return new SpamProbability();
        }
    }
    
    /// <summary>
    /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    /// </summary>
    public async ValueTask<SpamProbability> GetSuspiciousUserSpamProbability(
        Message message, 
        Telegram.Bot.Types.User user, 
        List<string> firstMessages, 
        double mimicryScore)
    {
        if (_api == null)
            return new SpamProbability();

        try
        {
            var text = message.Text ?? message.Caption ?? "";
            if (string.IsNullOrWhiteSpace(text))
                return new SpamProbability();

            var userName = Utils.FullName(user);
            var username = user.Username != null ? $"@{user.Username}" : "–Ω–µ—Ç";
            var firstMessagesText = string.Join("', '", firstMessages.Take(5));
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ
            var userChat = await _bot.GetChatFullInfo(user.Id);
            var bioInfo = !string.IsNullOrEmpty(userChat.Bio) ? $"\n‚Ä¢ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {userChat.Bio}" : "";
            var photoInfo = userChat.Photo != null ? "\n‚Ä¢ –ï—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" : "\n‚Ä¢ –ù–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è";

            var prompt = $"""
                –ê–ù–ê–õ–ò–ó –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ê –°–ü–ê–ú
                –í–ê–ñ–ù–û: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)!
                
                –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:
                ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô
                ‚Ä¢ –ï–≥–æ –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–∏–º–∏–∫—Ä–∏–∏ (—Å–∫–æ—Ä: {mimicryScore:F2})
                ‚Ä¢ –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ/–±–∞–Ω)
                
                –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
                ‚Ä¢ –ò–º—è: {userName}
                ‚Ä¢ Username: {username}{bioInfo}{photoInfo}
                ‚Ä¢ –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ['{firstMessagesText}']
                ‚Ä¢ –°–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: {mimicryScore:F2} (–≤—ã—à–µ 0.7 = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
                
                –¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: "{text}"
                
                –û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï –ö:
                ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–π–º–æ–≤/–¥–µ–Ω–µ–≥ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π)
                ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –Ω–µ–≤–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                ‚Ä¢ –¢–∏–ø–∏—á–Ω—ã–µ —Å—Ö–µ–º—ã –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤: "–ú–æ–≥—É –¥–∞—Ç—å –≤ –¥–æ–ª–≥", "–ü–æ–º–æ–≥—É —Å –¥–µ–Ω—å–≥–∞–º–∏"
                ‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–∫—É—â–∏–º
                ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (—Å–ª–∏—à–∫–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ)
                ‚Ä¢ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–∫–∞, —É—Å–ª—É–≥
                
                –£–ß–ò–¢–´–í–ê–ô, –ß–¢–û:
                - –í—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏ + —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è = –æ—á–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ø–∞–º
                - –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∑–∞–π–º—ã –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º
                - –®–∞–±–ª–æ–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + –¥–µ–Ω—å–≥–∏ = –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞
                
                –û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ –æ—Ç 0 –¥–æ 1, —É—á–∏—Ç—ã–≤–∞—è –í–°–ï —Ñ–∞–∫—Ç–æ—Ä—ã.
                """;

            var messages = new List<ChatCompletionRequestMessage>
            {
                "–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã—è–≤–ª—è—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤-—Ö–∞–º–µ–ª–µ–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –ø–æ–¥ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –û–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ö–†–ê–¢–ö–ò–ú–ò (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).".ToSystemMessage(),
                prompt.ToUserMessage()
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ)
            if (userChat.Photo != null)
            {
                try
                {
                    using var ms = new MemoryStream();
                    await _bot.GetInfoAndDownloadFile(userChat.Photo.BigFileId, ms);
                    var photoBytes = ms.ToArray();
                    var photoMessage = photoBytes.ToUserMessage(mimeType: "image/jpg");
                    messages.Add(photoMessage);
                    _logger.LogDebug("üîç –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User}", userName);
                }
                catch (Exception ex)
                {
                    _logger.LogDebug("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {User}: {Error}", userName, ex.Message);
                }
            }

            var response = await _retry.ExecuteAsync(
                async token => await _api.Chat.CreateChatCompletionAsAsync<SpamProbability>(
                    messages: messages,
                    model: Model,
                    strict: true,
                    jsonSerializerOptions: _jsonOptions,
                    cancellationToken: token
                )
            );

            if (response.Value1 != null)
            {
                _logger.LogDebug("üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {Probability} - {Reason}", 
                    response.Value1.Probability, response.Value1.Reason);
                return response.Value1;
            }

            return new SpamProbability();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º AI –∞–Ω–∞–ª–∏–∑–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return new SpamProbability();
        }
    }



    private void CacheResult(long userId, SpamPhotoBio result)
    {
        _logger.LogDebug("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={Probability}, —Ñ–æ—Ç–æ={PhotoSize} –±–∞–π—Ç", 
            userId, result.SpamProbability.Probability, result.Photo.Length);
        var cacheItem = new CacheItem(CacheKey(userId), result);
        var policy = new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(24) };
        MemoryCache.Default.Set(cacheItem, policy);
    }
}

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
public class SpamProbability
{
    public double Probability { get; set; }
    public string Reason { get; set; } = "";
}

public sealed record SpamPhotoBio(SpamProbability SpamProbability, byte[] Photo, string NameBio); 