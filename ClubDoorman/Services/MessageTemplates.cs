using ClubDoorman.Infrastructure;
using ClubDoorman.Models.Notifications;
using Telegram.Bot.Types;

namespace ClubDoorman.Services;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
/// </summary>
public class MessageTemplates
{
    private readonly Dictionary<AdminNotificationType, string> _adminTemplates = new()
    {
        [AdminNotificationType.AutoBanBlacklist] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [AdminNotificationType.AutoBanFromBlacklist] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [AdminNotificationType.PrivateChatBanAttempt] = 
            "‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö",
            
        [AdminNotificationType.BanForLongName] = 
            "{BanType} –≤ —á–∞—Ç–µ <b>{ChatTitle}</b>: {Reason}",
            
        [AdminNotificationType.BanChannel] = 
            "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –≤ —á–∞—Ç–µ {ChatTitle} –∑–∞–±–∞–Ω–µ–Ω –∫–∞–Ω–∞–ª {ChannelTitle}",
            
        [AdminNotificationType.RemovedFromApproved] = 
            "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserFullName} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∞–Ω–∞ –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É",
            
        [AdminNotificationType.ChannelMessage] = 
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {ChannelTitle} –≤ —á–∞—Ç–µ {ChatTitle} - —Ä–µ–ø–æ—Ä—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç",
            
        [AdminNotificationType.SuspiciousUser] = 
            "üîç <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n\n" +
            "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href=\"tg://user?id={UserId}\">{UserFullName}</a>\n" +
            "üè† –ß–∞—Ç: <b>{ChatTitle}</b>\n" +
            "üìä –û—Ü–µ–Ω–∫–∞ –º–∏–º–∏–∫—Ä–∏–∏: <b>{MimicryScore:F2}</b>\n" +
            "üïê –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π: {SuspiciousAt:yyyy-MM-dd HH:mm}\n\n" +
            "üìù –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{FirstMessages}\n\n" +
            "‚úÖ –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω—É–∂–Ω–æ –µ—â—ë {RequiredMessages} —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
            
        [AdminNotificationType.AiProfileAnalysis] = 
            "ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n" +
            "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href=\"tg://user?id={UserId}\">{UserFullName}</a>\n" +
            "üè† –ß–∞—Ç: <b>{ChatTitle}</b>\n" +
            "üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: <b>{SpamProbability:F2}</b>\n" +
            "üìù –ò–º—è –∏ –±–∏–æ:\n<code>{NameBio}</code>\n\n" +
            "üîç –ü—Ä–∏—á–∏–Ω–∞: {AiReason}",
            
        [AdminNotificationType.ModerationError] = 
            "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {Context}\n" +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {UserFullName}\n" +
            "–ß–∞—Ç: {ChatTitle}\n" +
            "–û—à–∏–±–∫–∞: {ErrorMessage}",
            
        [AdminNotificationType.SystemError] = 
            "üí• –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {Context}\n" +
            "–û—à–∏–±–∫–∞: {ErrorMessage}",
            
        [AdminNotificationType.AutoBan] = 
            "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [AdminNotificationType.SuspiciousMessage] = 
            "‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏. –°–æ–æ–±—â–µ–Ω–∏–µ <b>–ù–ï —É–¥–∞–ª–µ–Ω–æ</b>.\n" +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={UserId}\">{UserFullName}</a> –≤ —á–∞—Ç–µ <b>{ChatTitle}</b>\n" +
            "–°–æ–æ–±—â–µ–Ω–∏–µ: <code>{MessageText}</code>",
            
        [AdminNotificationType.ChannelError] = 
            "‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —á–∞—Ç–µ {ChatTitle}. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞?",
            
                    [AdminNotificationType.UserCleanup] = 
                "üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserFullName} –æ—á–∏—â–µ–Ω –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∞–Ω–∞",

            [AdminNotificationType.UserApproved] = 
                "‚úÖ {Reason}",

            [AdminNotificationType.SystemInfo] = 
                "{Reason}",

            [AdminNotificationType.Success] = 
                "‚úÖ {Reason}",

            [AdminNotificationType.Warning] = 
                "‚ö†Ô∏è {Reason}",

            [AdminNotificationType.AiDetectAutoDelete] =
                "üîçü§ñüö´ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞</b>\n\n" +
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href=\"tg://user?id={UserId}\">{UserName}</a>\n" +
                "üè† –ß–∞—Ç: <b>{ChatTitle}</b>\n" +
                "üì® –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{MessageText}</code>\n" +
                "üé≠ –°–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: <b>{MimicryScore:F2}</b>\n" +
                "ü§ñ AI –∞–Ω–∞–ª–∏–∑: <b>{AiScore:F2}</b> - {AiReason}\n" +
                "üî¨ ML —Å–∫–æ—Ä: <b>{MlScore:F2}</b>\n" +
                "‚ö° –î–µ–π—Å—Ç–≤–∏–µ: <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å–∞</b>",

            [AdminNotificationType.AiDetectSuspicious] =
                "üîçü§ñ‚ùì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π AI –¥–µ—Ç–µ–∫—Ç: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" +
                "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href=\"tg://user?id={UserId}\">{UserName}</a>\n" +
                "üè† –ß–∞—Ç: <b>{ChatTitle}</b>\n" +
                "üì® –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{MessageText}</code>\n" +
                "üé≠ –°–∫–æ—Ä –º–∏–º–∏–∫—Ä–∏–∏: <b>{MimicryScore:F2}</b>\n" +
                "ü§ñ AI –∞–Ω–∞–ª–∏–∑: <b>{AiScore:F2}</b> - {AiReason}\n" +
                "üî¨ ML —Å–∫–æ—Ä: <b>{MlScore:F2}</b>\n" +
                "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ 2 —á–∞—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ.",

            [AdminNotificationType.UserRemovedFromApproved] =
                "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={UserId}\">{UserName}</a> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —á–∞—Ç–µ <b>{ChatTitle}</b>",

            [AdminNotificationType.UserRestricted] =
                "üîî –í —á–∞—Ç–µ <b>{ChatTitle}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href=\"tg://user?id={UserId}\">{UserName}</a> –¥–∞–ª–∏ —Ä–∏–¥–æ–Ω–ª–∏ –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ Recent actions, –≤–æ–∑–º–æ–∂–Ω–æ ML –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ø–∞–º. –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫ - –∫–∏–¥–∞–π—Ç–µ –µ–≥–æ —Å—é–¥–∞.{LastMessage}"
        };
    
    private readonly Dictionary<LogNotificationType, string> _logTemplates = new()
    {
        [LogNotificationType.AutoBanBlacklist] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [LogNotificationType.AutoBanFromBlacklist] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [LogNotificationType.AutoBanKnownSpam] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [LogNotificationType.BanForLongName] = 
            "üö´ –ë–∞–Ω –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}",
            
        [LogNotificationType.BanChannel] = 
            "üö´ –ë–∞–Ω –∫–∞–Ω–∞–ª–∞ {ChannelTitle} –≤ —á–∞—Ç–µ {ChatTitle}",
            
        [LogNotificationType.SuspiciousUser] = 
            "üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {UserFullName} –≤ —á–∞—Ç–µ {ChatTitle}\n" +
            "–û—Ü–µ–Ω–∫–∞ –º–∏–º–∏–∫—Ä–∏–∏: {MimicryScore:F2}",
            
        [LogNotificationType.AiProfileAnalysis] = 
            "ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: {UserFullName} –≤ —á–∞—Ç–µ {ChatTitle}\n" +
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {SpamProbability:F2}",
            
        [LogNotificationType.CriticalError] = 
            "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {Context}\n" +
            "–û—à–∏–±–∫–∞: {ErrorMessage}",
            
        [LogNotificationType.ChannelMessage] = 
            "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {ChannelTitle} –≤ —á–∞—Ç–µ {ChatTitle}",
            
        [LogNotificationType.AutoBanTextMention] = 
            "üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å—Å—ã–ª–∫–∏\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "{MessageLink}",
            
        [LogNotificationType.AutoBanRepeatedViolations] = 
            "üö´ –ê–≤—Ç–æ–±–∞–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {Reason}\n" +
            "–Æ–∑–µ—Ä {UserFullName} –∏–∑ —á–∞—Ç–∞ {ChatTitle}\n" +
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ - —Ä–∞–∑–±–∞–Ω—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
    };
    
    private readonly Dictionary<UserNotificationType, string> _userTemplates = new()
    {
        [UserNotificationType.ModerationWarning] = 
            "üëã {UserMention}, –≤—ã –ø–æ–∫–∞ <b>–Ω–æ–≤–∏—á–æ–∫</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n" +
            "<b>–ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è</b> –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É:\n" +
            "‚Ä¢ –Ω–µ–ª—å–∑—è —ç–º–æ–¥–∑–∏, —Ä–µ–∫–ª–∞–º—É –∏ <b>—Å—Ç–æ–ø-—Å–ª–æ–≤–∞</b>\n" +
            "‚Ä¢ —Ä–∞–±–æ—Ç–∞–µ—Ç ML-–∞–Ω–∞–ª–∏–∑{ReasonSuffix}",
            
        [UserNotificationType.MessageDeleted] = 
            "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {Reason}",
            
        [UserNotificationType.UserBanned] = 
            "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {Reason}",
            
        [UserNotificationType.UserRestricted] = 
            "‚ö†Ô∏è –í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {Reason}",
            
        [UserNotificationType.CaptchaShown] = 
            "üß© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç",
            
                    [UserNotificationType.Warning] = 
                "‚ö†Ô∏è {Reason}",
            
            [UserNotificationType.Success] = 
                "‚úÖ {Reason}",

            [UserNotificationType.SystemInfo] =
                "{Reason}",

            [UserNotificationType.Welcome] = 
                "{Reason}",

            [UserNotificationType.CaptchaWelcome] =
                "üëã {UserName}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —ç–º–æ–¥–∑–∏{MediaWarning} –∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã ‚Äî –æ–Ω–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°!{VpnAd}"
        };
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string GetAdminTemplate(AdminNotificationType type) => _adminTemplates[type];
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ª–æ–≥-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string GetLogTemplate(LogNotificationType type) => _logTemplates[type];
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string GetUserTemplate(UserNotificationType type) => _userTemplates[type];
    
    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏
    /// </summary>
    public string FormatTemplate(string template, object data)
    {
        var result = template;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ data
        var properties = data.GetType().GetProperties();
        foreach (var property in properties)
        {
            var placeholder = $"{{{property.Name}}}";
            var value = property.GetValue(data)?.ToString() ?? "";
            
            result = result.Replace(placeholder, value);
        }
        
        return result;
    }
    
    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public string FormatNotificationTemplate(string template, NotificationData data)
    {
        var result = template;
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        result = result.Replace("{UserFullName}", Utils.FullName(data.User));
        result = result.Replace("{UserMention}", $"<a href=\"tg://user?id={data.User.Id}\">{Utils.FullName(data.User)}</a>");
        result = result.Replace("{UserId}", data.User.Id.ToString());
        result = result.Replace("{ChatTitle}", data.Chat.Title ?? data.Chat.Id.ToString());
        result = result.Replace("{ChatId}", data.Chat.Id.ToString());
        result = result.Replace("{Reason}", data.Reason ?? "");
        result = result.Replace("{MessageId}", data.MessageId?.ToString() ?? "");
        result = result.Replace("{ReasonSuffix}", !string.IsNullOrEmpty(data.Reason) ? $"\n\n<i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {data.Reason}</i>" : "");
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if (data is AutoBanNotificationData autoBanData)
        {
            result = result.Replace("{BanType}", autoBanData.BanType);
            result = result.Replace("{MessageLink}", autoBanData.MessageLink ?? "");
        }
        else if (data is SuspiciousUserNotificationData suspiciousData)
        {
            result = result.Replace("{MimicryScore}", suspiciousData.MimicryScore.ToString("F2"));
            result = result.Replace("{SuspiciousAt}", suspiciousData.SuspiciousAt.ToString("yyyy-MM-dd HH:mm"));
            result = result.Replace("{FirstMessages}", FormatFirstMessages(suspiciousData.FirstMessages));
            result = result.Replace("{RequiredMessages}", Config.SuspiciousToApprovedMessageCount.ToString());
        }

        else if (data is ErrorNotificationData errorData)
        {
            result = result.Replace("{Context}", errorData.Context);
            result = result.Replace("{ErrorMessage}", errorData.Exception.Message);
        }
        else if (data is ChannelMessageNotificationData channelData)
        {
            result = result.Replace("{ChannelTitle}", channelData.SenderChat.Title ?? channelData.SenderChat.Id.ToString());
            result = result.Replace("{MessageText}", channelData.MessageText);
        }
        else if (data is SuspiciousMessageNotificationData suspiciousMsgData)
        {
            result = result.Replace("{UserFullName}", Utils.FullName(suspiciousMsgData.User));
            result = result.Replace("{UserName}", Utils.FullName(suspiciousMsgData.User));
            result = result.Replace("{UserId}", suspiciousMsgData.User.Id.ToString());
            result = result.Replace("{ChatTitle}", suspiciousMsgData.Chat.Title ?? "");
            result = result.Replace("{MessageText}", System.Net.WebUtility.HtmlEncode(suspiciousMsgData.MessageText));
            result = result.Replace("{MessageLink}", suspiciousMsgData.MessageLink ?? "");
        }
                    else if (data is UserCleanupNotificationData cleanupData)
            {
                result = result.Replace("{CleanupReason}", cleanupData.CleanupReason);
            }
            else if (data is AiProfileAnalysisData aiProfileData)
            {
                result = result.Replace("{SpamProbability:F2}", (aiProfileData.SpamProbability * 100).ToString("F2"));
                result = result.Replace("{AiReason}", aiProfileData.Reason);
                result = result.Replace("{NameBio}", aiProfileData.NameBio);
                result = result.Replace("{MessageText}", aiProfileData.MessageText);
            }
            else if (data is AiDetectNotificationData aiDetectData)
            {
                result = result.Replace("{UserName}", Utils.FullName(aiDetectData.User));
                result = result.Replace("{UserId}", aiDetectData.User.Id.ToString());
                result = result.Replace("{ChatTitle}", aiDetectData.Chat.Title ?? "");
                result = result.Replace("{MimicryScore}", aiDetectData.MimicryScore.ToString("F2"));
                result = result.Replace("{AiScore}", aiDetectData.AiScore.ToString("F2"));
                result = result.Replace("{MlScore}", aiDetectData.MlScore.ToString("F2"));
                result = result.Replace("{AiReason}", aiDetectData.AiReason);
                result = result.Replace("{MessageText}", aiDetectData.MessageText.Substring(0, Math.Min(aiDetectData.MessageText.Length, 200)));
            }
            else if (data is UserRestrictedNotificationData restrictedData)
            {
                result = result.Replace("{UserName}", Utils.FullName(restrictedData.User));
                result = result.Replace("{UserId}", restrictedData.User.Id.ToString());
                result = result.Replace("{ChatTitle}", restrictedData.ChatTitle);
                result = result.Replace("{LastMessage}", string.IsNullOrWhiteSpace(restrictedData.LastMessage) 
                    ? "" 
                    : $" –ï–≥–æ/–µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—ã–ª–æ:\n<pre>{restrictedData.LastMessage}</pre>");
            }
            else if (data is UserRemovedFromApprovedNotificationData removedData)
            {
                result = result.Replace("{UserName}", Utils.FullName(removedData.User));
                result = result.Replace("{UserId}", removedData.User.Id.ToString());
                result = result.Replace("{ChatTitle}", removedData.ChatTitle);
            }
            else if (data is CaptchaWelcomeNotificationData captchaWelcomeData)
            {
                result = result.Replace("{UserName}", Utils.FullName(captchaWelcomeData.User));
                result = result.Replace("{MediaWarning}", captchaWelcomeData.MediaWarning);
                result = result.Replace("{VpnAd}", captchaWelcomeData.VpnAd);
            }
            else if (data is SimpleNotificationData simpleData)
            {
                result = result.Replace("{UserName}", Utils.FullName(simpleData.User));
                result = result.Replace("{UserId}", simpleData.User.Id.ToString());
                result = result.Replace("{ChatTitle}", simpleData.Chat.Title ?? "");
                result = result.Replace("{Reason}", simpleData.Reason);
            }
            else
            {
                // Fallback –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
                result = result.Replace("{UserName}", Utils.FullName(data.User));
                result = result.Replace("{UserId}", data.User.Id.ToString());
                result = result.Replace("{ChatTitle}", data.Chat.Title ?? "");
                result = result.Replace("{Reason}", data.Reason);
            }
        
        return result;
    }
    
    private string FormatFirstMessages(List<string> messages)
    {
        if (messages.Count == 0) return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π";
        
        var result = "";
        for (int i = 0; i < Math.Min(messages.Count, 5); i++)
        {
            var msg = messages[i];
            if (msg.Length > 50)
                msg = msg.Substring(0, 50) + "...";
            result += $"{i + 1}. <code>{msg}</code>\n";
        }
        
        return result;
    }
    // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞ ParseMode
    // private string EscapeMarkdown(string text)
    // {
    //     if (string.IsNullOrEmpty(text)) return text;
    //     
    //     return text
    //         .Replace("_", "\\_")
    //         .Replace("*", "\\*")
    //         .Replace("[", "\\[")
    //         .Replace("]", "\\]")
    //         .Replace("(", "\\(")
    //         .Replace(")", "\\)")
    //         .Replace("~", "\\~")
    //         .Replace("`", "\\`")
    //         .Replace(">", "\\>")
    //         .Replace("#", "\\#")
    //         .Replace("+", "\\+")
    //         .Replace("-", "\\-")
    //         .Replace("=", "\\=")
    //         .Replace("|", "\\|")
    //         .Replace("{", "\\{")
    //         .Replace("}", "\\}")
    //         .Replace(".", "\\.")
    //         .Replace("!", "\\!");
    // }
} 