using Microsoft.Extensions.Logging;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using ClubDoorman.Handlers;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Infrastructure;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/// </summary>
public class UserBanService : IUserBanService
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly IMessageService _messageService;
    private readonly IUserFlowLogger _userFlowLogger;
    private readonly ILogger<UserBanService> _logger;
    private readonly IModerationService _moderationService;
    private readonly IViolationTracker _violationTracker;
    private readonly IAppConfig _appConfig;
    private readonly IStatisticsService _statisticsService;
    private readonly GlobalStatsManager _globalStatsManager;
    private readonly IUserManager _userManager;

    public UserBanService(
        ITelegramBotClientWrapper bot,
        IMessageService messageService,
        IUserFlowLogger userFlowLogger,
        ILogger<UserBanService> logger,
        IModerationService moderationService,
        IViolationTracker violationTracker,
        IAppConfig appConfig,
        IStatisticsService statisticsService,
        GlobalStatsManager globalStatsManager,
        IUserManager userManager)
    {
        _bot = bot;
        _messageService = messageService;
        _userFlowLogger = userFlowLogger;
        _logger = logger;
        _moderationService = moderationService;
        _violationTracker = violationTracker;
        _appConfig = appConfig;
        _statisticsService = statisticsService;
        _globalStatsManager = globalStatsManager;
        _userManager = userManager;
    }

    public async Task BanUserForLongNameAsync(Message? userJoinMessage, User user, string reason, TimeSpan? banDuration, CancellationToken cancellationToken)
    {
        try
        {
            var chat = userJoinMessage?.Chat!;
            
            if (!await ValidateBanOperationAsync(chat, user, "–ë–∞–Ω –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è", cancellationToken))
                return;

            await BanUserAsync(chat, user, banDuration, cancellationToken: cancellationToken);
            await DeleteMessageAsync(userJoinMessage, cancellationToken: cancellationToken);
            var banType = banDuration.HasValue ? "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç" : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω";
            var banData = new AutoBanNotificationData(user, chat, banType, reason, userJoinMessage?.MessageId);
            await SendNotificationAsync(banData, LogNotificationType.BanForLongName, userJoinMessage, cancellationToken: cancellationToken);
            
            _userFlowLogger.LogUserBanned(user, chat, reason);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è");
        }
    }

    public async Task BanBlacklistedUserAsync(Message userJoinMessage, User user, CancellationToken cancellationToken)
    {
        try
        {
            var chat = userJoinMessage.Chat;
            
            if (!await ValidateBanOperationAsync(chat, user, "–ë–∞–Ω –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞", cancellationToken))
                return;
            
            await BanUserAsync(chat, user, TimeSpan.FromMinutes(240), cancellationToken: cancellationToken);
            await DeleteMessageAsync(userJoinMessage, cancellationToken: cancellationToken);
            
            _userFlowLogger.LogUserBanned(user, chat, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ");
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
        }
    }

    public async Task AutoBanAsync(Message message, string reason, CancellationToken cancellationToken)
    {
        var user = message.From;
        var chat = message.Chat;
        
        if (!await ValidateBanOperationAsync(chat, user, reason, cancellationToken))
            return;
        
        var autoBanData = CreateAutoBanData(user, message, reason);
        var logNotificationType = DetermineLogNotificationType(reason);
        
        await SendNotificationAsync(autoBanData, logNotificationType, withErrorHandling: true, cancellationToken: cancellationToken);
        await DeleteMessageAsync(message, withErrorHandling: true, cancellationToken: cancellationToken);
        await BanUserPermanentlyAsync(message, user, cancellationToken);
        await CleanupUserDataAsync(user, chat, cancellationToken);
    }

    public async Task AutoBanChannelAsync(Message message, CancellationToken cancellationToken)
    {
        try
        {
            var chat = message.Chat;
            var senderChat = message.SenderChat!;
            
            await _bot.DeleteMessage(chat, message.MessageId, cancellationToken);
            await _bot.BanChatSenderChat(chat, senderChat.Id, cancellationToken);
            
            var channelData = new ChannelMessageNotificationData(senderChat, chat, message.Text ?? "[–º–µ–¥–∏–∞]");
            await _messageService.ForwardToAdminWithNotificationAsync(message, AdminNotificationType.ChannelMessage, channelData, cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª");
            var errorData = new ErrorNotificationData(
                new InvalidOperationException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª"),
                "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞",
                null,
                message.Chat
            );
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.ChannelError, errorData, cancellationToken);
        }
    }

    public async Task HandleBlacklistBanAsync(Message message, User user, Chat chat, CancellationToken cancellationToken)
    {
        await LogBlacklistBanAttemptAsync(message, user, chat);
        await SendBlacklistBanNotificationAsync(message, user, chat, cancellationToken);
        await DeleteMessageSafelyAsync(message, cancellationToken);
        await BanUserAsync(chat, user, TimeSpan.FromMinutes(240), revokeMessages: true, withErrorHandling: true, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞", cancellationToken);
        await UpdateBlacklistStatisticsAsync(message, chat);
        await RemoveUserFromApprovedAsync(user, message, chat, cancellationToken);
        await LogBlacklistBanSuccessAsync(user, chat);
    }

    public async Task TrackViolationAndBanIfNeededAsync(Message message, User user, string reason, CancellationToken cancellationToken)
    {
        try
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ
            ViolationType? violationType = reason switch
            {
                var r when r.Contains("ML —Ä–µ—à–∏–ª —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º") => ViolationType.MlSpam,
                var r when r.Contains("—Å—Ç–æ–ø-—Å–ª–æ–≤–∞") => ViolationType.StopWords,
                var r when r.Contains("–º–Ω–æ–≥–æ–≤–∞—Ç–æ —ç–º–æ–¥–∂–∏") => ViolationType.TooManyEmojis,
                var r when r.Contains("lookalike") => ViolationType.LookalikeSymbols,
                _ => null
            };
            
            if (violationType == null)
            {
                _logger.LogDebug("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è: {Reason}", reason);
                return;
            }
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            var shouldBan = _violationTracker.RegisterViolation(user.Id, message.Chat.Id, violationType.Value);
            
            if (shouldBan)
            {
                _logger.LogWarning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π {ViolationType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId} - –±–∞–Ω",
                    ViolationTracker.GetViolationTypeName(violationType.Value), user.Id, message.Chat.Id);
                
                // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                var banReason = $"–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {ViolationTracker.GetViolationTypeName(violationType.Value)}";
                await AutoBanAsync(message, banReason, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }
    }

    private static string LinkToMessage(Chat chat, long messageId) =>
        chat.Type switch
        {
            ChatType.Supergroup => $"https://t.me/c/{chat.Id.ToString()[4..]}/{messageId}",
            ChatType.Group when !string.IsNullOrEmpty(chat.Username) => $"https://t.me/{chat.Username}/{messageId}",
            _ => $"https://t.me/c/{chat.Id.ToString()[4..]}/{messageId}"
        };

    private static string FullName(string firstName, string? lastName) =>
        string.IsNullOrEmpty(lastName) ? firstName : $"{firstName} {lastName}";

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private async Task<bool> ValidateBanOperationAsync(Chat chat, User user, string operation, CancellationToken cancellationToken)
    {
        if (chat.Type == ChatType.Private)
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
            var logMessage = operation switch
            {
                "–ë–∞–Ω –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è" => $"–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {chat.Id} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                "–ë–∞–Ω –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞" => $"–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {chat.Id} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                _ => $"–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {chat.Id} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
            };
            
            _logger.LogWarning(logMessage);
            var errorData = new ErrorNotificationData(
                new InvalidOperationException("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"),
                operation,
                user,
                chat
            );
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.PrivateChatBanAttempt, errorData, cancellationToken);
            return false;
        }
        return true;
    }



    private async Task DeleteMessageAsync(Message? message, bool withErrorHandling = false, CancellationToken cancellationToken = default)
    {
        if (message == null) return;
        
        try
        {
            await _bot.DeleteMessage(message.Chat, message.MessageId, cancellationToken: cancellationToken);
        }
        catch (Exception ex) when (withErrorHandling)
        {
            _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –∏–∑ —á–∞—Ç–∞ {ChatId} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)", message.MessageId, message.Chat.Id);
        }
    }

    private async Task BanUserAsync(Chat chat, User user, TimeSpan? banDuration, bool revokeMessages = true, bool withErrorHandling = false, string? errorMessage = null, CancellationToken cancellationToken = default)
    {
        try
        {
            DateTime? banUntil = banDuration.HasValue ? DateTime.UtcNow + banDuration.Value : null;
            await _bot.BanChatMember(chat.Id, user.Id, banUntil, revokeMessages: revokeMessages, cancellationToken: cancellationToken);
        }
        catch (Exception e) when (withErrorHandling)
        {
            _logger.LogWarning(e, errorMessage ?? "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    }

    private async Task SendNotificationAsync(AutoBanNotificationData banData, LogNotificationType logType, Message? message = null, bool withErrorHandling = false, CancellationToken cancellationToken = default)
    {
        try
        {
            if (message != null)
            {
                await _messageService.ForwardToLogWithNotificationAsync(message, logType, banData, cancellationToken);
            }
            else if (_appConfig.RepeatedViolationsBanToAdminChat)
            {
                await _messageService.SendAdminNotificationAsync(AdminNotificationType.AutoBan, banData, cancellationToken);
            }
            else
            {
                await _messageService.SendLogNotificationAsync(logType, banData, cancellationToken);
            }
        }
        catch (Exception ex) when (withErrorHandling)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ —Ç–∏–ø–∞ {NotificationType}", logType);
        }
    }

    private AutoBanNotificationData CreateAutoBanData(User user, Message message, string reason) =>
        new AutoBanNotificationData(
            user, 
            message.Chat, 
            "–ê–≤—Ç–æ–±–∞–Ω", 
            reason, 
            message.MessageId, 
            LinkToMessage(message.Chat, message.MessageId)
        );

    private LogNotificationType DetermineLogNotificationType(string reason) =>
        reason switch
        {
            var r when r.Contains("–ò–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ") => LogNotificationType.AutoBanKnownSpam,
            var r when r.Contains("–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã") => LogNotificationType.AutoBanTextMention,
            var r when r.Contains("–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è") => LogNotificationType.AutoBanRepeatedViolations,
            _ => LogNotificationType.AutoBanBlacklist
        };

    private async Task BanUserPermanentlyAsync(Message message, User user, CancellationToken cancellationToken)
    {
        try
        {
            await _bot.BanChatMember(message.Chat, user.Id, revokeMessages: false, cancellationToken: cancellationToken);
            _logger.LogInformation("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ {ChatId}", user.Id, message.Chat.Id);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}", user.Id, message.Chat.Id);
        }
    }

    private async Task CleanupUserDataAsync(User user, Chat chat, CancellationToken cancellationToken)
    {
        _moderationService.CleanupUserFromAllLists(user.Id, chat.Id);
        _violationTracker.ResetViolations(user.Id, chat.Id, ViolationType.MlSpam);
        _violationTracker.ResetViolations(user.Id, chat.Id, ViolationType.StopWords);
        _violationTracker.ResetViolations(user.Id, chat.Id, ViolationType.TooManyEmojis);
        _violationTracker.ResetViolations(user.Id, chat.Id, ViolationType.LookalikeSymbols);
        
        _logger.LogInformation("üßπ –°—á–µ—Ç—á–∏–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}", user.Id, chat.Id);
    }

    private async Task LogBlacklistBanAttemptAsync(Message message, User user, Chat chat)
    {
        var userMessageText = message.Text ?? message.Caption ?? "[–º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä/—Ñ–∞–π–ª]";
        _logger.LogWarning("üö´ –ë–õ–≠–ö–õ–ò–°–¢ LOLS.BOT: {UserName} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) –Ω–∞–ø–∏—Å–∞–ª: {MessageText}", 
            FullName(user.FirstName, user.LastName), user.Id, chat.Title, chat.Id, 
            userMessageText.Length > 100 ? userMessageText.Substring(0, 100) + "..." : userMessageText);
        
        _userFlowLogger.LogUserBanned(user, chat, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ lols.bot");
    }

    private async Task SendBlacklistBanNotificationAsync(Message message, User user, Chat chat, CancellationToken cancellationToken)
    {
        try
        {
            var blacklistData = new AutoBanNotificationData(
                user, 
                message.Chat, 
                "–ê–≤—Ç–æ–±–∞–Ω –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot", 
                "–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                message.MessageId, 
                LinkToMessage(message.Chat, message.MessageId)
            );
            
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ–ø–ª–∞–π
            var forwardedMessage = await _bot.ForwardMessage(
                new ChatId(Config.LogAdminChatId),
                message.Chat.Id,
                message.MessageId,
                cancellationToken: cancellationToken
            );
            
            var template = _messageService.GetTemplates().GetLogTemplate(LogNotificationType.AutoBanBlacklist);
            var messageText = _messageService.GetTemplates().FormatNotificationTemplate(template, blacklistData);
            
            await _bot.SendMessage(
                Config.LogAdminChatId,
                messageText,
                parseMode: ParseMode.Html,
                replyParameters: forwardedMessage,
                cancellationToken: cancellationToken
            );
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç");
        }
    }

    private async Task DeleteMessageSafelyAsync(Message message, CancellationToken cancellationToken)
    {
        try
        {
            await _bot.DeleteMessage(message.Chat, message.MessageId, cancellationToken: cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
        }
    }



    private async Task UpdateBlacklistStatisticsAsync(Message message, Chat chat)
    {
        _statisticsService.IncrementBlacklistBan(message.Chat.Id);
        _globalStatsManager.IncBan(message.Chat.Id, message.Chat.Title ?? "");
    }

    private async Task RemoveUserFromApprovedAsync(User user, Message message, Chat chat, CancellationToken cancellationToken)
    {
        if (_userManager.RemoveApproval(user.Id))
        {
            try
            {
                var removedData = new SimpleNotificationData(user, message.Chat, "—É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∞–Ω–∞ –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É");
                await _messageService.SendAdminNotificationAsync(AdminNotificationType.RemovedFromApproved, removedData, cancellationToken);
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö");
            }
        }
    }

    private async Task LogBlacklistBanSuccessAsync(User user, Chat chat)
    {
        _logger.LogInformation("‚úÖ –ê–í–¢–û–ë–ê–ù –ó–ê–í–ï–†–®–ï–ù: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 4 —á–∞—Å–∞ –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot", 
            FullName(user.FirstName, user.LastName), user.Id, chat.Title, chat.Id);
    }
} 