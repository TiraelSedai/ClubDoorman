using System.Collections.Concurrent;
using System.Text;
using ClubDoorman.Models;
using ClubDoorman.Infrastructure;
using Telegram.Bot;

namespace ClubDoorman.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
/// </summary>
public class StatisticsService : IStatisticsService
{
    private readonly ConcurrentDictionary<long, ChatStats> _stats = new();
    private readonly TelegramBotClient _bot;
    private readonly ILogger<StatisticsService> _logger;

    public StatisticsService(TelegramBotClient bot, ILogger<StatisticsService> logger)
    {
        _bot = bot;
        _logger = logger;
    }

    public void IncrementCaptcha(long chatId)
    {
        // –ó–¥–µ—Å—å –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∫–∞–ø—á–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        _logger.LogDebug("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–∞–ø—á–∏ –¥–ª—è —á–∞—Ç–∞ {ChatId}", chatId);
    }

    public void IncrementBlacklistBan(long chatId)
    {
        var stats = _stats.GetOrAdd(chatId, new ChatStats(null));
        Interlocked.Increment(ref stats.BlacklistBanned);
        _logger.LogDebug("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –±–ª—ç–∫–ª–∏—Å—Ç –±–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {ChatId}", chatId);
    }

    public void IncrementKnownBadMessage(long chatId)
    {
        var stats = _stats.GetOrAdd(chatId, new ChatStats(null));
        Interlocked.Increment(ref stats.KnownBadMessage);
        _logger.LogDebug("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {ChatId}", chatId);
    }

    public void IncrementLongNameBan(long chatId)
    {
        var stats = _stats.GetOrAdd(chatId, new ChatStats(null));
        Interlocked.Increment(ref stats.LongNameBanned);
        _logger.LogDebug("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –±–∞–Ω–∞ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –¥–ª—è —á–∞—Ç–∞ {ChatId}", chatId);
    }

    public IDictionary<long, ChatStats> GetAllStats()
    {
        return _stats.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    public void ClearStats()
    {
        _stats.Clear();
        _logger.LogInformation("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞");
    }

    public async Task<string> GenerateReportAsync()
    {
        var report = _stats.ToArray();
        var sb = new StringBuilder();
        sb.AppendLine("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*");
        
        foreach (var (chatId, stats) in report.OrderBy(x => x.Value.ChatTitle))
        {
            var sum = stats.KnownBadMessage + stats.BlacklistBanned + stats.StoppedCaptcha + stats.LongNameBanned;
            if (sum == 0) continue;
            
            try
            {
                var chat = await _bot.GetChat(chatId);
                var chatLink = GetChatLink(chat);
                var chatType = ChatSettingsManager.GetChatType(chat.Id);
                
                sb.AppendLine();
                sb.AppendLine($"{chatLink} (`{chat.Id}`) [{chatType}]:");
                sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: *{sum}*");
                if (stats.BlacklistBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ü–æ –±–ª–µ–∫–ª–∏—Å—Ç–∞–º: *{stats.BlacklistBanned}*");
                if (stats.StoppedCaptcha > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ù–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: *{stats.StoppedCaptcha}*");
                if (stats.KnownBadMessage > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: *{stats.KnownBadMessage}*");
                if (stats.LongNameBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ó–∞ –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: *{stats.LongNameBanned}*");
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {ChatId}", chatId);
                sb.AppendLine($"–ß–∞—Ç {chatId}: {sum} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
            }
        }

        if (sb.Length <= 35) // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        {
            sb.AppendLine("\n–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ üéâ");
        }

        return sb.ToString();
    }

    private static string GetChatLink(Telegram.Bot.Types.Chat chat)
    {
        var escapedTitle = EscapeMarkdown(chat.Title ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç");
        if (!string.IsNullOrEmpty(chat.Username))
        {
            return $"[{escapedTitle}](https://t.me/{chat.Username})";
        }
        var formattedId = chat.Id.ToString();
        if (formattedId.StartsWith("-100"))
        {
            formattedId = formattedId.Substring(4);
            return $"[{escapedTitle}](https://t.me/c/{formattedId})";
        }
        else if (formattedId.StartsWith("-"))
        {
            return $"*{escapedTitle}*";
        }
        else
        {
            return $"*{escapedTitle}*";
        }
    }

    private static string EscapeMarkdown(string text)
    {
        return text.Replace("*", "\\*")
                   .Replace("_", "\\_")
                   .Replace("[", "\\[")
                   .Replace("]", "\\]")
                   .Replace("(", "\\(")
                   .Replace(")", "\\)");
    }
} 