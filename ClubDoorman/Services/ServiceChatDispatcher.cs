using ClubDoorman.Infrastructure;
using ClubDoorman.Models.Notifications;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace ClubDoorman.Services;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å-—á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∞–¥–º–∏–Ω-—á–∞—Ç—É –∏ –ª–æ–≥-—á–∞—Ç—É
/// </summary>
public class ServiceChatDispatcher : IServiceChatDispatcher
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly ILogger<ServiceChatDispatcher> _logger;

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å-—á–∞—Ç–æ–≤
    /// </summary>
    /// <param name="bot">–ö–ª–∏–µ–Ω—Ç Telegram –±–æ—Ç–∞</param>
    /// <param name="logger">–õ–æ–≥–≥–µ—Ä</param>
    public ServiceChatDispatcher(
        ITelegramBotClientWrapper bot,
        ILogger<ServiceChatDispatcher> logger)
    {
        _bot = bot ?? throw new ArgumentNullException(nameof(bot));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
    /// </summary>
    public async Task SendToAdminChatAsync(NotificationData notification, CancellationToken cancellationToken = default)
    {
        try
        {
            var message = FormatNotificationForAdminChat(notification);
            await _bot.SendMessageAsync(
                Config.AdminChatId,
                message,
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
                replyMarkup: GetAdminChatReplyMarkup(notification),
                cancellationToken: cancellationToken);

            _logger.LogDebug("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {NotificationType}", notification.GetType().Name);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {NotificationType}", notification.GetType().Name);
            throw;
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    /// </summary>
    public async Task SendToLogChatAsync(NotificationData notification, CancellationToken cancellationToken = default)
    {
        try
        {
            var message = FormatNotificationForLogChat(notification);
            var chatId = Config.LogAdminChatId != Config.AdminChatId ? Config.LogAdminChatId : Config.AdminChatId;
            
            await _bot.SendMessageAsync(
                chatId,
                message,
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
                cancellationToken: cancellationToken);

            _logger.LogDebug("üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥-—á–∞—Ç: {NotificationType}", notification.GetType().Name);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-—á–∞—Ç: {NotificationType}", notification.GetType().Name);
            throw;
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    /// </summary>
    public bool ShouldSendToAdminChat(NotificationData notification)
    {
        return notification switch
        {
            // –¢—Ä–µ–±—É—é—Ç —Ä–µ–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ - –∞–¥–º–∏–Ω-—á–∞—Ç
            SuspiciousMessageNotificationData => true,
            SuspiciousUserNotificationData => true,
            AiDetectNotificationData aiDetect => !aiDetect.IsAutoDelete, // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            
            // –†–µ–¥–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–∂–µ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ - –∞–¥–º–∏–Ω-—á–∞—Ç
            PrivateChatBanAttemptData => true,
            ChannelMessageNotificationData => true,
            UserRestrictedNotificationData => true,
            UserRemovedFromApprovedNotificationData => true,
            
            // –û—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è - –∞–¥–º–∏–Ω-—á–∞—Ç
            ErrorNotificationData => true,
            
            // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –ª–æ–≥-—á–∞—Ç
            _ => false
        };
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    /// </summary>
    private string FormatNotificationForAdminChat(NotificationData notification)
    {
        return notification switch
        {
            SuspiciousMessageNotificationData suspicious => FormatSuspiciousMessage(suspicious),
            SuspiciousUserNotificationData suspicious => FormatSuspiciousUser(suspicious),
            AiDetectNotificationData aiDetect => FormatAiDetect(aiDetect),
            PrivateChatBanAttemptData privateBan => FormatPrivateChatBanAttempt(privateBan),
            ChannelMessageNotificationData channel => FormatChannelMessage(channel),
            UserRestrictedNotificationData restricted => FormatUserRestricted(restricted),
            UserRemovedFromApprovedNotificationData removed => FormatUserRemovedFromApproved(removed),
            ErrorNotificationData error => FormatError(error),
            _ => FormatGenericNotification(notification)
        };
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥-—á–∞—Ç–∞
    /// </summary>
    private string FormatNotificationForLogChat(NotificationData notification)
    {
        return notification switch
        {
            AutoBanNotificationData autoBan => FormatAutoBanLog(autoBan),
            AiDetectNotificationData aiDetect when aiDetect.IsAutoDelete => FormatAiDetectLog(aiDetect),
            _ => FormatGenericLogNotification(notification)
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    /// </summary>
    private InlineKeyboardMarkup? GetAdminChatReplyMarkup(NotificationData notification)
    {
        return notification switch
        {
            SuspiciousMessageNotificationData => new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "approve_message") },
                new[] { InlineKeyboardButton.WithCallbackData("‚ùå –°–ø–∞–º", "spam_message") },
                new[] { InlineKeyboardButton.WithCallbackData("üö´ –ë–∞–Ω", "ban_user") }
            }),
            SuspiciousUserNotificationData => new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "approve_user") },
                new[] { InlineKeyboardButton.WithCallbackData("üö´ –ë–∞–Ω", "ban_user") }
            }),
            AiDetectNotificationData aiDetect when !aiDetect.IsAutoDelete => new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("‚úÖ OK", "approve_ai_detect") },
                new[] { InlineKeyboardButton.WithCallbackData("‚ùå –°–ø–∞–º", "spam_ai_detect") }
            }),
            _ => null
        };
    }

    // –ú–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
    private string FormatSuspiciousMessage(SuspiciousMessageNotificationData notification)
    {
        return $"üö® <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.MessageText}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {notification.MessageLink ?? "–ù–µ—Ç"}";
    }

    private string FormatSuspiciousUser(SuspiciousUserNotificationData notification)
    {
        return $"ü§î <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üé≠ –û—Ü–µ–Ω–∫–∞ –º–∏–º–∏–∫—Ä–∏–∏: {notification.MimicryScore:F2}\n" +
               $"üìù –ü–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{string.Join("\n", notification.FirstMessages.Take(3))}";
    }

    private string FormatAiDetect(AiDetectNotificationData notification)
    {
        return $"ü§ñ <b>AI –¥–µ—Ç–µ–∫—Ç</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üé≠ –ú–∏–º–∏–∫—Ä–∏—è: {notification.MimicryScore:F2}\n" +
               $"ü§ñ AI: {notification.AiScore:F2}\n" +
               $"üìä ML: {notification.MlScore:F2}\n" +
               $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.MessageText}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {FormatMessageLink(notification.Chat, notification.MessageId)}";
    }

    private string FormatPrivateChatBanAttempt(PrivateChatBanAttemptData notification)
    {
        return $"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}";
    }

    private string FormatChannelMessage(ChannelMessageNotificationData notification)
    {
        return $"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞</b>\n\n" +
               $"üì∫ –ö–∞–Ω–∞–ª: {notification.SenderChat.Title}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.MessageText}";
    }

    private string FormatUserRestricted(UserRestrictedNotificationData notification)
    {
        return $"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {notification.ChatTitle}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}\n" +
               $"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {notification.LastMessage}";
    }

    private string FormatUserRemovedFromApproved(UserRemovedFromApprovedNotificationData notification)
    {
        return $"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {notification.ChatTitle}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}";
    }

    private string FormatError(ErrorNotificationData notification)
    {
        return $"üí• <b>–û—à–∏–±–∫–∞</b>\n\n" +
               $"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {notification.Context}\n" +
               $"‚ùå –û—à–∏–±–∫–∞: {notification.Exception.Message}\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}";
    }

    // –ú–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–≥-—á–∞—Ç–∞
    private string FormatAutoBanLog(AutoBanNotificationData notification)
    {
        return $"üî® <b>–ê–≤—Ç–æ–±–∞–Ω</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –¢–∏–ø: {notification.BanType}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {notification.MessageLink ?? "–ù–µ—Ç"}";
    }

    private string FormatAiDetectLog(AiDetectNotificationData notification)
    {
        return $"ü§ñ <b>AI –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üé≠ –ú–∏–º–∏–∫—Ä–∏—è: {notification.MimicryScore:F2}\n" +
               $"ü§ñ AI: {notification.AiScore:F2}\n" +
               $"üìä ML: {notification.MlScore:F2}\n" +
               $"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.MessageText}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {FormatMessageLink(notification.Chat, notification.MessageId)}";
    }

    private string FormatGenericLogNotification(NotificationData notification)
    {
        return $"üìù <b>–õ–æ–≥</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {FormatMessageLink(notification.Chat, notification.MessageId)}";
    }

    private string FormatGenericNotification(NotificationData notification)
    {
        return $"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" +
               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {FormatUser(notification.User)}\n" +
               $"üí¨ –ß–∞—Ç: {FormatChat(notification.Chat)}\n" +
               $"üìù –ü—Ä–∏—á–∏–Ω–∞: {notification.Reason}\n" +
               $"üîó –°—Å—ã–ª–∫–∞: {FormatMessageLink(notification.Chat, notification.MessageId)}";
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private string FormatUser(User user)
    {
        var name = string.IsNullOrEmpty(user.FirstName) ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : user.FirstName;
        var lastName = string.IsNullOrEmpty(user.LastName) ? "" : $" {user.LastName}";
        var username = string.IsNullOrEmpty(user.Username) ? "" : $" (@{user.Username})";
        return $"{name}{lastName}{username} (ID: {user.Id})";
    }

    private string FormatChat(Chat chat)
    {
        var title = string.IsNullOrEmpty(chat.Title) ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : chat.Title;
        var username = string.IsNullOrEmpty(chat.Username) ? "" : $" (@{chat.Username})";
        return $"{title}{username} (ID: {chat.Id})";
    }

    private string FormatMessageLink(Chat chat, long? messageId)
    {
        if (!messageId.HasValue) return "–ù–µ—Ç";
        
        return chat.Type switch
        {
            Telegram.Bot.Types.Enums.ChatType.Supergroup => $"https://t.me/c/{chat.Id.ToString()[4..]}/{messageId}",
            Telegram.Bot.Types.Enums.ChatType.Group when !string.IsNullOrEmpty(chat.Username) => $"https://t.me/{chat.Username}/{messageId}",
            _ => $"ID: {messageId}"
        };
    }
} 