using Serilog;
using Serilog.Events;
using ClubDoorman.Infrastructure;
using ClubDoorman.Services;
using ClubDoorman.Handlers;
using ClubDoorman.Handlers.Commands;
using Telegram.Bot;
using DotNetEnv;

namespace ClubDoorman;

public class Program
{
    public static async Task Main(string[] args)
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        var currentDir = Directory.GetCurrentDirectory();
        var envPath = Path.Combine(currentDir, ".env");
        
        if (File.Exists(envPath))
        {
            Console.WriteLine($"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {envPath}");
            Env.Load(envPath);
        }
        else
        {
            Console.WriteLine("üìÑ –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            Console.WriteLine($"üîç –ò—Å–∫–∞–ª–∏ –≤: {envPath}");
        }
        
        InitData();
        var host = Host.CreateDefaultBuilder(args)
            .UseSerilog(
                (_, _, config) =>
                {
                    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    var logsDir = "logs";
                    if (!Directory.Exists(logsDir))
                    {
                        Directory.CreateDirectory(logsDir);
                    }
                    
                    config
                        .MinimumLevel.Verbose()
                        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
                        .MinimumLevel.Override("System", LogEventLevel.Information)
                        .Enrich.FromLogContext()
                        .Enrich.WithProperty("Application", "ClubDoorman")
                        .WriteTo.Async(a => a.Console())
                        .WriteTo.Async(a => a.File(
                            path: Path.Combine(logsDir, "clubdoorman-.log"),
                            rollingInterval: RollingInterval.Day,
                            retainedFileCountLimit: 7,
                            outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
                        ))
                        .WriteTo.Async(a => a.File(
                            path: Path.Combine(logsDir, "errors-.log"),
                            rollingInterval: RollingInterval.Day,
                            retainedFileCountLimit: 30,
                            restrictedToMinimumLevel: LogEventLevel.Error,
                            outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
                        ));
                }
            )
            .ConfigureServices(services =>
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
                if (string.IsNullOrEmpty(Config.BotApi))
                {
                    throw new InvalidOperationException(
                        "‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: DOORMAN_BOT_API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω 'test-bot-token'. " +
                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DOORMAN_BOT_API —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞."
                    );
                }

                Console.WriteLine($"ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {Config.BotApi.Substring(0, Math.Min(Config.BotApi.Length, 10))}...");
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å AI –∏ Mimicry —Å–∏—Å—Ç–µ–º
                if (Config.OpenRouterApi != null)
                {
                    Console.WriteLine("ü§ñ AI –∞–Ω–∞–ª–∏–∑: –í–ö–õ–Æ–ß–ï–ù");
                }
                else
                {
                    Console.WriteLine("ü§ñ AI –∞–Ω–∞–ª–∏–∑: –û–¢–ö–õ–Æ–ß–ï–ù (DOORMAN_OPENROUTER_API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)");
                }
                
                if (Config.SuspiciousDetectionEnabled)
                {
                    Console.WriteLine($"üé≠ –°–∏—Å—Ç–µ–º–∞ –º–∏–º–∏–∫—Ä–∏–∏: –í–ö–õ–Æ–ß–ï–ù–ê (–ø–æ—Ä–æ–≥: {Config.MimicryThreshold:F1})");
                }
                else
                {
                    Console.WriteLine("üé≠ –°–∏—Å—Ç–µ–º–∞ –º–∏–º–∏–∫—Ä–∏–∏: –û–¢–ö–õ–Æ–ß–ï–ù–ê (DOORMAN_SUSPICIOUS_DETECTION_ENABLE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)");
                }
                
                services.AddHostedService<Worker>();
                
                // Telegram Bot Client
                services.AddSingleton<TelegramBotClient>(provider => new TelegramBotClient(Config.BotApi));
                services.AddSingleton<ITelegramBotClient>(provider => provider.GetRequiredService<TelegramBotClient>());
                services.AddSingleton<ITelegramBotClientWrapper>(provider => new TelegramBotClientWrapper(provider.GetRequiredService<TelegramBotClient>()));
                
                // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
                services.AddSingleton<ISpamHamClassifier, SpamHamClassifier>();
                services.AddSingleton<IMimicryClassifier, MimicryClassifier>();
                services.AddSingleton<IBadMessageManager, BadMessageManager>();
                services.AddSingleton<IAiChecks>(provider => new AiChecks(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<AiChecks>>()));
                services.AddSingleton<GlobalStatsManager>();
                services.AddSingleton<ISuspiciousUsersStorage, SuspiciousUsersStorage>();
                
                // –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                services.AddSingleton<IUpdateDispatcher, UpdateDispatcher>();
                services.AddSingleton<IStatisticsService>(provider => new StatisticsService(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StatisticsService>>(), provider.GetRequiredService<IChatLinkFormatter>()));
                services.AddSingleton<ICaptchaService, CaptchaService>();
                services.AddSingleton<IModerationService, ModerationService>();
                services.AddSingleton<IntroFlowService>(provider => new IntroFlowService(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<IntroFlowService>>(), provider.GetRequiredService<ICaptchaService>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<IAiChecks>(), provider.GetRequiredService<IStatisticsService>(), provider.GetRequiredService<GlobalStatsManager>(), provider.GetRequiredService<IModerationService>()));
                services.AddSingleton<IChatLinkFormatter, ChatLinkFormatter>();
                services.AddSingleton<IUserFlowLogger, UserFlowLogger>();
                
                // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                services.AddSingleton<MessageTemplates>();
                services.AddSingleton<IMessageService, MessageService>();
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                services.AddSingleton<IUpdateHandler>(provider => new MessageHandler(
                    provider.GetRequiredService<ITelegramBotClientWrapper>(),
                    provider.GetRequiredService<IModerationService>(),
                    provider.GetRequiredService<ICaptchaService>(),
                    provider.GetRequiredService<IUserManager>(),
                    provider.GetRequiredService<ISpamHamClassifier>(),
                    provider.GetRequiredService<IBadMessageManager>(),
                    provider.GetRequiredService<IAiChecks>(),
                    provider.GetRequiredService<GlobalStatsManager>(),
                    provider.GetRequiredService<IStatisticsService>(),
                    provider.GetRequiredService<IServiceProvider>(),
                    provider.GetRequiredService<IUserFlowLogger>(),
                    provider.GetRequiredService<ILogger<MessageHandler>>()));
                services.AddSingleton<IUpdateHandler>(provider => new CallbackQueryHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ICaptchaService>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<IBadMessageManager>(), provider.GetRequiredService<IStatisticsService>(), provider.GetRequiredService<IAiChecks>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<ILogger<CallbackQueryHandler>>()));
                services.AddSingleton<IUpdateHandler>(provider => new ChatMemberHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IUserManager>(), provider.GetRequiredService<ILogger<ChatMemberHandler>>(), provider.GetRequiredService<IntroFlowService>()));
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
                services.AddSingleton<ICommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>()));
                services.AddSingleton<StartCommandHandler>(provider => new StartCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<ILogger<StartCommandHandler>>()));
                services.AddSingleton<ICommandHandler>(provider => new SuspiciousCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<ILogger<SuspiciousCommandHandler>>()));
                services.AddSingleton<SuspiciousCommandHandler>(provider => new SuspiciousCommandHandler(provider.GetRequiredService<ITelegramBotClientWrapper>(), provider.GetRequiredService<IModerationService>(), provider.GetRequiredService<ILogger<SuspiciousCommandHandler>>()));
                
                // –£—Å–ª–æ–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è
                if (Config.UseNewApprovalSystem)
                {
                    services.AddSingleton<ApprovedUsersStorageV2>();
                    services.AddSingleton<UserManagerV2>();
                    services.AddSingleton<IUserManager>(provider => provider.GetRequiredService<UserManagerV2>());
                }
                else
                {
                    services.AddSingleton<ApprovedUsersStorage>();
                    services.AddSingleton<UserManager>();
                    services.AddSingleton<IUserManager>(provider => provider.GetRequiredService<UserManager>());
                }
            })
            .Build();

        await host.RunAsync();
    }

    private static void InitData()
    {
        var basePath = AppDomain.CurrentDomain.BaseDirectory;
        var dataInit = Path.Combine(basePath, "data_init");
        if (!Directory.Exists(dataInit))
            return;

        var data = Path.Combine(basePath, "data");
        if (!Directory.Exists(data))
            Directory.CreateDirectory(data);
        foreach (var sourceFullPath in Directory.EnumerateFiles(dataInit))
        {
            var file = Path.GetFileName(sourceFullPath);
            var target = Path.Combine(data, file);
            if (!File.Exists(target))
                File.Copy(sourceFullPath, target);
        }
    }
}
