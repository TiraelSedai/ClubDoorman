using System.Diagnostics;
using System.Runtime.Caching;
using ClubDoorman.Infrastructure;
using ClubDoorman.Services;
using Telegram.Bot;
using Telegram.Bot.Extensions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Handlers;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
/// </summary>
public class ChatMemberHandler : IUpdateHandler
{
    private readonly TelegramBotClient _bot;
    private readonly IUserManager _userManager;
    private readonly ILogger<ChatMemberHandler> _logger;
    private readonly IntroFlowService _introFlowService;

    public ChatMemberHandler(
        TelegramBotClient bot,
        IUserManager userManager,
        ILogger<ChatMemberHandler> logger,
        IntroFlowService introFlowService)
    {
        _bot = bot;
        _userManager = userManager;
        _logger = logger;
        _introFlowService = introFlowService;
    }

    public bool CanHandle(Update update) => update.Type == UpdateType.ChatMember;

    public async Task HandleAsync(Update update, CancellationToken cancellationToken = default)
    {
        var chatMember = update.ChatMember;
        Debug.Assert(chatMember != null);
        var newChatMember = chatMember.NewChatMember;
        ChatSettingsManager.EnsureChatInConfig(chatMember.Chat.Id, chatMember.Chat.Title);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist - –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if (!Config.IsChatAllowed(chatMember.Chat.Id))
        {
            _logger.LogDebug("–ß–∞—Ç {ChatId} ({ChatTitle}) –Ω–µ –≤ whitelist - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞", chatMember.Chat.Id, chatMember.Chat.Title);
            return;
        }
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å–∞–º–∏–º –±–æ—Ç–æ–º
        if (chatMember.From?.Id == _bot.BotId)
        {
            _logger.LogDebug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —Å–¥–µ–ª–∞–Ω–Ω–æ–µ —Å–∞–º–∏–º –±–æ—Ç–æ–º");
            return;
        }
        
        switch (newChatMember.Status)
        {
            case ChatMemberStatus.Member:
            {
                _logger.LogDebug("New chat member new {@New} old {@Old}", newChatMember, chatMember.OldChatMember);
                if (chatMember.OldChatMember.Status == ChatMemberStatus.Left)
                {
                    var u = newChatMember.User;
                    _logger.LogInformation("==================== –ù–û–í–´–ô –£–ß–ê–°–¢–ù–ò–ö ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}, username={Username}) –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É '{ChatTitle}' (id={ChatId})\n========================================================", 
                        (u.FirstName + (string.IsNullOrEmpty(u.LastName) ? "" : " " + u.LastName)), u.Id, u.Username ?? "-", chatMember.Chat.Title ?? "-", chatMember.Chat.Id);
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º IntroFlow —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                    _ = Task.Run(async () =>
                    {
                        await Task.Delay(TimeSpan.FromSeconds(2));
                        await _introFlowService.ProcessNewUserAsync(null, newChatMember.User, chatMember.Chat);
                    });
                }
                break;
            }
            case ChatMemberStatus.Kicked
            or ChatMemberStatus.Restricted:
                var user = newChatMember.User;
                var key = $"{chatMember.Chat.Id}_{user.Id}";
                var lastMessage = MemoryCache.Default.Get(key) as string;
                var tailMessage = string.IsNullOrWhiteSpace(lastMessage)
                    ? ""
                    : $" –ï–≥–æ/–µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—ã–ª–æ:\n```\n{lastMessage}\n```";
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
                if (_userManager.RemoveApproval(user.Id, chatMember.Chat.Id, removeAll: true))
                {
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —á–∞—Ç–µ *{chatMember.Chat.Title}*",
                        parseMode: ParseMode.Markdown,
                        cancellationToken: cancellationToken
                    );
                }
                
                await _bot.SendMessage(
                    new ChatId(Config.AdminChatId),
                    $"üîî –í —á–∞—Ç–µ *{chatMember.Chat.Title}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) –¥–∞–ª–∏ —Ä–∏–¥–æ–Ω–ª–∏ –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ Recent actions, –≤–æ–∑–º–æ–∂–Ω–æ ML –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ø–∞–º. –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫ - –∫–∏–¥–∞–π—Ç–µ –µ–≥–æ —Å—é–¥–∞.{tailMessage}",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken
                );
                break;
        }
    }

    private static string FullName(string firstName, string? lastName) =>
        string.IsNullOrEmpty(lastName) ? firstName : $"{firstName} {lastName}";
} 