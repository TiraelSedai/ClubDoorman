using ClubDoorman.Infrastructure;
using ClubDoorman.Services;
using ClubDoorman.Models.Notifications;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace ClubDoorman.Handlers.Commands;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/// </summary>
public class SuspiciousCommandHandler : ICommandHandler
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly IModerationService _moderationService;
    private readonly IMessageService _messageService;
    private readonly ILogger<SuspiciousCommandHandler> _logger;

    public string CommandName => "suspicious";

    public SuspiciousCommandHandler(
        ITelegramBotClientWrapper bot, 
        IModerationService moderationService,
        IMessageService messageService,
        ILogger<SuspiciousCommandHandler> logger)
    {
        _bot = bot;
        _moderationService = moderationService;
        _messageService = messageService;
        _logger = logger;
    }

    public async Task HandleAsync(Message message, CancellationToken cancellationToken = default)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞
        if (message.Chat.Id != Config.AdminChatId && message.Chat.Id != Config.LogAdminChatId)
            return;

        var commandParts = message.Text?.Split(' ', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();
        if (commandParts.Length < 2)
        {
            await ShowHelp(message, cancellationToken);
            return;
        }

        var subCommand = commandParts[1].ToLower();
        
        try
        {
            switch (subCommand)
            {
                case "stats":
                    await HandleStatsCommand(message, cancellationToken);
                    break;
                    
                case "list":
                    await HandleListCommand(message, cancellationToken);
                    break;
                    
                case "help":
                default:
                    await ShowHelp(message, cancellationToken);
                    break;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /suspicious {SubCommand}", subCommand);
            await _messageService.SendUserNotificationAsync(
                message.From!,
                message.Chat,
                UserNotificationType.Warning,
                new SimpleNotificationData(message.From!, message.Chat, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã"),
                cancellationToken
            );
        }
    }

    private async Task HandleStatsCommand(Message message, CancellationToken cancellationToken)
    {
        var stats = _moderationService.GetSuspiciousUsersStats();
        var aiDetectUsers = _moderationService.GetAiDetectUsers();
        
        var statusMessage = 
            $"*–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" +
            $"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞: {(Config.SuspiciousDetectionEnabled ? "‚úÖ" : "‚ùå")}\n" +
            $"‚Ä¢ –ü–æ—Ä–æ–≥ –º–∏–º–∏–∫—Ä–∏–∏: *{Config.MimicryThreshold:F1}*\n" +
            $"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: *{Config.SuspiciousToApprovedMessageCount}*\n\n" +
            $"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n" +
            $"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: *{stats.TotalSuspicious}*\n" +
            $"‚Ä¢ –° AI –¥–µ—Ç–µ–∫—Ç–æ–º: *{stats.WithAiDetect}*\n" +
            $"‚Ä¢ –ì—Ä—É–ø–ø: *{stats.GroupsCount}*\n\n" +
            $"*AI –∞–Ω–∞–ª–∏–∑:*\n" +
            $"‚Ä¢ API –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {(Config.OpenRouterApi != null ? "‚úÖ" : "‚ùå")}\n" +
            $"‚Ä¢ AI —á–∞—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã: *{Config.AiEnabledChats.Count}*\n\n" +
            $"*–ö–æ–º–∞–Ω–¥—ã:*\n" +
            $"‚Ä¢ `/suspicious list` - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö\n" +
            $"‚Ä¢ `/suspicious ai <on|off> <userId> <chatId>` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å AI –¥–µ—Ç–µ–∫—Ç\n" +
            $"‚Ä¢ `/suspicious approve <userId> <chatId>` - –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" +
            $"‚Ä¢ `/suspicious ban <userId> <chatId>` - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" +
            $"‚Ä¢ `/suspicious cleanup <userId> <chatId>` - –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤";

        await _messageService.SendAdminNotificationAsync(
            AdminNotificationType.SystemInfo,
            new SimpleNotificationData(message.From!, message.Chat, statusMessage),
            cancellationToken
        );

        _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-—á–∞—Ç");
    }

    private async Task HandleListCommand(Message message, CancellationToken cancellationToken)
    {
        var aiDetectUsers = _moderationService.GetAiDetectUsers();

        if (aiDetectUsers.Count == 0)
        {
            await _messageService.SendAdminNotificationAsync(
                AdminNotificationType.SystemInfo,
                new SimpleNotificationData(message.From!, message.Chat, "üìù *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å AI –¥–µ—Ç–µ–∫—Ç–æ–º*\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º AI –¥–µ—Ç–µ–∫—Ç–æ–º."),
                cancellationToken
            );
            return;
        }

        var listText = $"üìù *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º AI –¥–µ—Ç–µ–∫—Ç–æ–º* ({aiDetectUsers.Count})\n\n";

        for (int i = 0; i < Math.Min(aiDetectUsers.Count, 10); i++) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
        {
            var (userId, chatId) = aiDetectUsers[i];
            listText += $"{i + 1}. ID: `{userId}` –≤ —á–∞—Ç–µ `{chatId}`\n";
        }

        if (aiDetectUsers.Count > 10)
        {
            listText += $"\n... –∏ –µ—â—ë {aiDetectUsers.Count - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π";
        }

        await _messageService.SendAdminNotificationAsync(
            AdminNotificationType.SystemInfo,
            new SimpleNotificationData(message.From!, message.Chat, listText),
            cancellationToken
        );

        _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å AI –¥–µ—Ç–µ–∫—Ç–æ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç");
    }

    private async Task ShowHelp(Message message, CancellationToken cancellationToken)
    {
        var helpText = """
üîç *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*

/suspicious stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/suspicious list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å AI –¥–µ—Ç–µ–∫—Ç–æ–º  
/suspicious help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:*
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–∏–º–∏–∫—Ä–∏–∏. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.

–î–ª—è –æ—Å–æ–±–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∫–ª—é—á–∏—Ç—å AI –¥–µ—Ç–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤—Å–µ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
""";

        await _messageService.SendAdminNotificationAsync(
            AdminNotificationType.SystemInfo,
            new SimpleNotificationData(message.From!, message.Chat, helpText),
            cancellationToken
        );
    }
} 