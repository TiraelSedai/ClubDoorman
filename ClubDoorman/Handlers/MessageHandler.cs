using System.Collections.Concurrent;
using System.Runtime.Caching;
using System.Text;
using ClubDoorman.Handlers.Commands;
using ClubDoorman.Infrastructure;
using ClubDoorman.Models;
using ClubDoorman.Models.Notifications;
using ClubDoorman.Services;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Extensions;

namespace ClubDoorman.Handlers;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
/// </summary>
public class MessageHandler : IUpdateHandler
{
    private readonly ITelegramBotClientWrapper _bot;
    private readonly IModerationService _moderationService;
    private readonly ICaptchaService _captchaService;
    private readonly IUserManager _userManager;
    private readonly ISpamHamClassifier _classifier;
    private readonly IBadMessageManager _badMessageManager;
    private readonly IAiChecks _aiChecks;
    private readonly GlobalStatsManager _globalStatsManager;
    private readonly IStatisticsService _statisticsService;
    private readonly ILogger<MessageHandler> _logger;
    private readonly IServiceProvider _serviceProvider;
    private readonly IUserFlowLogger _userFlowLogger;
    private readonly IMessageService _messageService;
    private readonly IChatLinkFormatter _chatLinkFormatter;
    private readonly IBotPermissionsService _botPermissionsService;

    // –§–ª–∞–≥–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
    private static readonly ConcurrentDictionary<string, byte> _joinedUserFlags = new();

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    /// </summary>
    /// <param name="bot">–ö–ª–∏–µ–Ω—Ç Telegram –±–æ—Ç–∞</param>
    /// <param name="moderationService">–°–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏</param>
    /// <param name="captchaService">–°–µ—Ä–≤–∏—Å –∫–∞–ø—á–∏</param>
    /// <param name="userManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</param>
    /// <param name="classifier">–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ø–∞–º–∞</param>
    /// <param name="badMessageManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–æ—Ö–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</param>
    /// <param name="aiChecks">AI –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <param name="globalStatsManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</param>
    /// <param name="statisticsService">–°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</param>
    /// <param name="serviceProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤</param>
    /// <param name="userFlowLogger">–õ–æ–≥–≥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–ª–æ—É</param>
    /// <param name="messageService">–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</param>
    /// <param name="chatLinkFormatter">–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã</param>
    /// <param name="botPermissionsService">–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞</param>
    /// <param name="logger">–õ–æ–≥–≥–µ—Ä</param>
    /// <exception cref="ArgumentNullException">–ï—Å–ª–∏ –ª—é–±–æ–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–≤–µ–Ω null</exception>
    public MessageHandler(
        ITelegramBotClientWrapper bot,
        IModerationService moderationService,
        ICaptchaService captchaService,
        IUserManager userManager,
        ISpamHamClassifier classifier,
        IBadMessageManager badMessageManager,
        IAiChecks aiChecks,
        GlobalStatsManager globalStatsManager,
        IStatisticsService statisticsService,
        IServiceProvider serviceProvider,
        IUserFlowLogger userFlowLogger,
        IMessageService messageService,
        IChatLinkFormatter chatLinkFormatter,
        IBotPermissionsService botPermissionsService,
        ILogger<MessageHandler> logger)
    {
        _bot = bot ?? throw new ArgumentNullException(nameof(bot));
        _moderationService = moderationService ?? throw new ArgumentNullException(nameof(moderationService));
        _captchaService = captchaService ?? throw new ArgumentNullException(nameof(captchaService));
        _userManager = userManager ?? throw new ArgumentNullException(nameof(userManager));
        _classifier = classifier ?? throw new ArgumentNullException(nameof(classifier));
        _badMessageManager = badMessageManager ?? throw new ArgumentNullException(nameof(badMessageManager));
        _aiChecks = aiChecks ?? throw new ArgumentNullException(nameof(aiChecks));
        _globalStatsManager = globalStatsManager ?? throw new ArgumentNullException(nameof(globalStatsManager));
        _statisticsService = statisticsService ?? throw new ArgumentNullException(nameof(statisticsService));
        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
        _userFlowLogger = userFlowLogger ?? throw new ArgumentNullException(nameof(userFlowLogger));
        _messageService = messageService ?? throw new ArgumentNullException(nameof(messageService));
        _chatLinkFormatter = chatLinkFormatter ?? throw new ArgumentNullException(nameof(chatLinkFormatter));
        _botPermissionsService = botPermissionsService ?? throw new ArgumentNullException(nameof(botPermissionsService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    /// </summary>
    /// <param name="update">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</param>
    /// <returns>true, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ</returns>
    public bool CanHandle(Update update)
    {
        return update?.Message != null || update?.EditedMessage != null;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    /// </summary>
    /// <param name="update">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</param>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏</param>
    /// <exception cref="ArgumentNullException">–ï—Å–ª–∏ update —Ä–∞–≤–µ–Ω null</exception>
    public async Task HandleAsync(Update update, CancellationToken cancellationToken = default)
    {
        if (update == null) throw new ArgumentNullException(nameof(update));
        if (update.Message == null && update.EditedMessage == null) 
            throw new ArgumentNullException(nameof(update.Message));

        var message = update.EditedMessage ?? update.Message!;
        var chat = message.Chat;

        _logger.LogDebug("MessageHandler –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –≤ —á–∞—Ç–µ {ChatId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", 
            message.MessageId, chat.Id, message.From?.Id);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist - –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
        // –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –∞–¥–º–∏–Ω-—á–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è (–¥–ª—è –∫–æ–º–∞–Ω–¥ /spam, /ham –∏ —Ç.–¥.)
        var isAdminChat = chat.Id == Config.AdminChatId || chat.Id == Config.LogAdminChatId;
        
        if (!Config.IsChatAllowed(chat.Id) && !isAdminChat)
        {
            _logger.LogDebug("–ß–∞—Ç {ChatId} ({ChatTitle}) –Ω–µ –≤ whitelist - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º", chat.Id, chat.Title);
            return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
        if (Config.DisabledChats.Contains(chat.Id))
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–æ—Ç –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        var isSilentMode = await _botPermissionsService.IsSilentModeAsync(chat.Id, cancellationToken);
        if (isSilentMode)
        {
            _logger.LogInformation("üîá –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤ —á–∞—Ç–µ {ChatId} ({ChatTitle}) - –±–æ—Ç –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", chat.Id, chat.Title);
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∫–æ–Ω—Ñ–∏–≥
        ChatSettingsManager.EnsureChatInConfig(chat.Id, chat.Title);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (message.Text?.StartsWith("/") == true)
        {
            await HandleCommandAsync(message, cancellationToken);
            return;
        }

        // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (chat.Type == ChatType.Private)
        {
            _logger.LogDebug("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç {ChatId} - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã", chat.Id);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (message.NewChatMembers != null && chat.Id != Config.AdminChatId)
        {
            await HandleNewMembersAsync(message, cancellationToken);
            return;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–Ω–µ –±–æ—Ç–æ–º
        if (message.LeftChatMember != null && message.From?.Id == _bot.BotId)
        {
            try
            {
                await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);
                _logger.LogDebug("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏");
            }
            return;
        }

        // –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
        if (message.SenderChat != null)
        {
            await HandleChannelMessageAsync(message, cancellationToken);
            return;
        }

        // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await HandleUserMessageAsync(message, isSilentMode, cancellationToken);
    }

    private async Task HandleCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var commandText = message.Text!.Split(' ')[0].ToLower();
        var command = commandText.StartsWith("/") ? commandText.Substring(1) : commandText;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if (command == "start")
        {
            // –ü–æ–ª—É—á–∞–µ–º StartCommandHandler –∏–∑ DI –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            var startHandler = _serviceProvider.GetRequiredService<StartCommandHandler>();
            await startHandler.HandleAsync(message, cancellationToken);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /suspicious
        if (command == "suspicious")
        {
            // –ü–æ–ª—É—á–∞–µ–º SuspiciousCommandHandler –∏–∑ DI –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            var suspiciousHandler = _serviceProvider.GetRequiredService<SuspiciousCommandHandler>();
            await suspiciousHandler.HandleAsync(message, cancellationToken);
            return;
        }

        // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (/spam, /ham, /check) - —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–∞—Ö
        var isAdminChat = message.Chat.Id == Config.AdminChatId || message.Chat.Id == Config.LogAdminChatId;
        if (isAdminChat && message.ReplyToMessage != null && (command == "spam" || command == "ham" || command == "check"))
        {
            await HandleAdminCommandAsync(message, command, cancellationToken);
        }
        
        // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º (/stat, /stats) - —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–∞—Ö
        if (isAdminChat && (command == "stat" || command == "stats"))
        {
            await HandleStatsCommandAsync(message, cancellationToken);
        }
        
        // –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (/say) - —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–∞—Ö
        if (isAdminChat && command == "say")
        {
            await HandleSayCommandAsync(message, cancellationToken);
        }
    }

    private async Task HandleAdminCommandAsync(Message message, string command, CancellationToken cancellationToken)
    {
        var replyToMessage = message.ReplyToMessage!;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–∫—Ä–æ–º–µ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤)
        if (replyToMessage.From?.Id == _bot.BotId && replyToMessage.ForwardDate == null)
        {
            await _messageService.SendUserNotificationAsync(message.From!, message.Chat, UserNotificationType.Warning, 
                new SimpleNotificationData(message.From!, message.Chat, "–†–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"), 
                cancellationToken);
            return;
        }

        var text = replyToMessage.Text ?? replyToMessage.Caption;
        _logger.LogDebug("–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /{Command}: –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç='{Text}' (–¥–ª–∏–Ω–∞={Length})", 
            command, string.IsNullOrWhiteSpace(text) ? "[–ü–£–°–¢–û–ô]" : text.Length > 100 ? text.Substring(0, 100) + "..." : text, 
            text?.Length ?? 0);

        if (string.IsNullOrWhiteSpace(text))
        {
            _logger.LogWarning("‚ùå –ö–æ–º–∞–Ω–¥–∞ /{Command} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", command);
            await _messageService.SendUserNotificationAsync(message.From!, message.Chat, UserNotificationType.Warning, 
                new SimpleNotificationData(message.From!, message.Chat, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞"), 
                cancellationToken);
            return;
        }

        switch (command)
        {
            case "check":
                await HandleCheckCommandAsync(message, text, replyToMessage, cancellationToken);
                break;
            case "spam":
                await HandleSpamCommandAsync(message, text, replyToMessage, cancellationToken);
                break;
            case "ham":
                await HandleHamCommandAsync(message, text, replyToMessage, cancellationToken);
                break;
        }
    }

    private async Task HandleCheckCommandAsync(Message message, string text, Message replyToMessage, CancellationToken cancellationToken)
    {
        var emojis = SimpleFilters.TooManyEmojis(text);
        var normalized = TextProcessor.NormalizeText(text);
        var lookalike = SimpleFilters.FindAllRussianWordsWithLookalikeSymbolsInNormalizedText(normalized);
        var hasStopWords = SimpleFilters.HasStopWords(normalized);
        var (spam, score) = await _classifier.IsSpam(normalized);
        var lookAlikeMsg = lookalike.Count == 0 ? "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" : string.Join(", ", lookalike);
        var msg =
            $"*–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n"
            + $"‚Ä¢ –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏: *{emojis}*\n"
            + $"‚Ä¢ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: *{hasStopWords}*\n"
            + $"‚Ä¢ –ú–∞—Å–∫–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞: *{lookAlikeMsg}*\n"
            + $"‚Ä¢ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: —Å–ø–∞–º *{spam}*, —Å–∫–æ—Ä *{score}*\n\n"
            + $"_–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏, —Ç–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ_";
        await _messageService.SendUserNotificationAsync(message.From!, message.Chat, UserNotificationType.SystemInfo, 
            new SimpleNotificationData(message.From!, message.Chat, msg), 
            cancellationToken);
    }

    private async Task HandleSpamCommandAsync(Message message, string text, Message replyToMessage, CancellationToken cancellationToken)
    {
        _logger.LogInformation("üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /spam –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{Text}'", text);
        await _classifier.AddSpam(text);
        await _badMessageManager.MarkAsBad(text);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await _messageService.SendUserNotificationAsync(message.From!, message.Chat, UserNotificationType.Success, 
            new SimpleNotificationData(message.From!, message.Chat, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞"), 
            cancellationToken);
            
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∞–º –ø—Ä–∏–º–µ—Ä–∞
        var adminData = new SimpleNotificationData(
            message.From!, 
            message.Chat, 
            $"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {Utils.FullName(message.From!)} –¥–æ–±–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –°–ü–ê–ú–ê:\n\n`{text.Substring(0, Math.Min(text.Length, 200))}{(text.Length > 200 ? "..." : "")}`"
        );
        await _messageService.SendAdminNotificationAsync(AdminNotificationType.SystemInfo, adminData, cancellationToken);
        
        _logger.LogInformation("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /spam —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    }

    private async Task HandleHamCommandAsync(Message message, string text, Message replyToMessage, CancellationToken cancellationToken)
    {
        _logger.LogInformation("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /ham –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{Text}'", text);
        await _classifier.AddHam(text);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º Markdown –æ—à–∏–±–∫—É)
        await _messageService.SendUserNotificationAsync(message.From!, message.Chat, UserNotificationType.Success, 
            new SimpleNotificationData(message.From!, message.Chat, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –ù–ï\\-—Å–ø–∞–º–∞"), 
            cancellationToken);
            
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ù–ï-—Å–ø–∞–º –ø—Ä–∏–º–µ—Ä–∞
        var adminData = new SimpleNotificationData(
            message.From!, 
            message.Chat, 
            $"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {Utils.FullName(message.From!)} –¥–æ–±–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –ù–ï-—Å–ø–∞–º–∞:\n\n`{text.Substring(0, Math.Min(text.Length, 200))}{(text.Length > 200 ? "..." : "")}`"
        );
        await _messageService.SendAdminNotificationAsync(AdminNotificationType.SystemInfo, adminData, cancellationToken);
        
        _logger.LogInformation("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /ham —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    }

    private async Task HandleStatsCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var report = _statisticsService.GetAllStats();
        var sb = new StringBuilder();
        sb.AppendLine("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:*\n");
        foreach (var (chatId, stats) in report.OrderBy(x => x.Value.ChatTitle))
        {
            var sum = stats.KnownBadMessage + stats.BlacklistBanned + stats.StoppedCaptcha + stats.LongNameBanned;
            if (sum == 0) continue;
            Chat? chat = null;
            try { chat = await _bot.GetChat(chatId); } catch { }
            sb.AppendLine();
            if (chat != null)
                sb.AppendLine($"{_chatLinkFormatter.GetChatLink(chat)} (`{chat.Id}`) [{ChatSettingsManager.GetChatType(chat.Id)}]:");
            else
                sb.AppendLine($"{_chatLinkFormatter.GetChatLink(chatId, stats.ChatTitle)} (`{chatId}`) [{ChatSettingsManager.GetChatType(chatId)}]:");
            sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: *{sum}*");
            if (stats.BlacklistBanned > 0)
                sb.AppendLine($"‚ñ´Ô∏è –ü–æ –±–ª–µ–∫–ª–∏—Å—Ç–∞–º: *{stats.BlacklistBanned}*");
            if (stats.StoppedCaptcha > 0)
                sb.AppendLine($"‚ñ´Ô∏è –ù–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: *{stats.StoppedCaptcha}*");
            if (stats.KnownBadMessage > 0)
                sb.AppendLine($"‚ñ´Ô∏è –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: *{stats.KnownBadMessage}*");
            if (stats.LongNameBanned > 0)
                sb.AppendLine($"‚ñ´Ô∏è –ó–∞ –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: *{stats.LongNameBanned}*");
        }
        if (sb.Length <= 35)
            sb.AppendLine("\n–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ üéâ");
        
        await _messageService.SendUserNotificationAsync(
            message.From!,
            message.Chat,
            UserNotificationType.SystemInfo,
            new SimpleNotificationData(message.From!, message.Chat, sb.ToString()),
            cancellationToken
        );
    }

    private async Task HandleSayCommandAsync(Message message, CancellationToken cancellationToken)
    {
        var parts = message.Text!.Split(' ', 3);
        if (parts.Length < 3)
        {
            await _messageService.SendUserNotificationAsync(
                message.From!,
                message.Chat,
                UserNotificationType.Warning,
                new SimpleNotificationData(message.From!, message.Chat, "–§–æ—Ä–º–∞—Ç: /say @username —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /say user_id —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                cancellationToken
            );
            return;
        }
        
        var target = parts[1];
        var textToSend = parts[2];
        long? userId = null;
        
        if (target.StartsWith("@"))
        {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ userId –ø–æ username —Å—Ä–µ–¥–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∫—ç—à—É)
            userId = TryFindUserIdByUsername(target.Substring(1));
        }
        else if (long.TryParse(target, out var id))
        {
            userId = id;
        }
        
        if (userId == null)
        {
            await _messageService.SendUserNotificationAsync(
                message.From!,
                message.Chat,
                UserNotificationType.Warning,
                new SimpleNotificationData(message.From!, message.Chat, $"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."),
                cancellationToken
            );
            return;
        }

        try
        {
            await _bot.SendMessage(userId.Value, textToSend, parseMode: ParseMode.Markdown);
            await _messageService.SendUserNotificationAsync(
                message.From!,
                message.Chat,
                UserNotificationType.Success,
                new SimpleNotificationData(message.From!, message.Chat, $"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}"),
                cancellationToken
            );
        }
        catch (Exception ex)
        {
            await _messageService.SendUserNotificationAsync(
                message.From!,
                message.Chat,
                UserNotificationType.Warning,
                new SimpleNotificationData(message.From!, message.Chat, $"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}: {ex.Message}"),
                cancellationToken
            );
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ userId –ø–æ username —Å—Ä–µ–¥–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∫—ç—à—É)
    private long? TryFindUserIdByUsername(string username)
    {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MemoryCache –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        // –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å MemoryCache: –∏—â–µ–º –ø–æ –∫–ª—é—á–∞–º, –≥–¥–µ username –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è
        foreach (var item in MemoryCache.Default)
        {
            if (item.Value is string text && text.Contains(username, StringComparison.OrdinalIgnoreCase))
            {
                // –ö–ª—é—á–∏ –≤–∏–¥–∞ chatId_userId
                var parts = item.Key.ToString().Split('_');
                if (parts.Length == 2 && long.TryParse(parts[1], out var uid))
                    return uid;
            }
        }
        return null;
    }

    private async Task HandleNewMembersAsync(Message message, CancellationToken cancellationToken)
    {
        if (message.NewChatMembers == null)
        {
            _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö");
            return;
        }

        foreach (var newUser in message.NewChatMembers.Where(x => x != null && !x.IsBot))
        {
            var joinKey = $"joined_{message.Chat.Id}_{newUser.Id}";
            if (!_joinedUserFlags.ContainsKey(joinKey))
            {
                _logger.LogInformation("==================== –ù–û–í–´–ô –£–ß–ê–°–¢–ù–ò–ö ====================\n" +
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}, username={Username}) –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É '{ChatTitle}' (id={ChatId})\n" +
                    "========================================================", 
                    Utils.FullName(newUser), newUser.Id, newUser.Username ?? "-", message.Chat.Title ?? "-", message.Chat.Id);

                _joinedUserFlags.TryAdd(joinKey, 1);
                _ = Task.Run(async () => { 
                    await Task.Delay(15000); 
                    _joinedUserFlags.TryRemove(joinKey, out _); 
                });
            }

            await ProcessNewUserAsync(message, newUser, cancellationToken);
        }
    }

    private async Task ProcessNewUserAsync(Message userJoinMessage, User user, CancellationToken cancellationToken)
    {
        if (user == null)
        {
            _logger.LogWarning("ProcessNewUserAsync –≤—ã–∑–≤–∞–Ω —Å null –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            return;
        }

        if (userJoinMessage?.Chat == null)
        {
            _logger.LogWarning("ProcessNewUserAsync –≤—ã–∑–≤–∞–Ω —Å null —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —á–∞—Ç–æ–º");
            return;
        }

        var chat = userJoinMessage.Chat;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (_moderationService == null)
        {
            _logger.LogError("_moderationService —Ä–∞–≤–µ–Ω null –≤ ProcessNewUserAsync");
            return;
        }

        var nameResult = await _moderationService.CheckUserNameAsync(user);
        if (nameResult.Action == ModerationAction.Ban)
        {
            await BanUserForLongName(userJoinMessage, user, nameResult.Reason, null, cancellationToken);
            return;
        }
        if (nameResult.Action == ModerationAction.Report)
        {
            await BanUserForLongName(userJoinMessage, user, nameResult.Reason, TimeSpan.FromMinutes(10), cancellationToken);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—É–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var clubUser = await _userManager.GetClubUsername(user.Id);
        if (clubUser != null)
        {
            _logger.LogDebug("User is {Name} from club", clubUser);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª—ç–∫–ª–∏—Å—Ç–∞
        if (await _userManager.InBanlist(user.Id))
        {
            await BanBlacklistedUser(userJoinMessage, user, cancellationToken);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
        var captchaKey = _captchaService.GenerateKey(chat.Id, user.Id);
        if (_captchaService.GetCaptchaInfo(captchaKey) != null)
        {
            _logger.LogDebug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–∞–ø—á—É");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞–ø—á—É
        var captchaInfo = await _captchaService.CreateCaptchaAsync(chat, user, userJoinMessage);
        if (captchaInfo == null)
        {
            _logger.LogInformation($"[NO_CAPTCHA] –ö–∞–ø—á–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —á–∞—Ç–∞ {chat.Id}");
            return;
        }
    }

    private async Task HandleChannelMessageAsync(Message message, CancellationToken cancellationToken)
    {
        var chat = message.Chat;
        var senderChat = message.SenderChat!;

        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —á–∞—Ç–∞
        if (senderChat.Id == chat.Id)
            return;

        // –†–∞–∑—Ä–µ—à–∞–µ–º –≤ announcement —á–∞—Ç–∞—Ö
        if (ChatSettingsManager.GetChatType(chat.Id) == "announcement")
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        try
        {
            var chatFull = await _bot.GetChat(chat, cancellationToken);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
            if (chat.Type == ChatType.Supergroup && message.IsAutomaticForward)
                return;
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {ChatId}", chat.Id);
        }

        // –ê–≤—Ç–æ–±–∞–Ω –∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (Config.ChannelAutoBan)
        {
            await AutoBanChannel(message, cancellationToken);
        }
        else
        {
            // –ü—Ä–æ—Å—Ç–æ —Ä–µ–ø–æ—Ä—Ç–∏–º
            _logger.LogInformation("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ {ChannelTitle} –≤ —á–∞—Ç–µ {ChatTitle} - —Ä–µ–ø–æ—Ä—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç", 
                senderChat.Title, chat.Title);
        }
    }

    private async Task HandleUserMessageAsync(Message message, bool isSilentMode, CancellationToken cancellationToken)
    {
        var user = message.From;
        var chat = message.Chat;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if (user == null)
        {
            _logger.LogDebug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if (user.IsBot)
        {
            _logger.LogDebug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ {BotId}", user.Id);
            return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç.–¥.)
        if (message.LeftChatMember != null)
        {
            _logger.LogDebug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
        var captchaKey = _captchaService.GenerateKey(chat.Id, user.Id);
        if (_captchaService.GetCaptchaInfo(captchaKey) != null)
        {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É
            try
            {
                await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–ø—á—É");
            }
            return;
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª—ç–∫–ª–∏—Å—Ç–∞ lols.bot (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö)
        _logger.LogDebug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot", user.Id);
        if (await _userManager.InBanlist(user.Id))
        {
            await HandleBlacklistBan(message, user, chat, cancellationToken);
            return;
        }
        _logger.LogDebug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ", user.Id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (_moderationService.IsUserApproved(user.Id, chat.Id))
        {
            _logger.LogDebug("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω –≤ —á–∞—Ç–µ {ChatId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é", user.Id, chat.Id);
            return;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        var messageText = message.Text ?? message.Caption ?? "[–º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä/—Ñ–∞–π–ª]";
        _userFlowLogger.LogFirstMessage(user, chat, messageText);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var isChannelDiscussion = await IsChannelDiscussion(chat, message);
        var userType = isChannelDiscussion ? "–∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞" : "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫";
        
        _logger.LogInformation("==================== –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ù–ï–û–î–û–ë–†–ï–ù–ù–û–ì–û ====================\n" +
            "{UserType}: {User} (id={UserId}, username={Username}) –≤ '{ChatTitle}' (id={ChatId})\n" +
            "–°–æ–æ–±—â–µ–Ω–∏–µ: {Text}\n" +
            "================================================================", 
            userType, Utils.FullName(user), user.Id, user.Username ?? "-", chat.Title ?? "-", chat.Id, 
            (message.Text ?? message.Caption)?.Substring(0, Math.Min((message.Text ?? message.Caption)?.Length ?? 0, 100)) ?? "[–º–µ–¥–∏–∞]");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤–∏—á–∫–æ–≤
        if (Config.DeleteForwardedMessages && message.ForwardOrigin != null)
        {
            _logger.LogInformation("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤–∏—á–∫–∞ {User} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId})", 
                Utils.FullName(user), user.Id, chat.Title ?? "-", chat.Id);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try
            {
                await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
                var notificationMessage = await _messageService.SendUserNotificationWithReplyAsync(user, chat, UserNotificationType.MessageDeleted, 
                    new SimpleNotificationData(user, chat, "–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤–∏—á–∫–æ–≤ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã"), 
                    cancellationToken);
                
                // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                _ = Task.Run(async () =>
                {
                    try
                    {
                        await Task.Delay(TimeSpan.FromSeconds(10), cancellationToken);
                        await _bot.DeleteMessage(chat.Id, notificationMessage.MessageId, cancellationToken);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–≤–∏—á–∫–∞");
            }
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—É–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var clubName = await _userManager.GetClubUsername(user.Id);
        if (!string.IsNullOrEmpty(clubName))
        {
            _logger.LogDebug("User is {Name} from club", clubName);
            return;
        }

        // AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        var profileAnalysisResult = await PerformAiProfileAnalysis(message, user, chat, cancellationToken);
        if (profileAnalysisResult)
        {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
            return;
        }

        // –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        _userFlowLogger.LogModerationStarted(user, chat, messageText);
        var moderationResult = await _moderationService.CheckMessageAsync(message);
        _userFlowLogger.LogModerationResult(user, chat, moderationResult.Action.ToString(), moderationResult.Reason, moderationResult.Confidence);
        
        switch (moderationResult.Action)
        {
            case ModerationAction.Allow:
                _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {Reason}", moderationResult.Reason);
                var allowedMessageText = message.Text ?? message.Caption ?? "";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –¥–µ—Ç–µ–∫—Ç –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                var aiDetectBlocked = await _moderationService.CheckAiDetectAndNotifyAdminsAsync(user, chat, message);
                
                // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω AI –¥–µ—Ç–µ–∫—Ç–æ–º
                if (!aiDetectBlocked)
                {
                    await _moderationService.IncrementGoodMessageCountAsync(user, chat, allowedMessageText);
                }
                break;
            
            case ModerationAction.Ban:
                _userFlowLogger.LogUserBanned(user, chat, moderationResult.Reason);
                await AutoBan(message, moderationResult.Reason, cancellationToken);
                break;
            
            case ModerationAction.Delete:
                _logger.LogInformation("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {Reason}", moderationResult.Reason);
                try
                {
                    await DeleteAndReportMessage(message, moderationResult.Reason, isSilentMode, cancellationToken);
                    _logger.LogInformation("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {Reason}", moderationResult.Reason);
                }
                break;
            
            case ModerationAction.Report:
                _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {Reason}", moderationResult.Reason);
                await DontDeleteButReportMessage(message, user, isSilentMode, cancellationToken);
                break;
            
            case ModerationAction.RequireManualReview:
                _logger.LogInformation("–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {Reason}", moderationResult.Reason);
                await DontDeleteButReportMessage(message, user, isSilentMode, cancellationToken);
                break;
        }
    }

    private async Task<bool> IsChannelDiscussion(Chat chat, Message message)
    {
        try
        {
            if (chat.Type != ChatType.Supergroup)
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            var isAutoForward = message.IsAutomaticForward;
            
            if (isAutoForward)
            {
                _logger.LogDebug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: chat={ChatId}, autoForward={AutoForward}", 
                    chat.Id, message.IsAutomaticForward);
            }
            
            return isAutoForward;
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞ {ChatId}", chat.Id);
            return false;
        }
    }

    private async Task BanUserForLongName(Message? userJoinMessage, User user, string reason, TimeSpan? banDuration, CancellationToken cancellationToken)
    {
        try
        {
            var chat = userJoinMessage?.Chat!;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π - –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (chat.Type == ChatType.Private)
            {
                _logger.LogWarning("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {ChatId} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", chat.Id);
                var errorData = new ErrorNotificationData(
                    new InvalidOperationException("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"),
                    "–ë–∞–Ω –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è",
                    user,
                    chat
                );
                await _messageService.SendAdminNotificationAsync(AdminNotificationType.PrivateChatBanAttempt, errorData, cancellationToken);
                return;
            }
            
            await _bot.BanChatMember(
                chat.Id, 
                user.Id,
                banDuration.HasValue ? DateTime.UtcNow + banDuration.Value : null,
                revokeMessages: true
            );
            
            if (userJoinMessage != null)
            {
                await _bot.DeleteMessage(userJoinMessage.Chat.Id, userJoinMessage.MessageId, cancellationToken);
            }

            var banType = banDuration.HasValue ? "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç" : "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω";
            var banData = new AutoBanNotificationData(user, chat, banType, reason, userJoinMessage?.MessageId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥-—á–∞—Ç
            if (userJoinMessage != null)
            {
                await _messageService.ForwardToLogWithNotificationAsync(userJoinMessage, LogNotificationType.BanForLongName, banData, cancellationToken);
            }
            else
            {
                await _messageService.SendLogNotificationAsync(LogNotificationType.BanForLongName, banData, cancellationToken);
            }
            
            _userFlowLogger.LogUserBanned(user, chat, reason);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è");
        }
    }

    private async Task BanBlacklistedUser(Message userJoinMessage, User user, CancellationToken cancellationToken)
    {
        try
        {
            var chat = userJoinMessage.Chat;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π - –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (chat.Type == ChatType.Private)
            {
                _logger.LogWarning("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {ChatId} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", chat.Id);
                var errorData = new ErrorNotificationData(
                    new InvalidOperationException("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"),
                    "–ë–∞–Ω –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞",
                    user,
                    chat
                );
                await _messageService.SendAdminNotificationAsync(AdminNotificationType.PrivateChatBanAttempt, errorData, cancellationToken);
                return;
            }
            
            var banUntil = DateTime.UtcNow + TimeSpan.FromMinutes(240);
            await _bot.BanChatMember(chat.Id, user.Id, banUntil, revokeMessages: true, cancellationToken: cancellationToken);
            
            await _bot.DeleteMessage(chat.Id, userJoinMessage.MessageId, cancellationToken);
            
            _userFlowLogger.LogUserBanned(user, chat, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ");
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
        }
    }

    private async Task AutoBanChannel(Message message, CancellationToken cancellationToken)
    {
        try
        {
            var chat = message.Chat;
            var senderChat = message.SenderChat!;
            
            await _bot.DeleteMessage(chat, message.MessageId, cancellationToken);
            await _bot.BanChatSenderChat(chat, senderChat.Id, cancellationToken);
            
            var channelData = new ChannelMessageNotificationData(senderChat, chat, message.Text ?? "[–º–µ–¥–∏–∞]");
            await _messageService.ForwardToAdminWithNotificationAsync(message, AdminNotificationType.ChannelMessage, channelData, cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª");
            var errorData = new ErrorNotificationData(
                new InvalidOperationException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª"),
                "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞",
                null,
                message.Chat
            );
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.ChannelError, errorData, cancellationToken);
        }
    }

    private async Task AutoBan(Message message, string reason, CancellationToken cancellationToken)
    {
        var user = message.From;
        var chat = message.Chat;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π - –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (chat.Type == ChatType.Private)
        {
            _logger.LogWarning("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ {ChatId} - –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", chat.Id);
            var errorData = new ErrorNotificationData(
                new InvalidOperationException("–ü–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"),
                reason,
                user,
                chat
            );
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.PrivateChatBanAttempt, errorData, cancellationToken);
            return;
        }
        
        // –§–æ—Ä–≤–∞—Ä–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        var autoBanData = new AutoBanNotificationData(
            user, 
            message.Chat, 
            "–ê–≤—Ç–æ–±–∞–Ω", 
            reason, 
            message.MessageId, 
            LinkToMessage(message.Chat, message.MessageId)
        );
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã
        var logNotificationType = reason.Contains("–ò–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ") 
            ? LogNotificationType.AutoBanKnownSpam 
            : LogNotificationType.AutoBanBlacklist;
            
        await _messageService.ForwardToLogWithNotificationAsync(message, logNotificationType, autoBanData, cancellationToken);
        
        await _bot.DeleteMessage(message.Chat, message.MessageId, cancellationToken: cancellationToken);
        await _bot.BanChatMember(message.Chat, user.Id, revokeMessages: false, cancellationToken: cancellationToken);
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
        _moderationService.CleanupUserFromAllLists(user.Id, message.Chat.Id);
    }

    private async Task DeleteAndReportMessage(Message message, string reason, bool isSilentMode, CancellationToken cancellationToken)
    {
        _logger.LogDebug("–ù–∞—á–∏–Ω–∞–µ–º DeleteAndReportMessage –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {MessageId} –≤ —á–∞—Ç–µ {ChatId}", message.MessageId, message.Chat.Id);
        
        var user = message.From;
        var deletionMessagePart = $"{reason}";

        try
        {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞
            var callbackDataBan = $"ban_{message.Chat.Id}_{user.Id}";
            MemoryCache.Default.Add(callbackDataBan, message, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(12) });
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = callbackDataBan },
                    new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "noop" },
                    new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = $"approve_{user.Id}" }
                }
            });

            var deletionData = new AutoBanNotificationData(
                user, 
                message.Chat, 
                deletionMessagePart, 
                reason, 
                message.MessageId, 
                LinkToMessage(message.Chat, message.MessageId)
            );
            
            // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var template = _messageService.GetTemplates().GetAdminTemplate(AdminNotificationType.AutoBan);
            var messageText = _messageService.GetTemplates().FormatNotificationTemplate(template, deletionData);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (isSilentMode)
            {
                messageText = $"üîá **–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º**\n\n{messageText}";
            }
            
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await _bot.ForwardMessage(
                new ChatId(Config.AdminChatId),
                message.Chat.Id,
                message.MessageId,
                cancellationToken: cancellationToken
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await _bot.SendMessage(
                Config.AdminChatId,
                messageText,
                parseMode: ParseMode.Markdown,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç");
        }
        catch (Exception e)
        {
            _logger.LogError(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç");
            // Fallback —É–±—Ä–∞–Ω - –∞–≤—Ç–æ–±–∞–Ω—ã —Ç–µ–ø–µ—Ä—å –∏–¥—É—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥-—á–∞—Ç
            _logger.LogDebug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç, –Ω–æ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–±–∞–Ω–æ–≤");
        }
        
        try
        {
            _logger.LogDebug("–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {MessageId} –∏–∑ —á–∞—Ç–∞ {ChatId}", message.MessageId, message.Chat.Id);
            await _bot.DeleteMessage(message.Chat.Id, message.MessageId, cancellationToken: cancellationToken);
            deletionMessagePart += ", —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.";
            _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ");
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to delete message {MessageId} from chat {ChatId}", message.MessageId, message.Chat.Id);
            deletionMessagePart += ", —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —É–¥–∞–ª–µ–Ω–æ (–Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –º–æ–≥—É—â–µ—Å—Ç–≤–∞?).";
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º)
        if (!isSilentMode)
        {
            var warningKey = $"warning_{message.Chat.Id}_{user.Id}";
            var existingWarning = MemoryCache.Default.Get(warningKey);
            
            if (existingWarning == null)
            {
                try
                {
                    var warningData = new SimpleNotificationData(user, message.Chat, "–Ω–æ–≤–∏—á–æ–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
                    var sentWarn = await _messageService.SendUserNotificationWithReplyAsync(
                        user, 
                        message.Chat, 
                        UserNotificationType.ModerationWarning, 
                        warningData, 
                        cancellationToken
                    );
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—ç—à–µ (–Ω–∞ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                    MemoryCache.Default.Add(warningKey, sentWarn.MessageId, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(10) });
                    
                    DeleteMessageLater(sentWarn, TimeSpan.FromSeconds(40), cancellationToken);
                    _logger.LogDebug("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 40 —Å–µ–∫—É–Ω–¥");
                }
                catch (Exception e)
                {
                    _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                }
            }
            else
            {
                _logger.LogDebug("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId} –≤ —á–∞—Ç–µ {ChatId} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", user.Id, message.Chat.Id);
            }
        }
    }

    private async Task DontDeleteButReportMessage(Message message, User user, bool isSilentMode, CancellationToken cancellationToken)
    {
        try
        {
            var suspiciousData = new SuspiciousMessageNotificationData(
                user, 
                message.Chat, 
                message.Text ?? message.Caption ?? "[–º–µ–¥–∏–∞]", 
                message.MessageId
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–≤–∞—Ä–¥ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏)
            await SendSuspiciousMessageWithButtons(message, user, suspiciousData, isSilentMode, cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            var errorData = new ErrorNotificationData(
                new InvalidOperationException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏",
                user,
                message.Chat
            );
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.SystemError, errorData, cancellationToken);
        }
    }
    
    private async Task SendSuspiciousMessageWithButtons(Message message, User user, SuspiciousMessageNotificationData data, bool isSilentMode, CancellationToken cancellationToken)
    {
        try
        {
            // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            var forward = await _bot.ForwardMessage(
                new ChatId(Config.AdminChatId),
                message.Chat.Id,
                message.MessageId,
                cancellationToken: cancellationToken
            );
            
            var template = _messageService.GetTemplates().GetAdminTemplate(AdminNotificationType.SuspiciousMessage);
            var messageText = _messageService.GetTemplates().FormatNotificationTemplate(template, data);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (isSilentMode)
            {
                messageText = $"üîá **–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º**\n\n{messageText}";
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-—á–∞—Ç–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: –±–∞–Ω, –ø—Ä–æ–ø—É—Å–∫, —Å–≤–æ–π)
            var callbackDataBan = $"ban_{message.Chat.Id}_{user.Id}";
            MemoryCache.Default.Add(callbackDataBan, message, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(12) });
            
            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = callbackDataBan },
                    new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "noop" },
                    new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = $"approve_{user.Id}" }
                }
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ä–≤–∞—Ä–¥
            await _bot.SendMessage(
                Config.AdminChatId,
                messageText,
                parseMode: ParseMode.Markdown,
                replyParameters: forward,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );
            
            _logger.LogDebug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {User} –≤ —á–∞—Ç–µ {Chat}", 
                Utils.FullName(user), message.Chat.Title);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏");
            // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await _messageService.SendAdminNotificationAsync(AdminNotificationType.SuspiciousMessage, data, cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    /// </summary>
    private async Task HandleBlacklistBan(Message message, User user, Chat chat, CancellationToken cancellationToken)
    {
        var messageText = message.Text ?? message.Caption ?? "[–º–µ–¥–∏–∞/—Å—Ç–∏–∫–µ—Ä/—Ñ–∞–π–ª]";
        _logger.LogWarning("üö´ –ë–õ–≠–ö–õ–ò–°–¢ LOLS.BOT: {UserName} (id={UserId}) –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) –Ω–∞–ø–∏—Å–∞–ª: {MessageText}", 
            FullName(user.FirstName, user.LastName), user.Id, chat.Title, chat.Id, 
            messageText.Length > 100 ? messageText.Substring(0, 100) + "..." : messageText);
        
        _userFlowLogger.LogUserBanned(user, chat, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ lols.bot");
        
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        try
        {
            var blacklistData = new AutoBanNotificationData(
                user, 
                message.Chat, 
                "–ê–≤—Ç–æ–±–∞–Ω –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot", 
                "–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                message.MessageId, 
                LinkToMessage(message.Chat, message.MessageId)
            );
            await _messageService.ForwardToLogWithNotificationAsync(message, LogNotificationType.AutoBanBlacklist, blacklistData, cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç");
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try
        {
            await _bot.DeleteMessage(message.Chat, message.MessageId, cancellationToken: cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
        }
        
        // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4 —á–∞—Å–∞ (–∫–∞–∫ –≤ IntroFlowService)
        try
        {
            var banUntil = DateTime.UtcNow + TimeSpan.FromMinutes(240);
            await _bot.BanChatMember(chat.Id, user.Id, untilDate: banUntil, revokeMessages: true, cancellationToken: cancellationToken);
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        _statisticsService.IncrementBlacklistBan(message.Chat.Id);
        _globalStatsManager.IncBan(message.Chat.Id, message.Chat.Title ?? "");
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
        if (_userManager.RemoveApproval(user.Id))
        {
            try
            {
                var removedData = new SimpleNotificationData(user, message.Chat, "—É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∞–Ω–∞ –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É");
                await _messageService.SendAdminNotificationAsync(AdminNotificationType.RemovedFromApproved, removedData, cancellationToken);
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö");
            }
        }
        
        _logger.LogInformation("‚úÖ –ê–í–¢–û–ë–ê–ù –ó–ê–í–ï–†–®–ï–ù: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 4 —á–∞—Å–∞ –≤ —á–∞—Ç–µ '{ChatTitle}' (id={ChatId}) –ø–æ –±–ª—ç–∫–ª–∏—Å—Ç—É lols.bot", 
            FullName(user.FirstName, user.LastName), user.Id, message.Chat.Title, message.Chat.Id);
    }

    private static string FullName(string firstName, string? lastName) =>
        string.IsNullOrEmpty(lastName) ? firstName : $"{firstName} {lastName}";

    private static string LinkToMessage(Chat chat, long messageId) =>
        chat.Type == ChatType.Supergroup ? LinkToSuperGroupMessage(chat, messageId)
        : chat.Username == null ? ""
        : LinkToGroupWithNameMessage(chat, messageId);

    private static string LinkToSuperGroupMessage(Chat chat, long messageId) => $"https://t.me/c/{chat.Id.ToString()[4..]}/{messageId}";

    private static string LinkToGroupWithNameMessage(Chat chat, long messageId) => $"https://t.me/{chat.Username}/{messageId}";

    private void DeleteMessageLater(Message message, TimeSpan after = default, CancellationToken cancellationToken = default)
    {
        if (after == default)
            after = TimeSpan.FromMinutes(5);
        _ = Task.Run(
            async () =>
            {
                try
                {
                    await Task.Delay(after, cancellationToken);
                    await _bot.DeleteMessage(message.Chat.Id, message.MessageId, cancellationToken: cancellationToken);
                }
                catch (Exception ex) when (ex is not OperationCanceledException)
                {
                    _logger.LogWarning(ex, "DeleteMessage");
                }
            },
            cancellationToken
        );
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    /// </summary>
    /// <returns>true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</returns>
    private async Task<bool> PerformAiProfileAnalysis(Message message, User user, Chat chat, CancellationToken cancellationToken)
    {
        _logger.LogDebug("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} ({UserName})", 
            user.Id, FullName(user.FirstName, user.LastName));
        _logger.LogDebug("üîç TRACE: PerformAiProfileAnalysis –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        
        try
        {
            var result = await _aiChecks.GetAttentionBaitProbability(user);
            _logger.LogDebug("üîç TRACE: AiChecks.GetAttentionBaitProbability –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            _logger.LogInformation("ü§ñ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={Probability}, –ø—Ä–∏—á–∏–Ω–∞={Reason}", 
                user.Id, result.SpamProbability.Probability, result.SpamProbability.Reason);

            // –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ - –¥–∞–µ–º —Ä–∏–¥–æ–Ω–ª–∏
            if (result.SpamProbability.Probability > 0.7) // –ü–æ—Ä–æ–≥ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            {
                _logger.LogWarning("üö´ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={Probability}", 
                    user.Id, result.SpamProbability.Probability);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try
                {
                    await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ");
                }

                // –î–∞–µ–º —Ä–∏–¥–æ–Ω–ª–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç
                try
                {
                    var untilDate = DateTime.UtcNow.AddMinutes(10);
                    await _bot.RestrictChatMember(
                        chat.Id, 
                        user.Id, 
                        new ChatPermissions
                        {
                            CanSendMessages = false,
                            CanSendAudios = false,
                            CanSendDocuments = false,
                            CanSendPhotos = false,
                            CanSendVideos = false,
                            CanSendVideoNotes = false,
                            CanSendVoiceNotes = false,
                            CanSendPolls = false,
                            CanSendOtherMessages = false,
                            CanAddWebPagePreviews = false,
                            CanChangeInfo = false,
                            CanInviteUsers = false,
                            CanPinMessages = false,
                            CanManageTopics = false
                        },
                        untilDate: (DateTime?)untilDate,
                        cancellationToken: cancellationToken
                    );
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞—Ç—å —Ä–∏–¥–æ–Ω–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
                var aiProfileData = new AiProfileAnalysisData(
            user, 
            chat, 
            result.SpamProbability.Probability, 
            result.SpamProbability.Reason, 
            result.NameBio, 
            message.Text ?? message.Caption ?? "[–º–µ–¥–∏–∞]", 
            result.Photo, 
            message.MessageId
        );
        await _messageService.SendAiProfileAnalysisAsync(aiProfileData, cancellationToken);

                _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
                _userFlowLogger.LogUserRestricted(user, chat, $"AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: {result.SpamProbability.Reason}", TimeSpan.FromMinutes(10));
                return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            }
            else
            {
                _logger.LogDebug("‚úÖ AI –∞–Ω–∞–ª–∏–∑: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å={Probability})", 
                    user.Id, result.SpamProbability.Probability);
            }
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ AI –∞–Ω–∞–ª–∏–∑–∞
        }

        return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false - –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑–æ–ø–∞—Å–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é
    }


} 