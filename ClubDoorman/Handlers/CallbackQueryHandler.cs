using System.Runtime.Caching;
using ClubDoorman.Infrastructure;
using ClubDoorman.Services;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace ClubDoorman.Handlers;

/// <summary>
/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
/// </summary>
public class CallbackQueryHandler : IUpdateHandler
{
    private readonly TelegramBotClient _bot;
    private readonly ICaptchaService _captchaService;
    private readonly IUserManager _userManager;
    private readonly BadMessageManager _badMessageManager;
    private readonly IStatisticsService _statisticsService;
    private readonly AiChecks _aiChecks;
    private readonly ILogger<CallbackQueryHandler> _logger;

    public CallbackQueryHandler(
        TelegramBotClient bot,
        ICaptchaService captchaService,
        IUserManager userManager,
        BadMessageManager badMessageManager,
        IStatisticsService statisticsService,
        AiChecks aiChecks,
        ILogger<CallbackQueryHandler> logger)
    {
        _bot = bot;
        _captchaService = captchaService;
        _userManager = userManager;
        _badMessageManager = badMessageManager;
        _statisticsService = statisticsService;
        _aiChecks = aiChecks;
        _logger = logger;
    }

    public bool CanHandle(Update update)
    {
        return update.CallbackQuery != null;
    }

    public async Task HandleAsync(Update update, CancellationToken cancellationToken = default)
    {
        var callbackQuery = update.CallbackQuery!;
        var cbData = callbackQuery.Data;
        
        if (string.IsNullOrEmpty(cbData))
            return;

        var message = callbackQuery.Message;
        if (message == null)
            return;

        try
        {
            if (message.Chat.Id == Config.AdminChatId)
            {
                await HandleAdminCallback(callbackQuery, cancellationToken);
            }
            else
            {
                await HandleCaptchaCallback(callbackQuery, cancellationToken);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {Data}", cbData);
            await _bot.AnswerCallbackQuery(callbackQuery.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", cancellationToken: cancellationToken);
        }
    }

    private async Task HandleCaptchaCallback(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var cbData = callbackQuery.Data!;
        var message = callbackQuery.Message!;
        var chat = message.Chat;

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏: cap_{user.Id}_{x}
        var split = cbData.Split('_');
        if (split.Length < 3 || split[0] != "cap")
            return;

        if (!long.TryParse(split[1], out var userId) || !int.TryParse(split[2], out var chosen))
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (callbackQuery.From.Id != userId)
        {
            await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
            return;
        }

        var key = _captchaService.GenerateKey(chat.Id, userId);
        var captchaInfo = _captchaService.GetCaptchaInfo(key);
        
        if (captchaInfo == null)
        {
            _logger.LogWarning("–ö–∞–ø—á–∞ {Key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ", key);
            await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        await _bot.DeleteMessage(chat.Id, message.MessageId, cancellationToken);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        var isCorrect = await _captchaService.ValidateCaptchaAsync(key, chosen);
        
        if (!isCorrect)
        {
            await HandleFailedCaptcha(captchaInfo, cancellationToken);
        }
        else
        {
            await HandleSuccessfulCaptcha(callbackQuery.From, chat, captchaInfo, cancellationToken);
        }
    }

    private async Task HandleFailedCaptcha(Models.CaptchaInfo captchaInfo, CancellationToken cancellationToken)
    {
        _logger.LogInformation("==================== –ö–ê–ü–ß–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê ====================\n" +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId})\n" +
            "===========================================================", 
            Utils.FullName(captchaInfo.User), captchaInfo.User.Id, captchaInfo.ChatTitle ?? "-", captchaInfo.ChatId);

        _statisticsService.IncrementCaptcha(captchaInfo.ChatId);

        try
        {
            // –ë–∞–Ω–∏—Ä—É–µ–º –Ω–∞ 20 –º–∏–Ω—É—Ç
            await _bot.BanChatMember(
                captchaInfo.ChatId, 
                captchaInfo.User.Id, 
                DateTime.UtcNow + TimeSpan.FromMinutes(20), 
                revokeMessages: false,
                cancellationToken: cancellationToken
            );

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
            if (captchaInfo.UserJoinedMessage != null)
            {
                await _bot.DeleteMessage(captchaInfo.ChatId, captchaInfo.UserJoinedMessage.MessageId, cancellationToken);
            }

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
            _ = Task.Run(async () =>
            {
                try
                {
                    await Task.Delay(TimeSpan.FromMinutes(20), cancellationToken);
                    await _bot.UnbanChatMember(captchaInfo.ChatId, captchaInfo.User.Id, cancellationToken: cancellationToken);
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", captchaInfo.User.Id);
                }
            }, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞–ø—á—É");
        }
    }

    private async Task HandleSuccessfulCaptcha(User user, Chat chat, Models.CaptchaInfo captchaInfo, CancellationToken cancellationToken)
    {
        _logger.LogInformation("==================== –ö–ê–ü–ß–ê –ü–†–û–ô–î–ï–ù–ê ====================\n" +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId}) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
            "========================================================", 
            Utils.FullName(user), user.Id, chat.Title ?? "-", chat.Id);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        var displayName = !string.IsNullOrEmpty(user.FirstName)
            ? System.Net.WebUtility.HtmlEncode(Utils.FullName(user))
            : (!string.IsNullOrEmpty(user.Username) ? "@" + user.Username : "–≥–æ—Å—Ç—å");
        
        var mention = $"<a href=\"tg://user?id={user.Id}\">{displayName}</a>";
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö)
        var isNoAdGroup = IsNoAdGroup(chat.Id);
        var vpnAd = isNoAdGroup ? "" : "\n\n\nüìç <b>–ú–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã</b> \n <i>...</i>";
        
        string greetMsg;
        if (ChatSettingsManager.GetChatType(chat.Id) == "announcement")
        {
            greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏ –∏ —Å–ø–∞–º–æ–º –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°!{vpnAd}";
        }
        else
        {
            var mediaWarning = Config.IsMediaFilteringDisabledForChat(chat.Id) ? ", —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã" : ", –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã";
            greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —ç–º–æ–¥–∑–∏{mediaWarning} –∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã ‚Äî –æ–Ω–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°!{vpnAd}";
        }

        var sent = await _bot.SendMessage(chat.Id, greetMsg, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(20), cancellationToken);
                await _bot.DeleteMessage(chat.Id, sent.MessageId, cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        }, cancellationToken);
    }

    private async Task HandleAdminCallback(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var cbData = callbackQuery.Data!;
        var split = cbData.Split('_').ToList();

        try
        {
            if (split.Count > 1 && split[0] == "approve" && long.TryParse(split[1], out var approveUserId))
            {
                await HandleApproveUser(callbackQuery, approveUserId, cancellationToken);
            }
            else if (split.Count > 2 && split[0] == "ban" && long.TryParse(split[1], out var chatId) && long.TryParse(split[2], out var userId))
            {
                await HandleBanUser(callbackQuery, chatId, userId, cancellationToken);
            }
                    else if (split.Count > 1 && split[0] == "aiOk")
        {
            if (split.Count == 2 && long.TryParse(split[1], out var aiOkUserIdOld))
            {
                // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç aiOk_{userId} - —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                await HandleAiOkUser(callbackQuery, null, aiOkUserIdOld, cancellationToken);
            }
            else if (split.Count == 3 && long.TryParse(split[1], out var aiOkChatId) && long.TryParse(split[2], out var aiOkUserId))
            {
                // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç aiOk_{chatId}_{userId} - —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π + –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                await HandleAiOkUser(callbackQuery, aiOkChatId, aiOkUserId, cancellationToken);
            }
        }
            else if (cbData == "noop")
            {
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                await _bot.EditMessageReplyMarkup(callbackQuery.Message!.Chat.Id, callbackQuery.Message.MessageId, cancellationToken: cancellationToken);
            }

            await _bot.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ callback {Data}", cbData);
            await _bot.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", cancellationToken: cancellationToken);
        }
    }

    private async Task HandleApproveUser(CallbackQuery callbackQuery, long userId, CancellationToken cancellationToken)
    {
        // –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—Å–µ–≥–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
        await _userManager.Approve(userId);
        
        var adminName = GetAdminDisplayName(callbackQuery.From);
        await _bot.SendMessage(
            Config.AdminChatId,
            $"‚úÖ {adminName} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
            replyParameters: callbackQuery.Message?.MessageId,
            cancellationToken: cancellationToken
        );

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await _bot.EditMessageReplyMarkup(callbackQuery.Message!.Chat.Id, callbackQuery.Message.MessageId, cancellationToken: cancellationToken);
    }

    private async Task HandleBanUser(CallbackQuery callbackQuery, long chatId, long userId, CancellationToken cancellationToken)
    {
        var callbackDataBan = $"ban_{chatId}_{userId}";
        var userMessage = MemoryCache.Default.Remove(callbackDataBan) as Message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        var text = userMessage?.Caption ?? userMessage?.Text;
        if (!string.IsNullOrWhiteSpace(text))
        {
            await _badMessageManager.MarkAsBad(text);
        }

        try
        {
            // –ë–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await _bot.BanChatMember(new ChatId(chatId), userId, cancellationToken: cancellationToken);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            if (_userManager.RemoveApproval(userId, chatId, removeAll: true))
            {
                await _bot.SendMessage(
                    Config.AdminChatId,
                    $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –±–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {GetAdminDisplayName(callbackQuery.From)}",
                    replyParameters: callbackQuery.Message?.MessageId,
                    cancellationToken: cancellationToken
                );
            }

            var adminName = GetAdminDisplayName(callbackQuery.From);
            await _bot.SendMessage(
                Config.AdminChatId,
                $"üö´ {adminName} –∑–∞–±–∞–Ω–∏–ª, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ-–±–∞–Ω–∞",
                replyParameters: callbackQuery.Message?.MessageId,
                cancellationToken: cancellationToken
            );
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π callback");
            await _bot.SendMessage(
                Config.AdminChatId,
                "‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞? –°—Ö–æ–¥–∏—Ç–µ –∑–∞–±–∞–Ω—å—Ç–µ —Ä—É–∫–∞–º–∏",
                replyParameters: callbackQuery.Message?.MessageId,
                cancellationToken: cancellationToken
            );
        }

        // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try
        {
            if (userMessage != null)
                await _bot.DeleteMessage(userMessage.Chat, userMessage.MessageId, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await _bot.EditMessageReplyMarkup(callbackQuery.Message!.Chat.Id, callbackQuery.Message.MessageId, cancellationToken: cancellationToken);
    }

    private async Task HandleAiOkUser(CallbackQuery callbackQuery, long? chatId, long userId, CancellationToken cancellationToken)
    {
        // –ü–æ–º–µ—á–∞–µ–º AI –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—É—é
        _aiChecks.MarkUserOkay(userId);
        
        var adminName = GetAdminDisplayName(callbackQuery.From);
        var message = $"‚úÖ {adminName} –æ—Ç–º–µ—Ç–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π - AI –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω chatId - –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (chatId.HasValue)
        {
            try
            {
                // –°–Ω–∏–º–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞)
                await _bot.RestrictChatMember(
                    chatId.Value,
                    userId,
                    new ChatPermissions
                    {
                        CanSendMessages = true,
                        CanSendAudios = true,
                        CanSendDocuments = true,
                        CanSendPhotos = true,
                        CanSendVideos = true,
                        CanSendVideoNotes = true,
                        CanSendVoiceNotes = true,
                        CanSendPolls = true,
                        CanSendOtherMessages = true,
                        CanAddWebPagePreviews = true,
                        CanChangeInfo = false, // –≠—Ç–∏ –ø—Ä–∞–≤–∞ –æ–±—ã—á–Ω–æ –Ω–µ –¥–∞—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        CanInviteUsers = false,
                        CanPinMessages = false,
                        CanManageTopics = false
                    },
                    cancellationToken: cancellationToken
                );
                
                message += " + –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã";
                _logger.LogInformation("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {AdminName}", 
                    userId, chatId.Value, adminName);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}", userId, chatId.Value);
                message += " (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)";
            }
        }
        
        await _bot.SendMessage(
            Config.AdminChatId,
            message,
            replyParameters: callbackQuery.Message?.MessageId,
            cancellationToken: cancellationToken
        );

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await _bot.EditMessageReplyMarkup(callbackQuery.Message!.Chat.Id, callbackQuery.Message.MessageId, cancellationToken: cancellationToken);
    }

    private static string GetAdminDisplayName(User user)
    {
        return !string.IsNullOrEmpty(user.Username)
            ? user.Username
            : Utils.FullName(user);
    }

    private static bool IsNoAdGroup(long chatId)
    {
        return Config.NoVpnAdGroups.Contains(chatId);
    }
} 