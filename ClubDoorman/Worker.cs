using System.Collections.Concurrent;
using System.Diagnostics;
using System.Runtime.Caching;
using System.Text;
using Telegram.Bot;
using Telegram.Bot.Extensions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Text.Json;

namespace ClubDoorman;

internal sealed class Worker(
    ILogger<Worker> logger,
    SpamHamClassifier classifier,
    IUserManager userManager,
    BadMessageManager badMessageManager
) : BackgroundService
{
    private sealed record CaptchaInfo(
        long ChatId,
        string? ChatTitle,
        DateTime Timestamp,
        User User,
        int CorrectAnswer,
        CancellationTokenSource Cts,
        Message? UserJoinedMessage
    );

    private sealed class Stats(string? Title)
    {
        public string? ChatTitle = Title;
        public int StoppedCaptcha;
        public int BlacklistBanned;
        public int KnownBadMessage;
        public int LongNameBanned;
    }

    private readonly ConcurrentDictionary<string, CaptchaInfo> _captchaNeededUsers = new();
    // –î–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    private readonly ConcurrentDictionary<long, int> _goodUserMessages = new();
    // –î–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - —Å—á–µ—Ç—á–∏–∫ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º
    private readonly ConcurrentDictionary<string, int> _groupGoodUserMessages = new();
    private readonly ConcurrentDictionary<long, DateTime> _warnedUsers = new();
    private readonly TelegramBotClient _bot = new(Config.BotApi);
    private readonly ConcurrentDictionary<long, Stats> _stats = new();
    private readonly PeriodicTimer _timer = new(TimeSpan.FromHours(1));
    private readonly PeriodicTimer _banlistRefreshTimer = new(TimeSpan.FromHours(12));
    private readonly PeriodicTimer _membersCountUpdateTimer = new(TimeSpan.FromHours(8));
    private readonly ILogger<Worker> _logger = logger;
    private readonly SpamHamClassifier _classifier = classifier;
    private readonly IUserManager _userManager = userManager;
    private readonly BadMessageManager _badMessageManager = badMessageManager;
    private readonly GlobalStatsManager _globalStatsManager = new();
    private AiChecks _aiChecks = null!;
    private User _me = default!;
    private static readonly ConcurrentDictionary<string, byte> _joinedUserFlags = new();
    
    // –ì—Ä—É–ø–ø—ã, –≥–¥–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É VPN (–∏–∑ .env NO_VPN_AD_GROUPS)
    private static readonly HashSet<long> NoVpnAdGroups = 
        (Environment.GetEnvironmentVariable("NO_VPN_AD_GROUPS") ?? "")
        .Split(',', StringSplitOptions.RemoveEmptyEntries)
        .Select(id => long.TryParse(id.Trim(), out var val) ? val : (long?)null)
        .Where(id => id.HasValue)
        .Select(id => id.Value)
        .ToHashSet();

    static Worker()
    {
        var envVar = Environment.GetEnvironmentVariable("NO_VPN_AD_GROUPS");
        Console.WriteLine($"[DEBUG] NO_VPN_AD_GROUPS env var: '{envVar}'");
        Console.WriteLine($"[DEBUG] Loaded {NoVpnAdGroups.Count} groups without VPN ads: [{string.Join(", ", NoVpnAdGroups)}]");
    }

    private async Task CaptchaLoop(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            await Task.Delay(TimeSpan.FromSeconds(15), token);
            _ = BanNoCaptchaUsers();
        }
    }

    private async Task RefreshBanlistLoop(CancellationToken token)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–ª–∏—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        try 
        {
            _logger.LogInformation("–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–ª–∏—Å—Ç–∞ –∏–∑ lols.bot –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞");
            await _userManager.RefreshBanlist();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–ª–∏—Å—Ç–∞");
        }

        while (await _banlistRefreshTimer.WaitForNextTickAsync(token))
        {
            try
            {
                _logger.LogInformation("–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–ª–∏—Å—Ç –∏–∑ lols.bot");
                await _userManager.RefreshBanlist();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–ª–∏—Å—Ç–∞");
            }
        }
    }

    private async Task UpdateMembersCountLoop(CancellationToken stoppingToken)
    {
        while (await _membersCountUpdateTimer.WaitForNextTickAsync(stoppingToken))
        {
            try
            {
                await _globalStatsManager.UpdateAllMembersAsync(_bot);
                _logger.LogInformation("–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤");
            }
        }
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        ChatSettingsManager.InitConfigFileIfMissing();
        _ = CaptchaLoop(stoppingToken);
        _ = ReportStatistics(stoppingToken);
        _ = RefreshBanlistLoop(stoppingToken);
        _ = UpdateMembersCountLoop(stoppingToken);
        _classifier.Touch();
        const string offsetPath = "data/offset.txt";
        var offset = 0;
        if (System.IO.File.Exists(offsetPath))
        {
            var lines = await System.IO.File.ReadAllLinesAsync(offsetPath, stoppingToken);
            if (lines.Length > 0 && int.TryParse(lines[0], out offset))
                _logger.LogDebug("offset read ok");
        }

        _me = await _bot.GetMe(cancellationToken: stoppingToken);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
        _aiChecks = new AiChecks(_bot, _logger);
        
        _ = Task.Run(async () => {
            try {
                await _globalStatsManager.UpdateAllMembersAsync(_bot);
                await _globalStatsManager.UpdateZeroMemberChatsAsync(_bot);
                _logger.LogInformation("–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            } catch (Exception ex) {
                _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
            }
        });

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                offset = await UpdateLoop(offset, stoppingToken);
                if (offset % 100 == 0)
                    await System.IO.File.WriteAllTextAsync(offsetPath, offset.ToString(), stoppingToken);
            }
            catch (Exception e) when (e is not OperationCanceledException)
            {
                _logger.LogError(e, "ExecuteAsync");
                await Task.Delay(TimeSpan.FromSeconds(15), stoppingToken);
            }
        }
    }

    private async Task<int> UpdateLoop(int offset, CancellationToken stoppingToken)
    {
        var updates = await _bot.GetUpdates(
            offset,
            limit: 100,
            timeout: 100,
            allowedUpdates: [UpdateType.Message, UpdateType.EditedMessage, UpdateType.ChatMember, UpdateType.CallbackQuery],
            cancellationToken: stoppingToken
        );
        if (updates.Length == 0)
            return offset;
        offset = updates.Max(x => x.Id) + 1;
        string? mediaGroupId = null;
        foreach (var update in updates)
        {
            try
            {
                var prevMediaGroup = mediaGroupId;
                mediaGroupId = update.Message?.MediaGroupId;
                if (prevMediaGroup != null && prevMediaGroup == mediaGroupId)
                {
                    _logger.LogDebug("2+ message from an album, it could not have any text/caption, skip");
                    continue;
                }
                await HandleUpdate(update, stoppingToken);
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "UpdateLoop");
            }
        }
        return offset;
    }

    private async Task HandleUpdate(Update update, CancellationToken stoppingToken)
    {
        var chat = update.EditedMessage?.Chat ?? update.Message?.Chat ?? update.ChatMember?.Chat;
        if (chat != null)
            ChatSettingsManager.EnsureChatInConfig(chat.Id, chat.Title);

        if (update.CallbackQuery != null)
        {
            await HandleCallback(update);
            return;
        }
        if (update.ChatMember != null)
        {
            if (update.ChatMember.From.Id == _me.Id)
                return;
            await HandleChatMemberUpdated(update);
            return;
        }

        var message = update.EditedMessage ?? update.Message;
        if (message == null)
            return;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if (message.Text?.Trim().ToLower() == "/start")
        {
            if (message.Chat.Type == ChatType.Private)
            {
                var about =
$"""
<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –¥–ª—è Telegram-–≥—Ä—É–ø–ø</b>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üöÄ –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é?</b>

–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

<b>üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:</b>

<b>1)</b> –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-—Å–ø–∏—Å–∫–æ–≤, —Ç–∏—Ö–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ø–∞–º–µ—Ä–æ–≤

<b>2)</b> –ö–∞–ø—á–∞ 60 —Å–µ–∫—É–Ω–¥. –ù–µ —Ä–µ—à–∏–ª ‚Äî –±–ª–æ–∫ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π

<b>3)</b> –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –º–µ–¥–∏–∞/—Å—Å—ã–ª–æ–∫/—ç–º–æ–¥–∑–∏

<b>4)</b> –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º ‚Üí –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

<b>5)</b> 3 —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞!

<a href="https://telegra.ph/GateTroitsBot-04-19">üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>‚ö° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ 3 —à–∞–≥–∞:</b>

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
3Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üåü –ü–õ–ê–¢–ù–´–ï –ü–õ–ê–ù–´:</b>

üî• <b>–ë–ï–ó –†–ï–ö–õ–ê–ú–´</b> ‚Äî –≤—Å–µ–≥–æ <b>$5 –Ω–∞–≤—Å–µ–≥–¥–∞</b> 
   –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ

üíé <b>–ü–†–ï–ú–ò–£–ú</b> ‚Äî <b>$12/–≥–æ–¥</b>
   –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ø–∏—è –±–æ—Ç–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º ML-–¥–∞—Ç–∞—Å–µ—Ç–æ–º –ø–æ–¥ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã (–¥–æ 100)

üåê üí≥ –î–õ–Ø –ó–ê–ö–ê–ó–ê –ù–ê–ü–ò–°–ê–¢–¨ @momai 

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>

üë§ <b>–ù–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:</b>
   ‚Ä¢ –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
   ‚Ä¢ –ë–µ–∑ —Å—Å—ã–ª–æ–∫, —ç–º–æ–¥–∑–∏, –∫–∞—Ä—Ç–∏–Ω–æ–∫

üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:</b>
   ‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –±–æ—Ç—É –º–æ–∂–Ω–æ –¥–∞—Ç—å —á–µ—Ä–µ–∑ 3-4 –¥–Ω—è
   ‚Ä¢ –¢–∞–∫, –±–æ—Ç —Å–æ–±–µ—Ä—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ–¥–æ–±—Ä–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–µ –º–µ—à–∞—è —Å—Ç–∞—Ä–æ–∂–∏–ª–∞–º.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

<b>üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>

üìñ <a href="https://telegra.ph/GateTroitsBot-04-19">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
üíª <a href="https://github.com/momai/ClubDoorman">–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>

<b>üßº –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–º —á–∞—Ç–µ –±—É–¥–µ—Ç —á–∏—Å—Ç–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ!</b>
""";
                await _bot.SendMessage(message.Chat.Id, about, parseMode: ParseMode.Html);
            }
            return;
        }
        
        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
        if (Config.DisabledChats.Contains(chat.Id))
            return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∫–æ–≥–æ-—Ç–æ –∏—Å–∫–ª—é—á–∏–ª
        if (message.LeftChatMember != null && message.From?.Id == _me.Id)
        {
            try 
            {
                await _bot.DeleteMessage(chat.Id, message.MessageId, stoppingToken);
                _logger.LogDebug("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ/–∏—Å–∫–ª—é—á–µ–Ω–∏–∏");
            }
            return;
        }
        
        if (message.NewChatMembers != null && chat.Id != Config.AdminChatId)
        {
            foreach (var newUser in message.NewChatMembers.Where(x => !x.IsBot))
            {
                var joinKey = $"joined_{chat.Id}_{newUser.Id}";
                if (!_joinedUserFlags.ContainsKey(joinKey))
                {
                    _logger.LogInformation("==================== –ù–û–í–´–ô –£–ß–ê–°–¢–ù–ò–ö ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}, username={Username}) –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É '{ChatTitle}' (id={ChatId})\n========================================================", 
                        (newUser.FirstName + (string.IsNullOrEmpty(newUser.LastName) ? "" : " " + newUser.LastName)), newUser.Id, newUser.Username ?? "-", chat.Title ?? "-", chat.Id);
                    _joinedUserFlags.TryAdd(joinKey, 1);
                    _ = Task.Run(async () => { await Task.Delay(15000); _joinedUserFlags.TryRemove(joinKey, out _); });
                }
                await IntroFlow(message, newUser);
            }
            return;
        }

        if (chat.Id == Config.AdminChatId)
        {
            await AdminChatMessage(message);
            return;
        }

        if (message.SenderChat != null)
        {
            if (message.SenderChat.Id == chat.Id)
                return;
            if (ChatSettingsManager.GetChatType(chat.Id) == "announcement")
                return;
            // to get linked_chat_id we need ChatFullInfo
            var chatFull = await _bot.GetChat(chat, stoppingToken);
            var linked = chatFull.LinkedChatId;
            if (linked != null && linked == message.SenderChat.Id)
                return;

            if (Config.ChannelAutoBan)
            {
                try
                {
                    var fwd = await _bot.ForwardMessage(Config.AdminChatId, chat, message.MessageId, cancellationToken: stoppingToken);
                    await _bot.DeleteMessage(chat, message.MessageId, stoppingToken);
                    await _bot.BanChatSenderChat(chat, message.SenderChat.Id, stoppingToken);
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –≤ —á–∞—Ç–µ {chat.Title} –∑–∞–±–∞–Ω–µ–Ω –∫–∞–Ω–∞–ª {message.SenderChat.Title}",
                        replyParameters: fwd,
                        cancellationToken: stoppingToken
                    );
                }
                catch (Exception e)
                {
                    _logger.LogWarning(e, "Unable to ban");
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –≤ —á–∞—Ç–µ {chat.Title} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ {message.SenderChat.Title}. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞?",
                        cancellationToken: stoppingToken
                    );
                }
                return;
            }

            if (ChatSettingsManager.GetChatType(chat.Id) != "announcement")
                await DontDeleteButReportMessage(message, message.From!, stoppingToken);
            return;
        }

        var user = message.From!;
        var text = message.Text ?? message.Caption;

        if (text != null)
            MemoryCache.Default.Set(
                new CacheItem($"{chat.Id}_{user.Id}", text),
                new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(1) }
            );

        var key = UserToKey(chat.Id, user);
        if (_captchaNeededUsers.ContainsKey(key))
        {
            await _bot.DeleteMessage(chat.Id, message.MessageId, stoppingToken);
            return;
        }

        if (IsUserApproved(user.Id, message.Chat.Id))
            return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        var isChannelDiscussion = await IsChannelDiscussion(chat, message);
        var userType = isChannelDiscussion ? "–∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞" : "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫";
        
        _logger.LogInformation("==================== –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ù–ï–û–î–û–ë–†–ï–ù–ù–û–ì–û ====================\n{UserType}: {User} (id={UserId}, username={Username}) –≤ '{ChatTitle}' (id={ChatId})\n–°–æ–æ–±—â–µ–Ω–∏–µ: {Text}\n================================================================", 
            userType, Utils.FullName(user), user.Id, user.Username ?? "-", chat.Title ?? "-", chat.Id, text?.Substring(0, Math.Min(text.Length, 100)) ?? "[–º–µ–¥–∏–∞]");

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        ChatSettingsManager.EnsureChatInConfig(chat.Id, chat.Title);

        // At this point we are believing we see first-timers, and we need to check for spam
        var name = await _userManager.GetClubUsername(user.Id);
        if (!string.IsNullOrEmpty(name))
        {
            _logger.LogDebug("User is {Name} from club", name);
            return;
        }
        if (await _userManager.InBanlist(user.Id))
        {
            if (Config.BlacklistAutoBan)
            {
                var stats = _stats.GetOrAdd(chat.Id, new Stats(chat.Title));
                Interlocked.Increment(ref stats.BlacklistBanned);
                await _bot.BanChatMember(chat.Id, user.Id, revokeMessages: true, cancellationToken: stoppingToken);
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await _bot.DeleteMessage(chat.Id, message.MessageId, stoppingToken);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç
                if (message.NewChatMembers != null)
                {
                    _logger.LogDebug("–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
                }
            }
            else
            {
                const string reason = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª–µ–∫–ª–∏—Å—Ç–µ —Å–ø–∞–º–µ—Ä–æ–≤";
                await DeleteAndReportMessage(message, reason, stoppingToken);
            }
            return;
        }

        if (message.ReplyMarkup != null)
        {
            await AutoBan(message, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏", stoppingToken);
            return;
        }
        if (message.Story != null)
        {
            await DeleteAndReportMessage(message, "–°—Ç–æ—Ä–∏—Å", stoppingToken);
            return;
        }
        if (string.IsNullOrWhiteSpace(text))
        {
            _logger.LogDebug("Empty text/caption");
            // –ù–µ —Ä–µ–ø–æ—Ä—Ç–∏–º –º–µ–¥–∏–∞ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ) –≤ announcement-–≥—Ä—É–ø–ø–∞—Ö
            if (ChatSettingsManager.GetChatType(chat.Id) == "announcement" && (message.Photo != null || message.Sticker != null || message.Document != null || message.Video != null))
                return;
            await DontDeleteButReportMessage(message, user, stoppingToken);
            return;
        }
        if (_badMessageManager.KnownBadMessage(text))
        {
            await HandleBadMessage(message, user, stoppingToken);
            return;
        }
        var chatType = ChatSettingsManager.GetChatType(chat.Id);
        if (chatType == "announcement")
            return;
        var isAnnouncement = chatType == "announcement";
        if (!isAnnouncement && SimpleFilters.TooManyEmojis(text))
        {
            const string reason = "–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ–≤–∞—Ç–æ —ç–º–æ–¥–∂–∏";
            await DeleteAndReportMessage(message, reason, stoppingToken);
            return;
        }
        if (!isAnnouncement && (message.Photo != null || message.Sticker != null || message.Document != null || message.Video != null))
        {
            const string reason = "–í –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã";
            await DeleteAndReportMessage(message, reason, stoppingToken);
            return;
        }
        if (isAnnouncement && (message.Photo != null || message.Sticker != null || message.Document != null || message.Video != null))
        {
            // –í announcement-–≥—Ä—É–ø–ø–∞—Ö –Ω–µ —Ä–µ–ø–æ—Ä—Ç–∏–º –º–µ–¥–∏–∞
            return;
        }

        var normalized = TextProcessor.NormalizeText(text);

        var lookalike = SimpleFilters.FindAllRussianWordsWithLookalikeSymbolsInNormalizedText(normalized);
        if (lookalike.Count > 2)
        {
            var tailMessage = lookalike.Count > 5 ? ", –∏ –¥—Ä—É–≥–∏–µ" : "";
            var reason = $"–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ–≤–∞ –º–∞—Å–∫–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–¥ —Ä—É—Å—Å–∫–∏–µ: {string.Join(", ", lookalike.Take(5))}{tailMessage}";
            if (!Config.LookAlikeAutoBan)
            {
                await DeleteAndReportMessage(message, reason, stoppingToken);
                return;
            }

            await AutoBan(message, reason, stoppingToken);
            return;
        }

        if (SimpleFilters.HasStopWords(normalized))
        {
            const string reason = "–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞";
            await DeleteAndReportMessage(message, reason, stoppingToken);
            return;
        }
        var (spam, score) = await _classifier.IsSpam(normalized);
        if (spam)
        {
            var reason = $"ML —Ä–µ—à–∏–ª —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º, —Å–∫–æ—Ä {score}";
            await DeleteAndReportMessage(message, reason, stoppingToken);
            return;
        }
        // else - ham
        if (score > -0.6 && Config.LowConfidenceHamForward)
        {
            var forward = await _bot.ForwardMessage(Config.AdminChatId, chat.Id, message.MessageId, cancellationToken: stoppingToken);
            var postLink = LinkToMessage(chat, message.MessageId);
            var callbackDataBan = $"ban_{message.Chat.Id}_{user.Id}";
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –∏ –±–∞–Ω)
            MemoryCache.Default.Add(callbackDataBan, message, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(12) });
            await _bot.SendMessage(
                Config.AdminChatId,
                $"–ö–ª–∞—Å—Å–∏—Ñ–∞–µ—Ä –¥—É–º–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –ù–ï —Å–ø–∞–º, –Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Å –Ω–∏–∑–∫–∏–π: —Å–∫–æ—Ä {score}. –•–æ—Ä–æ—à–∞—è –∏–¥–µ—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞—Ç–∞—Å–µ—Ç.{Environment.NewLine}–Æ–∑–µ—Ä {FullName(user.FirstName, user.LastName)} –∏–∑ —á–∞—Ç–∞ {chat.Title}{Environment.NewLine}{postLink}",
                replyParameters: forward,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new InlineKeyboardButton("—É–¥–∞–ª–∏—Ç—å –∏ –∑–∞–±–∞–Ω–∏—Ç—å") { CallbackData = callbackDataBan },
                    new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = $"approve_{user.Id}" }
                }),
                cancellationToken: stoppingToken
            );
        }


        _logger.LogDebug("Classifier thinks its ham, score {Score}", score);

        // ========== AI –ü–†–û–í–ï–†–ö–ê –ü–†–û–§–ò–õ–ï–ô ==========
        // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –≥–¥–µ –≤–∫–ª—é—á–µ–Ω—ã AI –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (Config.OpenRouterApi != null && Config.IsAiEnabledForChat(chat.Id))
        {
            try 
            {
                var (attention, photo, bio) = await _aiChecks.GetAttentionBaitProbability(user);
                _logger.LogDebug("AI –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Probability}", user.Id, attention.Probability);
                
                if (attention.Probability >= Consts.LlmLowProbability)
                {
                    var keyboard = new List<InlineKeyboardButton>
                    {
                        new(Consts.BanButton) { CallbackData = $"ban_{message.Chat.Id}_{user.Id}" },
                        new(Consts.OkButton) { CallbackData = $"aiOk_{user.Id}" }
                    };

                    ReplyParameters? replyParams = null;
                    if (photo.Length != 0)
                    {
                        using var ms = new MemoryStream(photo);
                        var photoMsg = await _bot.SendPhoto(
                            Config.AdminChatId,
                            new InputFileStream(ms),
                            $"{bio}{Environment.NewLine}–°–æ–æ–±—â–µ–Ω–∏–µ:{Environment.NewLine}{text}",
                            cancellationToken: stoppingToken
                        );
                        replyParams = photoMsg;
                    }

                    var isHighRisk = attention.Probability >= Consts.LlmHighProbability;
                    var action = isHighRisk ? "–î–∞—ë–º —Ä–∏–¥–æ–Ω–ª–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç" : "–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏";
                    var at = user.Username == null ? "" : $" @{user.Username} ";
                    
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"ü§ñ AI: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º-–ø—Ä–æ—Ñ–∏–ª—è {attention.Probability * 100:F1}%. {action}{Environment.NewLine}{attention.Reason}{Environment.NewLine}–Æ–∑–µ—Ä {Utils.FullName(user)}{at} –∏–∑ —á–∞—Ç–∞ {chat.Title}{Environment.NewLine}{LinkToMessage(chat, message.MessageId)}",
                        replyMarkup: new InlineKeyboardMarkup(keyboard),
                        replyParameters: replyParams,
                        cancellationToken: stoppingToken
                    );

                    // –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–ø–∞–º–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
                    if (isHighRisk)
                    {
                        await _bot.DeleteMessage(chat, message.MessageId, cancellationToken: stoppingToken);
                        await _bot.RestrictChatMember(
                            chat.Id,
                            user.Id,
                            new ChatPermissions(false),
                            untilDate: DateTime.UtcNow.AddMinutes(10),
                            cancellationToken: stoppingToken
                        );
                        
                        _logger.LogInformation("AI –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ø–æ–ª—É—á–∏–ª —Ä–∏–¥–æ–Ω–ª–∏ –Ω–∞ 10 –º–∏–Ω—É—Ç (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ {Probability})", user.Id, attention.Probability);
                        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    }
                }
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            }
        }
        // ========== –ö–û–ù–ï–¶ AI –ü–†–û–í–ï–†–ö–ò ==========

        // Now we need a mechanism for users who have been writing non-spam for some time
        if (Config.UseNewApprovalSystem && !Config.GlobalApprovalMode)
        {
            // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º
            var groupUserKey = $"{message.Chat.Id}_{user.Id}";
            var goodInteractions = _groupGoodUserMessages.AddOrUpdate(groupUserKey, 1, (_, oldValue) => oldValue + 1);
            if (goodInteractions >= 3)
            {
                _logger.LogInformation(
                    "User {FullName} behaved well for the last {Count} messages in group {GroupTitle}, approving in this group",
                    FullName(user.FirstName, user.LastName),
                    goodInteractions,
                    message.Chat.Title ?? message.Chat.Id.ToString()
                );
                await _userManager.Approve(user.Id, message.Chat.Id);
                _groupGoodUserMessages.TryRemove(groupUserKey, out _);
                // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —é–∑–µ—Ä–∞ ---
                _warnedUsers.TryRemove(user.Id, out _);
                // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
            }
        }
        else
        {
            // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            var goodInteractions = _goodUserMessages.AddOrUpdate(user.Id, 1, (_, oldValue) => oldValue + 1);
            if (goodInteractions >= 3)
            {
                _logger.LogInformation(
                    "User {FullName} behaved well for the last {Count} messages, approving {Mode}",
                    FullName(user.FirstName, user.LastName),
                    goodInteractions,
                    Config.GlobalApprovalMode ? "globally" : "in old system"
                );
                await _userManager.Approve(user.Id, Config.GlobalApprovalMode ? null : message.Chat.Id);
                _goodUserMessages.TryRemove(user.Id, out _);
                // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —é–∑–µ—Ä–∞ ---
                _warnedUsers.TryRemove(user.Id, out _);
                // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
            }
        }
    }

    private async Task AutoBan(Message message, string reason, CancellationToken stoppingToken)
    {
        var user = message.From;
        var forward = await _bot.ForwardMessage(
            new ChatId(Config.AdminChatId),
            message.Chat.Id,
            message.MessageId,
            cancellationToken: stoppingToken
        );
        await _bot.SendMessage(
            Config.AdminChatId,
            $"–ê–≤—Ç–æ-–±–∞–Ω: {reason}{Environment.NewLine}–Æ–∑–µ—Ä {FullName(user.FirstName, user.LastName)} –∏–∑ —á–∞—Ç–∞ {message.Chat.Title}{Environment.NewLine}{LinkToMessage(message.Chat, message.MessageId)}",
            replyParameters: forward,
            cancellationToken: stoppingToken
        );
        await _bot.DeleteMessage(message.Chat, message.MessageId, cancellationToken: stoppingToken);
        await _bot.BanChatMember(message.Chat, user.Id, revokeMessages: false, cancellationToken: stoppingToken);
        _globalStatsManager.IncBan(message.Chat.Id, message.Chat.Title ?? "");
        if (_userManager.RemoveApproval(user.Id, message.Chat.Id, removeAll: true))
        {
            await _bot.SendMessage(
                Config.AdminChatId,
                $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {FullName(user.FirstName, user.LastName)} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∞–Ω–∞",
                cancellationToken: stoppingToken
            );
        }
    }

    private async Task HandleBadMessage(Message message, User user, CancellationToken stoppingToken)
    {
        try
        {
            var chat = message.Chat;
            var stats = _stats.GetOrAdd(chat.Id, new Stats(chat.Title));
            Interlocked.Increment(ref stats.KnownBadMessage);
            await _bot.DeleteMessage(chat, message.MessageId, stoppingToken);
            await _bot.BanChatMember(chat.Id, user.Id, cancellationToken: stoppingToken);
            _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
            if (_userManager.RemoveApproval(user.Id, message.Chat.Id, removeAll: true))
            {
                await _bot.SendMessage(
                    Config.AdminChatId,
                    $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {FullName(user.FirstName, user.LastName)} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –±–∞–Ω–∞ –∑–∞ —Å–ø–∞–º",
                    cancellationToken: stoppingToken
                );
            }
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to ban");
        }
    }

    private async Task HandleCallback(Update update)
    {
        var cb = update.CallbackQuery;
        Debug.Assert(cb != null);
        var cbData = cb.Data;
        if (cbData == null)
            return;
        var message = cb.Message;
        if (message == null || message.Chat.Id == Config.AdminChatId)
            await HandleAdminCallback(cbData, cb);
        else
            await HandleCaptchaCallback(update);
    }

    private async Task HandleCaptchaCallback(Update update)
    {
        var cb = update.CallbackQuery;
        Debug.Assert(cb != null);
        var cbData = cb.Data;
        if (cbData == null)
            return;
        var message = cb.Message;
        Debug.Assert(message != null);

        //$"cap_{user.Id}_{x}"
        var split = cbData.Split('_');
        if (split.Length < 3)
            return;
        if (split[0] != "cap")
            return;
        if (!long.TryParse(split[1], out var userId))
            return;
        if (!int.TryParse(split[2], out var chosen))
            return;
        // Prevent other people from ruining the flow
        if (cb.From.Id != userId)
        {
            await _bot.AnswerCallbackQuery(cb.Id);
            return;
        }

        var chat = message.Chat;
        var key = UserToKey(chat.Id, cb.From);
        var ok = _captchaNeededUsers.TryRemove(key, out var info);
        await _bot.DeleteMessage(chat, message.MessageId);
        if (!ok)
        {
            _logger.LogWarning("{Key} was not found in the dictionary _captchaNeededUsers", key);
            return;
        }
        Debug.Assert(info != null);
        await info.Cts.CancelAsync();
        if (info.CorrectAnswer != chosen)
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
            _logger.LogInformation("==================== –ö–ê–ü–ß–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId})\n===========================================================", info.User.FirstName + (string.IsNullOrEmpty(info.User.LastName) ? "" : " " + info.User.LastName), info.User.Id, info.ChatTitle ?? "-", info.ChatId);
            var stats = _stats.GetOrAdd(chat.Id, new Stats(chat.Title));
            Interlocked.Increment(ref stats.StoppedCaptcha);
            await _bot.BanChatMember(chat, userId, DateTime.UtcNow + TimeSpan.FromMinutes(20), revokeMessages: false);
            if (info.UserJoinedMessage != null)
                await _bot.DeleteMessage(chat, info.UserJoinedMessage.MessageId);
            UnbanUserLater(chat, userId);
        }
        else
        {
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
            _logger.LogInformation("==================== –ö–ê–ü–ß–ê –ü–†–û–ô–î–ï–ù–ê ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId}) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n========================================================", cb.From.FirstName + (string.IsNullOrEmpty(cb.From.LastName) ? "" : " " + cb.From.LastName), cb.From.Id, chat.Title ?? "-", chat.Id);
            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ä–∞–∑–Ω–æ–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ announcement —á–∞—Ç–æ–≤
            var displayName = !string.IsNullOrEmpty(cb.From.FirstName)
                ? System.Net.WebUtility.HtmlEncode(FullName(cb.From.FirstName, cb.From.LastName))
                : (!string.IsNullOrEmpty(cb.From.Username) ? "@" + cb.From.Username : "–≥–æ—Å—Ç—å");
            var mention = $"<a href=\"tg://user?id={cb.From.Id}\">{displayName}</a>";
            string greetMsg;
            
            // –†–µ–∫–ª–∞–º–∞ VPN –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö)
            var isNoAdGroup = NoVpnAdGroups.Contains(chat.Id);
            Console.WriteLine($"[DEBUG] Chat {chat.Id} ({chat.Title}) - No VPN ad: {isNoAdGroup}");
            var vpnAd = isNoAdGroup ? "" : "\n\n\nüåê <b>–¢–≤–æ–π VPN</b> ‚Äî @vpn_momai_dev_bot \n <i>–î–≤–∞ –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</i>";
            
            if (ChatSettingsManager.GetChatType(chat.Id) == "announcement")
            {
                greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.{vpnAd}";
            }
            else
            {
                greetMsg = $"üëã {mention}\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É, —ç–º–æ–¥–∑–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã ‚Äî –æ–Ω–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>.{vpnAd}";
            }
            var sent = await _bot.SendMessage(chat.Id, greetMsg, parseMode: ParseMode.Html);
            DeleteMessageLater(sent, TimeSpan.FromSeconds(20));
        }
    }

    private readonly List<string> _namesBlacklist = ["p0rn", "porn", "–ø–æ—Ä–Ω", "–ø0—Ä–Ω", "p–ærn", "–øo—Ä–Ω", "bot"];

    private async Task BanUserForLongName(
        Message? userJoinMessage,
        User user,
        string fullName,
        TimeSpan? banDuration,
        string banType,
        string nameDescription,
        Chat? chat = default)
    {
        try
        {
            chat = userJoinMessage?.Chat ?? chat;
            Debug.Assert(chat != null);
            
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ banDuration null - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞)
            await _bot.BanChatMember(
                chat.Id, 
                user.Id,
                banDuration.HasValue ? DateTime.UtcNow + banDuration.Value : null,
                revokeMessages: true  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–º –±–∞–Ω–µ
            if (!banDuration.HasValue)
                _userManager.RemoveApproval(user.Id);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
            if (userJoinMessage != null)
            {
                await _bot.DeleteMessage(userJoinMessage.Chat.Id, (int)userJoinMessage.MessageId);
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            var stats = _stats.GetOrAdd(chat.Id, new Stats(chat.Title));
            Interlocked.Increment(ref stats.LongNameBanned);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await _bot.SendMessage(
                Config.AdminChatId,
                $"{banType} –≤ —á–∞—Ç–µ *{chat.Title}* –∑–∞ {nameDescription} –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({fullName.Length} —Å–∏–º–≤–æ–ª–æ–≤):\n`{Markdown.Escape(fullName)}`",
                parseMode: ParseMode.Markdown
            );
            _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to ban user with long username");
        }
    }

    private async ValueTask IntroFlow(Message? userJoinMessage, User user, Chat? chat = default)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
        var fullName = $"{user.FirstName} {user.LastName}".Trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
        if (fullName.Length > 40)
        {
            var isPermanent = fullName.Length > 75;
            await BanUserForLongName(
                userJoinMessage,
                user,
                fullName,
                isPermanent ? null : TimeSpan.FromMinutes(10),
                isPermanent ? "üö´ –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω" : "–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç",
                isPermanent ? "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ" : "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ",
                chat
            );
            return;
        }

        _logger.LogDebug("Intro flow {@User}", user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª—É–±–∞
        var clubUser = await _userManager.GetClubUsername(user.Id);
        if (clubUser != null)
        {
            _logger.LogDebug("User is {Name} from club", clubUser);
            return;
        }

        chat = userJoinMessage?.Chat ?? chat;
        Debug.Assert(chat != null);
        var chatId = chat.Id;

        if (await BanIfBlacklisted(user, chat, userJoinMessage))
            return;

        var key = UserToKey(chatId, user);
        if (_captchaNeededUsers.ContainsKey(key))
        {
            _logger.LogDebug("This user is already awaiting captcha challenge");
            return;
        }

        const int challengeLength = 8;
        var correctAnswerIndex = Random.Shared.Next(challengeLength);
        var challenge = new List<int>(challengeLength);
        while (challenge.Count < challengeLength)
        {
            var rand = Random.Shared.Next(Captcha.CaptchaList.Count);
            if (!challenge.Contains(rand))
                challenge.Add(rand);
        }
        var correctAnswer = challenge[correctAnswerIndex];
        var keyboard = challenge
            .Select(x => new InlineKeyboardButton(Captcha.CaptchaList[x].Emoji) { CallbackData = $"cap_{user.Id}_{x}" })
            .ToList();

        ReplyParameters? replyParams = null;
        if (userJoinMessage != null)
            replyParams = userJoinMessage;

        var fullNameForDisplay = FullName(user.FirstName, user.LastName);
        var fullNameLower = fullNameForDisplay.ToLowerInvariant();
        var username = user.Username?.ToLower();
        if (_namesBlacklist.Any(fullNameLower.Contains) || username?.Contains("porn") == true || username?.Contains("p0rn") == true)
            fullNameForDisplay = "–Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞";

        var isApproved = IsUserApproved(user.Id, chatId);
        var welcomeMessage = isApproved
            ? $"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, [{Markdown.Escape(fullNameForDisplay)}](tg://user?id={user.Id})! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏: –Ω–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–µ {Captcha.CaptchaList[correctAnswer].Description}?"
            : $"–ü—Ä–∏–≤–µ—Ç, [{Markdown.Escape(fullNameForDisplay)}](tg://user?id={user.Id})! –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–µ {Captcha.CaptchaList[correctAnswer].Description}?";

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É VPN –∫ welcomeMessage (HTML-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö)
        var isNoAdGroup = NoVpnAdGroups.Contains(chatId);
        Console.WriteLine($"[DEBUG] Chat {chatId} - No VPN ad in captcha: {isNoAdGroup}");
        var vpnAdHtml = isNoAdGroup ? "" : "\n\n –¢–≤–æ–π VPN ‚Äî @vpn_momai_dev_bot\n<i>2 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</i>";
        var welcomeMessageHtml = (isApproved
            ? $"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <a href=\"tg://user?id={user.Id}\">{System.Net.WebUtility.HtmlEncode(fullNameForDisplay)}</a>! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏: –Ω–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–µ {Captcha.CaptchaList[correctAnswer].Description}?"
            : $"–ü—Ä–∏–≤–µ—Ç, <a href=\"tg://user?id={user.Id}\">{System.Net.WebUtility.HtmlEncode(fullNameForDisplay)}</a>! –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–∞ –∫–∞–∫–æ–π –∫–Ω–æ–ø–∫–µ {Captcha.CaptchaList[correctAnswer].Description}?")
            + vpnAdHtml;

        var del = await _bot.SendMessage(
            chatId,
            welcomeMessageHtml,
            parseMode: ParseMode.Html,
            replyParameters: replyParams,
            replyMarkup: new InlineKeyboardMarkup(keyboard)
        );

        var cts = new CancellationTokenSource();
        DeleteMessageLater(del, TimeSpan.FromMinutes(1.2), cts.Token);
        if (userJoinMessage != null)
        {
            DeleteMessageLater(userJoinMessage, TimeSpan.FromMinutes(1.2), cts.Token);
            _captchaNeededUsers.TryAdd(
                key,
                new CaptchaInfo(chatId, chat.Title, DateTime.UtcNow, user, correctAnswer, cts, userJoinMessage)
            );
        }
        else
        {
            _captchaNeededUsers.TryAdd(key, new CaptchaInfo(chatId, chat.Title, DateTime.UtcNow, user, correctAnswer, cts, null));
        }
        _globalStatsManager.IncCaptcha(chatId, chat.Title ?? "");
    }

    private static string GetChatLink(Chat chat)
    {
        var escapedTitle = Markdown.Escape(chat.Title ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç");
        if (!string.IsNullOrEmpty(chat.Username))
        {
            // –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
            return $"[{escapedTitle}](https://t.me/{chat.Username})";
        }
        var formattedId = chat.Id.ToString();
        if (formattedId.StartsWith("-100"))
        {
            // –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –±–µ–∑ username
            formattedId = formattedId.Substring(4);
            return $"[{escapedTitle}](https://t.me/c/{formattedId})";
        }
        else if (formattedId.StartsWith("-"))
        {
            // –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±–µ–∑ username
            return $"*{escapedTitle}*";
        }
        else
        {
            // –ö–∞–Ω–∞–ª –±–µ–∑ username
            return $"*{escapedTitle}*";
        }
    }

    private static string GetChatLink(long chatId, string? chatTitle)
    {
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ Chat
        var escapedTitle = Markdown.Escape(chatTitle ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç");
        var formattedId = chatId.ToString();
        if (formattedId.StartsWith("-100"))
        {
            formattedId = formattedId.Substring(4);
            return $"[{escapedTitle}](https://t.me/c/{formattedId})";
        }
        else if (formattedId.StartsWith("-"))
        {
            return $"*{escapedTitle}*";
        }
        else
        {
            if (chatTitle?.StartsWith("@") == true)
            {
                var username = chatTitle.Substring(1);
                return $"[{escapedTitle}](https://t.me/{username})";
            }
            return $"*{escapedTitle}*";
        }
    }

    private async Task ReportStatistics(CancellationToken ct)
    {
        while (await _timer.WaitForNextTickAsync(ct))
        {
            if (DateTimeOffset.UtcNow.Hour != 12)
                continue;

            var report = _stats.ToArray();
            _stats.Clear();
            var sb = new StringBuilder();
            sb.AppendLine("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*");
            
            foreach (var (chatId, stats) in report.OrderBy(x => x.Value.ChatTitle))
            {
                var sum = stats.KnownBadMessage + stats.BlacklistBanned + stats.StoppedCaptcha + stats.LongNameBanned;
                if (sum == 0) continue;
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∫—ç—à–µ
                Chat? chat = null;
                try
                {
                    chat = await _bot.GetChat(chatId);
                }
                catch { /* fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç */ }

                sb.AppendLine();
                if (chat != null)
                    sb.AppendLine($"{GetChatLink(chat)} (`{chat.Id}`) [{ChatSettingsManager.GetChatType(chat.Id)}]:");
                else
                    sb.AppendLine($"{GetChatLink(chatId, stats.ChatTitle)} (`{chatId}`) [{ChatSettingsManager.GetChatType(chatId)}]:");
                sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: *{sum}*");
                if (stats.BlacklistBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ü–æ –±–ª–µ–∫–ª–∏—Å—Ç–∞–º: *{stats.BlacklistBanned}*");
                if (stats.StoppedCaptcha > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ù–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: *{stats.StoppedCaptcha}*");
                if (stats.KnownBadMessage > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: *{stats.KnownBadMessage}*");
                if (stats.LongNameBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ó–∞ –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: *{stats.LongNameBanned}*");
            }

            if (sb.Length <= 35) // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            {
                sb.AppendLine("\n–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ üéâ");
            }

            try
            {
                await _bot.SendMessage(Config.AdminChatId, sb.ToString(), parseMode: ParseMode.Markdown, cancellationToken: ct);
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "Unable to sent report to admin chat");
            }
        }
    }

    private async Task<bool> BanIfBlacklisted(User user, Chat chat, Message? userJoinMessage = null)
    {
        if (!await _userManager.InBanlist(user.Id))
            return false;

        try
        {
            var stats = _stats.GetOrAdd(chat.Id, new Stats(chat.Title));
            Interlocked.Increment(ref stats.BlacklistBanned);
            
            // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4 —á–∞—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º revokeMessages: true —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            var banUntil = DateTime.UtcNow + TimeSpan.FromMinutes(240);
            await _bot.BanChatMember(chat.Id, user.Id, banUntil, revokeMessages: true);
            
            // –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (userJoinMessage != null)
            {
                try
                {
                    await _bot.DeleteMessage(chat.Id, userJoinMessage.MessageId);
                    _logger.LogDebug("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞");
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            if (_userManager.RemoveApproval(user.Id, chat.Id, removeAll: true))
            {
                await _bot.SendMessage(
                    Config.AdminChatId,
                    $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –±–∞–Ω–∞ –ø–æ –±–ª–µ–∫–ª–∏—Å—Ç—É",
                    parseMode: ParseMode.Markdown
                );
            }
            
            // –û—Ç–∫–ª—é—á–µ–Ω–æ
            // await _bot.SendMessage(
            //     Config.AdminChatId,
            //     $"üö´ *–ê–≤—Ç–æ–±–∞–Ω –Ω–∞ 4 —á–∞—Å–∞* –≤ —á–∞—Ç–µ *{chat.Title}*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ",
            //     parseMode: ParseMode.Markdown
            // );
            _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –∏–∑ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 4 —á–∞—Å–∞ –≤ —á–∞—Ç–µ {ChatTitle} (id={ChatId})", FullName(user.FirstName, user.LastName), user.Id, chat.Title, chat.Id);
            _globalStatsManager.IncBan(chat.Id, chat.Title ?? "");
            return true;
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to ban");
            await _bot.SendMessage(
                Config.AdminChatId,
                $"‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –±–ª–µ–∫–ª–∏—Å—Ç–∞ –≤ —á–∞—Ç–µ *{chat.Title}*. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞? –°—Ö–æ–¥–∏—Ç–µ –∑–∞–±–∞–Ω—å—Ç–µ —Ä—É–∫–∞–º–∏.",
                parseMode: ParseMode.Markdown
            );
        }

        return false;
    }

    private static string FullName(string firstName, string? lastName) =>
        string.IsNullOrEmpty(lastName) ? firstName : $"{firstName} {lastName}";

    private async Task HandleAdminCallback(string cbData, CallbackQuery cb)
    {
        var split = cbData.Split('_').ToList();
        if (split.Count > 1 && split[0] == "approve" && long.TryParse(split[1], out var approveUserId))
        {
            // –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—Å–µ–≥–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
            await _userManager.Approve(approveUserId);
            await _bot.SendMessage(
                new ChatId(Config.AdminChatId),
                $"‚úÖ [{Markdown.Escape(FullName(cb.From.FirstName, cb.From.LastName))}](tg://user?id={cb.From.Id}) –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
                parseMode: ParseMode.Markdown,
                replyParameters: cb.Message?.MessageId
            );
        }
        else if (split.Count > 2 && split[0] == "ban" && long.TryParse(split[1], out var chatId) && long.TryParse(split[2], out var userId))
        {
            var userMessage = MemoryCache.Default.Remove(cbData) as Message;
            var text = userMessage?.Caption ?? userMessage?.Text;
            if (!string.IsNullOrWhiteSpace(text))
                await _badMessageManager.MarkAsBad(text);
            try
            {
                await _bot.BanChatMember(new ChatId(chatId), userId);
                if (_userManager.RemoveApproval(userId, chatId, removeAll: true))
                {
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –±–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º [{Markdown.Escape(FullName(cb.From.FirstName, cb.From.LastName))}](tg://user?id={cb.From.Id})",
                        parseMode: ParseMode.Markdown,
                        replyParameters: cb.Message?.MessageId
                    );
                }
                await _bot.SendMessage(
                    new ChatId(Config.AdminChatId),
                    $"üö´ {AdminDisplayName(cb.From)} –∑–∞–±–∞–Ω–∏–ª, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ-–±–∞–Ω–∞",
                    parseMode: ParseMode.Markdown,
                    replyParameters: cb.Message?.MessageId
                );
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "Unable to ban");
                await _bot.SendMessage(
                    new ChatId(Config.AdminChatId),
                    $"‚ö†Ô∏è –ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–∞? –°—Ö–æ–¥–∏—Ç–µ –∑–∞–±–∞–Ω—å—Ç–µ —Ä—É–∫–∞–º–∏",
                    replyParameters: cb.Message?.MessageId
                );
            }
            try
            {
                if (userMessage != null)
                    await _bot.DeleteMessage(userMessage.Chat, userMessage.MessageId);
            }
            catch { }
        }
        else if (split.Count > 1 && split[0] == "aiOk" && long.TryParse(split[1], out var aiOkUserId))
        {
            // –ê–¥–º–∏–Ω –æ—Ç–º–µ—Ç–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
            _aiChecks.MarkUserOkay(aiOkUserId);
            await _bot.SendMessage(
                new ChatId(Config.AdminChatId),
                $"‚úÖ {AdminDisplayName(cb.From)} –æ—Ç–º–µ—Ç–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π - AI –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                replyParameters: cb.Message?.MessageId
            );
        }
        var msg = cb.Message;
        if (msg != null)
            await _bot.EditMessageReplyMarkup(msg.Chat.Id, msg.MessageId);
    }

    private async Task HandleChatMemberUpdated(Update update)
    {
        var chatMember = update.ChatMember;
        Debug.Assert(chatMember != null);
        var newChatMember = chatMember.NewChatMember;
        ChatSettingsManager.EnsureChatInConfig(chatMember.Chat.Id, chatMember.Chat.Title);
        switch (newChatMember.Status)
        {
            case ChatMemberStatus.Member:
            {
                _logger.LogDebug("New chat member new {@New} old {@Old}", newChatMember, chatMember.OldChatMember);
                if (chatMember.OldChatMember.Status == ChatMemberStatus.Left)
                {
                    var u = newChatMember.User;
                    var joinKey = $"joined_{chatMember.Chat.Id}_{u.Id}";
                    await Task.Delay(200); // –î–∞—Ç—å —à–∞–Ω—Å NewChatMembers –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥
                    if (!_joinedUserFlags.ContainsKey(joinKey))
                    {
                        _logger.LogInformation("==================== –ù–û–í–´–ô –£–ß–ê–°–¢–ù–ò–ö ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}, username={Username}) –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É '{ChatTitle}' (id={ChatId})\n========================================================", 
                            (u.FirstName + (string.IsNullOrEmpty(u.LastName) ? "" : " " + u.LastName)), u.Id, u.Username ?? "-", chatMember.Chat.Title ?? "-", chatMember.Chat.Id);
                        _joinedUserFlags.TryAdd(joinKey, 1);
                        _ = Task.Run(async () => { await Task.Delay(15000); _joinedUserFlags.TryRemove(joinKey, out _); });
                    }
                    _ = Task.Run(async () =>
                    {
                        await Task.Delay(TimeSpan.FromSeconds(2));
                        await IntroFlow(null, newChatMember.User, chatMember.Chat);
                    });
                }

                break;
            }
            case ChatMemberStatus.Kicked
            or ChatMemberStatus.Restricted:
                var user = newChatMember.User;
                var key = $"{chatMember.Chat.Id}_{user.Id}";
                var lastMessage = MemoryCache.Default.Get(key) as string;
                var tailMessage = string.IsNullOrWhiteSpace(lastMessage)
                    ? ""
                    : $" –ï–≥–æ/–µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—ã–ª–æ:\n```\n{lastMessage}\n```";
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
                if (_userManager.RemoveApproval(user.Id, chatMember.Chat.Id, removeAll: true))
                {
                    await _bot.SendMessage(
                        Config.AdminChatId,
                        $"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —á–∞—Ç–µ *{chatMember.Chat.Title}*",
                        parseMode: ParseMode.Markdown
                    );
                }
                
                await _bot.SendMessage(
                    new ChatId(Config.AdminChatId),
                    $"üîî –í —á–∞—Ç–µ *{chatMember.Chat.Title}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) –¥–∞–ª–∏ —Ä–∏–¥–æ–Ω–ª–∏ –∏–ª–∏ –∑–∞–±–∞–Ω–∏–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ Recent actions, –≤–æ–∑–º–æ–∂–Ω–æ ML –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ø–∞–º. –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫ - –∫–∏–¥–∞–π—Ç–µ –µ–≥–æ —Å—é–¥–∞.{tailMessage}",
                    parseMode: ParseMode.Markdown
                );
                break;
        }
    }

    private async Task DontDeleteButReportMessage(Message message, User user, CancellationToken stoppingToken)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (message.LeftChatMember != null)
        {
            _logger.LogDebug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return;
        }
        
        try
        {
            var forward = await _bot.ForwardMessage(
                new ChatId(Config.AdminChatId),
                message.Chat.Id,
                message.MessageId,
                cancellationToken: stoppingToken
            );
            var callbackData = $"ban_{message.Chat.Id}_{user.Id}";
            MemoryCache.Default.Add(callbackData, message, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(12) });
            await _bot.SendMessage(
                new ChatId(Config.AdminChatId),
                $"‚ö†Ô∏è *–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* - –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç '–Ω–æ–≤–æ–≥–æ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞. –°–æ–æ–±—â–µ–Ω–∏–µ *–ù–ï —É–¥–∞–ª–µ–Ω–æ*.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) –≤ —á–∞—Ç–µ *{message.Chat.Title}*",
                parseMode: ParseMode.Markdown,
                replyParameters: forward.MessageId,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = callbackData },
                    new InlineKeyboardButton("üëç ok") { CallbackData = "noop" },
                    new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = $"approve_{user.Id}" }
                }),
                cancellationToken: stoppingToken
            );
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await _bot.SendMessage(
                new ChatId(Config.AdminChatId),
                $"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ *{message.Chat.Title}* –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id})",
                parseMode: ParseMode.Markdown
            );
        }
    }

    private async Task DeleteAndReportMessage(Message message, string reason, CancellationToken stoppingToken)
    {
        var user = message.From;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (message.LeftChatMember != null)
        {
            _logger.LogDebug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            
            try
            {
                await _bot.DeleteMessage(message.Chat.Id, message.MessageId, cancellationToken: stoppingToken);
                _logger.LogDebug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–æ");
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
            return;
        }
        
        Message? forward = null;
        var deletionMessagePart = $"{reason}";
        
        try 
        {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            forward = await _bot.ForwardMessage(
                new ChatId(Config.AdminChatId),
                message.Chat.Id,
                message.MessageId,
                cancellationToken: stoppingToken
            );
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
        }
        
        try
        {
            await _bot.DeleteMessage(message.Chat.Id, message.MessageId, cancellationToken: stoppingToken);
            deletionMessagePart += ", —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.";
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "Unable to delete");
            deletionMessagePart += ", —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —É–¥–∞–ª–µ–Ω–æ (–Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –º–æ–≥—É—â–µ—Å—Ç–≤–∞?).";
        }
        // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –æ–±—ä—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ ---
        bool isBlacklisted = false;
        if (user != null && !IsUserApproved(user.Id, message.Chat.Id))
        {
            try {
                isBlacklisted = await _userManager.InBanlist(user.Id);
            } catch {}
        }
        if (user != null && !IsUserApproved(user.Id, message.Chat.Id) && !isBlacklisted && !_warnedUsers.ContainsKey(user.Id))
        {
            var displayName = !string.IsNullOrEmpty(user.FirstName)
                ? System.Net.WebUtility.HtmlEncode(FullName(user.FirstName, user.LastName))
                : (!string.IsNullOrEmpty(user.Username) ? "@" + user.Username : "–≥–æ—Å—Ç—å");
            var mention = $"<a href=\"tg://user?id={user.Id}\">{displayName}</a>";
            var warnMsg = $"üëã {mention}, –≤—ã –ø–æ–∫–∞ <b>–Ω–æ–≤–∏—á–æ–∫</b> –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n<b>–ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è</b> –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏—Å–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫—É:\n‚Ä¢ –Ω–µ–ª—å–∑—è —ç–º–æ–¥–∑–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ä–µ–∫–ª–∞–º—É  \n‚Ä¢ —Ä–∞–±–æ—Ç–∞–µ—Ç ML-–∞–Ω–∞–ª–∏–∑\n\n–ü–æ—Å–ª–µ 3 –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä—ã <b>–æ—Ç–∫–ª—é—á–∞—Ç—Å—è</b>, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ!";
            var sentWarn = await _bot.SendMessage(message.Chat.Id, warnMsg, parseMode: ParseMode.Html);
            _warnedUsers.TryAdd(user.Id, DateTime.UtcNow);
            DeleteMessageLater(sentWarn, TimeSpan.FromSeconds(40));
            _logger.LogInformation("–ü–æ–∫–∞–∑–∞–Ω–æ –æ–±—ä—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫—É: {User} (id={UserId}) –≤ —á–∞—Ç–µ {ChatTitle} (id={ChatId})", displayName, user.Id, message.Chat.Title, message.Chat.Id);
        }
        else if (user != null && !IsUserApproved(user.Id, message.Chat.Id) && isBlacklisted)
        {
            var displayName = !string.IsNullOrEmpty(user.FirstName)
                ? System.Net.WebUtility.HtmlEncode(FullName(user.FirstName, user.LastName))
                : (!string.IsNullOrEmpty(user.Username) ? "@" + user.Username : "–≥–æ—Å—Ç—å");
            _logger.LogInformation("–û–±—ä—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –ø–æ–∫–∞–∑–∞–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ): {User} (id={UserId}) –≤ —á–∞—Ç–µ {ChatTitle} (id={ChatId})", displayName, user.Id, message.Chat.Title, message.Chat.Id);
        }
        else if (user != null && !IsUserApproved(user.Id, message.Chat.Id))
        {
            var displayName = !string.IsNullOrEmpty(user.FirstName)
                ? System.Net.WebUtility.HtmlEncode(FullName(user.FirstName, user.LastName))
                : (!string.IsNullOrEmpty(user.Username) ? "@" + user.Username : "–≥–æ—Å—Ç—å");
            _logger.LogInformation("–û–±—ä—è—Å–Ω—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –ø–æ–∫–∞–∑–∞–Ω–æ (—É–∂–µ –±—ã–ª–æ) –Ω–æ–≤–∏—á–∫—É: {User} (id={UserId}) –≤ —á–∞—Ç–µ {ChatTitle} (id={ChatId})", displayName, user.Id, message.Chat.Title, message.Chat.Id);
        }
        // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
        var callbackDataBan = $"ban_{message.Chat.Id}_{user.Id}";
        MemoryCache.Default.Add(callbackDataBan, message, new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddHours(12) });
        var postLink = LinkToMessage(message.Chat, message.MessageId);
        var row = new List<InlineKeyboardButton>
        {
                new InlineKeyboardButton("ü§ñ –±–∞–Ω") { CallbackData = callbackDataBan },
                new InlineKeyboardButton("üò∂ –ø—Ä–æ–ø—É—Å–∫") { CallbackData = "noop" },
                new InlineKeyboardButton("ü•∞ —Å–≤–æ–π") { CallbackData = $"approve_{user.Id}" }
        };

        await _bot.SendMessage(
            new ChatId(Config.AdminChatId),
            $"‚ö†Ô∏è *{deletionMessagePart}*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{Markdown.Escape(FullName(user.FirstName, user.LastName))}](tg://user?id={user.Id}) –≤ —á–∞—Ç–µ *{message.Chat.Title}*\n{postLink}",
            parseMode: ParseMode.Markdown,
            replyParameters: forward,
            replyMarkup: new InlineKeyboardMarkup(row),
            cancellationToken: stoppingToken
        );
    }

    private static string LinkToMessage(Chat chat, long messageId) =>
        chat.Type == ChatType.Supergroup ? LinkToSuperGroupMessage(chat, messageId)
        : chat.Username == null ? ""
        : LinkToGroupWithNameMessage(chat, messageId);

    private static string LinkToSuperGroupMessage(Chat chat, long messageId) => $"https://t.me/c/{chat.Id.ToString()[4..]}/{messageId}";

    private static string LinkToGroupWithNameMessage(Chat chat, long messageId) => $"https://t.me/{chat.Username}/{messageId}";

    private async Task AdminChatMessage(Message message)
    {
        if (message is { ReplyToMessage: { } replyToMessage, Text: "/spam" or "/ham" or "/check" })
        {
            if (replyToMessage.From?.Id == _me.Id && replyToMessage.ForwardDate == null)
            {
                await _bot.SendMessage(
                    message.Chat.Id,
                    "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ —á—Ç–æ –≤—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –∏ —Ä–µ–ø–ª–∞–π–Ω—É–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∞ –Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥",
                    replyParameters: replyToMessage
                );
                return;
            }
            var text = replyToMessage.Text ?? replyToMessage.Caption;
            if (!string.IsNullOrWhiteSpace(text))
            {
                switch (message.Text)
                {
                    case "/check":
                    {
                        var emojis = SimpleFilters.TooManyEmojis(text);
                        var normalized = TextProcessor.NormalizeText(text);
                        var lookalike = SimpleFilters.FindAllRussianWordsWithLookalikeSymbolsInNormalizedText(normalized);
                        var hasStopWords = SimpleFilters.HasStopWords(normalized);
                        var (spam, score) = await _classifier.IsSpam(normalized);
                        var lookAlikeMsg = lookalike.Count == 0 ? "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" : string.Join(", ", lookalike);
                        var msg =
                            $"*–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n"
                            + $"‚Ä¢ –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏: *{emojis}*\n"
                            + $"‚Ä¢ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: *{hasStopWords}*\n"
                            + $"‚Ä¢ –ú–∞—Å–∫–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞: *{lookAlikeMsg}*\n"
                            + $"‚Ä¢ ML –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: —Å–ø–∞–º *{spam}*, —Å–∫–æ—Ä *{score}*\n\n"
                            + $"_–ï—Å–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏, —Ç–æ –≤ –¥–∞—Ç–∞—Å–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ_";
                        await _bot.SendMessage(message.Chat.Id, msg, parseMode: ParseMode.Markdown);
                        break;
                    }
                    case "/spam":
                        await _classifier.AddSpam(text);
                        await _badMessageManager.MarkAsBad(text);
                        await _bot.SendMessage(
                            message.Chat.Id,
                            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç, –∞ —Ç–∞–∫–∂–µ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ-–±–∞–Ω–∞",
                            replyParameters: replyToMessage
                        );
                        break;
                    case "/ham":
                        await _classifier.AddHam(text);
                        await _bot.SendMessage(
                            message.Chat.Id,
                            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –ù–ï-—Å–ø–∞–º–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç",
                            replyParameters: replyToMessage
                        );
                        break;
                }
            }
        }
        // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
        else if (message.Text?.Trim().ToLower() == "/stat" || message.Text?.Trim().ToLower() == "/stats")
        {
            var report = _stats.ToArray();
            var sb = new StringBuilder();
            sb.AppendLine("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:*\n");
            foreach (var (chatId, stats) in report.OrderBy(x => x.Value.ChatTitle))
            {
                var sum = stats.KnownBadMessage + stats.BlacklistBanned + stats.StoppedCaptcha + stats.LongNameBanned;
                if (sum == 0) continue;
                Chat? chat = null;
                try { chat = await _bot.GetChat(chatId); } catch { }
                sb.AppendLine();
                if (chat != null)
                    sb.AppendLine($"{GetChatLink(chat)} (`{chat.Id}`) [{ChatSettingsManager.GetChatType(chat.Id)}]:");
                else
                    sb.AppendLine($"{GetChatLink(chatId, stats.ChatTitle)} (`{chatId}`) [{ChatSettingsManager.GetChatType(chatId)}]:");
                sb.AppendLine($"‚ñ´Ô∏è –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: *{sum}*");
                if (stats.BlacklistBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ü–æ –±–ª–µ–∫–ª–∏—Å—Ç–∞–º: *{stats.BlacklistBanned}*");
                if (stats.StoppedCaptcha > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ù–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: *{stats.StoppedCaptcha}*");
                if (stats.KnownBadMessage > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: *{stats.KnownBadMessage}*");
                if (stats.LongNameBanned > 0)
                    sb.AppendLine($"‚ñ´Ô∏è –ó–∞ –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞: *{stats.LongNameBanned}*");
            }
            if (sb.Length <= 35)
                sb.AppendLine("\n–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ üéâ");
            await _bot.SendMessage(message.Chat.Id, sb.ToString(), parseMode: ParseMode.Markdown);
            return;
        }
        // –î–æ–±–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /say
        if (message.Text != null && message.Text.StartsWith("/say "))
        {
            var parts = message.Text.Split(' ', 3);
            if (parts.Length < 3)
            {
                await _bot.SendMessage(message.Chat.Id, "–§–æ—Ä–º–∞—Ç: /say @username —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /say user_id —Å–æ–æ–±—â–µ–Ω–∏–µ");
                return;
            }
            var target = parts[1];
            var textToSend = parts[2];
            long? userId = null;
            if (target.StartsWith("@"))
            {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ userId –ø–æ username —Å—Ä–µ–¥–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∫—ç—à—É)
                // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                userId = TryFindUserIdByUsername(target.Substring(1));
            }
            else if (long.TryParse(target, out var id))
            {
                userId = id;
            }
            if (userId == null)
            {
                await _bot.SendMessage(message.Chat.Id, $"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
                return;
            }
            try
            {
                await _bot.SendMessage(userId.Value, textToSend, parseMode: ParseMode.Markdown, disableNotification: true);
                await _bot.SendMessage(message.Chat.Id, $"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}");
            }
            catch (Exception ex)
            {
                await _bot.SendMessage(message.Chat.Id, $"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}: {ex.Message}");
            }
            return;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ userId –ø–æ username —Å—Ä–µ–¥–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∫—ç—à—É)
    private long? TryFindUserIdByUsername(string username)
    {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MemoryCache –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        // –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å MemoryCache: –∏—â–µ–º –ø–æ –∫–ª—é—á–∞–º, –≥–¥–µ username –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è
        foreach (var item in MemoryCache.Default)
        {
            if (item.Value is string text && text.Contains(username, StringComparison.OrdinalIgnoreCase))
            {
                // –ö–ª—é—á–∏ –≤–∏–¥–∞ chatId_userId
                var parts = item.Key.ToString().Split('_');
                if (parts.Length == 2 && long.TryParse(parts[1], out var uid))
                    return uid;
            }
        }
        return null;
    }

    private static string UserToKey(long chatId, User user) => $"{chatId}_{user.Id}";
    
    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è
    /// </summary>
    private bool IsUserApproved(long userId, long? chatId = null)
    {
        if (Config.UseNewApprovalSystem)
        {
            // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ (–≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ)
            return _userManager.Approved(userId, chatId);
        }
        else
        {
            // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
            return _userManager.Approved(userId);
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    /// </summary>
    private async Task<bool> IsChannelDiscussion(Chat chat, Message message)
    {
        try
        {
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞, —Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
            if (chat.Type != ChatType.Supergroup)
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            var chatFull = await _bot.GetChat(chat.Id);
            var hasLinkedChannel = chatFull.LinkedChatId != null;
            
            // –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏:
            // 1. –ï—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ò —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ
            // 2. –ò–õ–ò –ø—Ä–æ—Å—Ç–æ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–∏—à—É—Ç –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏)
            var isDiscussion = hasLinkedChannel && (message.IsAutomaticForward || true);
            
            if (isDiscussion)
            {
                _logger.LogDebug("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: chat={ChatId}, linkedChannel={LinkedId}, autoForward={AutoForward}", 
                    chat.Id, chatFull.LinkedChatId, message.IsAutomaticForward);
            }
            
            return isDiscussion;
        }
        catch (Exception e)
        {
            _logger.LogWarning(e, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞ {ChatId}", chat.Id);
            return false;
        }
    }

    private async Task BanNoCaptchaUsers()
    {
        if (_captchaNeededUsers.IsEmpty)
            return;
        var now = DateTime.UtcNow;
        var users = _captchaNeededUsers.ToArray();
        foreach (var (key, (chatId, title, timestamp, user, _, _, _)) in users)
        {
            var minutes = (now - timestamp).TotalMinutes;
            if (minutes > 1)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                _logger.LogInformation("==================== –ö–ê–ü–ß–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê (—Ç–∞–π–º–∞—É—Ç) ====================\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (id={UserId}) –Ω–µ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É (—Ç–∞–π–º–∞—É—Ç) –≤ –≥—Ä—É–ø–ø–µ '{ChatTitle}' (id={ChatId})\n====================================================================", user.FirstName + (string.IsNullOrEmpty(user.LastName) ? "" : " " + user.LastName), user.Id, title ?? "-", chatId);
                var stats = _stats.GetOrAdd(chatId, new Stats(title));
                Interlocked.Increment(ref stats.StoppedCaptcha);
                _captchaNeededUsers.TryRemove(key, out _);
                await _bot.BanChatMember(chatId, user.Id, now + TimeSpan.FromMinutes(20), revokeMessages: false);
                UnbanUserLater(chatId, user.Id);
            }
        }
    }

    private class CaptchaAttempts
    {
        public int Attempts { get; set; }
    }

    private void UnbanUserLater(ChatId chatId, long userId)
    {
        var key = $"captcha_{userId}";
        var cache = MemoryCache.Default.AddOrGetExisting(
            new CacheItem(key, new CaptchaAttempts()),
            new CacheItemPolicy { SlidingExpiration = TimeSpan.FromHours(4) }
        );
        var attempts = (CaptchaAttempts)cache.Value;
        attempts.Attempts++;
        Task.Run(async () =>
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(Math.Exp(attempts.Attempts)));
                await _bot.UnbanChatMember(chatId, userId);
            }
            catch (Exception e)
            {
                _logger.LogWarning(e, nameof(UnbanUserLater));
            }
        });
    }

    private void DeleteMessageLater(Message message, TimeSpan after = default, CancellationToken cancellationToken = default)
    {
        if (after == default)
            after = TimeSpan.FromMinutes(5);
        _ = Task.Run(
            async () =>
            {
                try
                {
                    await Task.Delay(after, cancellationToken);
                    await _bot.DeleteMessage(message.Chat.Id, message.MessageId, cancellationToken: cancellationToken);
                }
                catch (Exception ex) when (ex is not OperationCanceledException)
                {
                    _logger.LogWarning(ex, "DeleteMessage");
                }
            },
            cancellationToken
        );
    }

    private static string AdminDisplayName(User user)
    {
        return !string.IsNullOrEmpty(user.Username)
            ? user.Username
            : FullName(user.FirstName, user.LastName);
    }
}
