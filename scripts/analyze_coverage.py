#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ –∏ –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
"""

import xml.etree.ElementTree as ET
import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple

def parse_coverage_report(coverage_file: str) -> Dict:
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    tree = ET.parse(coverage_file)
    root = tree.getroot()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_lines = int(root.get('lines-valid', 0))
    covered_lines = int(root.get('lines-covered', 0))
    total_branches = int(root.get('branches-valid', 0))
    covered_branches = int(root.get('branches-covered', 0))
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
    uncovered_classes = []
    low_coverage_classes = []
    
    for package in root.findall('.//package'):
        for class_elem in package.findall('.//class'):
            class_name = class_elem.get('name', '')
            filename = class_elem.get('filename', '')
            line_rate = float(class_elem.get('line-rate', 0))
            branch_rate = float(class_elem.get('branch-rate', 0))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if 'obj/' in filename or 'bin/' in filename:
                continue
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
            uncovered_lines = []
            for line_elem in class_elem.findall('.//line'):
                line_num = int(line_elem.get('number', 0))
                hits = int(line_elem.get('hits', 0))
                if hits == 0:
                    uncovered_lines.append(line_num)
            
            if line_rate == 0:
                uncovered_classes.append({
                    'name': class_name,
                    'filename': filename,
                    'line_rate': line_rate,
                    'uncovered_lines': uncovered_lines
                })
            elif line_rate < 0.5:  # –ú–µ–Ω—å—à–µ 50% –ø–æ–∫—Ä—ã—Ç–∏—è
                low_coverage_classes.append({
                    'name': class_name,
                    'filename': filename,
                    'line_rate': line_rate,
                    'uncovered_lines': uncovered_lines[:10]  # –ü–µ—Ä–≤—ã–µ 10 –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                })
    
    return {
        'total_lines': total_lines,
        'covered_lines': covered_lines,
        'total_branches': total_branches,
        'covered_branches': covered_branches,
        'uncovered_classes': uncovered_classes,
        'low_coverage_classes': low_coverage_classes
    }

def find_latest_coverage_report() -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
    coverage_dir = Path('coverage')
    if not coverage_dir.exists():
        raise FileNotFoundError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è coverage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ò—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª coverage.cobertura.xml
    latest_report = None
    latest_time = 0
    
    for subdir in coverage_dir.iterdir():
        if subdir.is_dir():
            report_file = subdir / 'coverage.cobertura.xml'
            if report_file.exists():
                mtime = report_file.stat().st_mtime
                if mtime > latest_time:
                    latest_time = mtime
                    latest_report = str(report_file)
    
    if not latest_report:
        raise FileNotFoundError("–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return latest_report

def analyze_complexity_for_testing(classes: List[Dict]) -> List[Dict]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    priority_classes = []
    
    for class_info in classes:
        class_name = class_info['name']
        filename = class_info['filename']
        line_rate = class_info['line_rate']
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        priority_keywords = [
            'Service', 'Handler', 'Manager', 'Controller',
            'Moderation', 'Captcha', 'User', 'Message'
        ]
        
        is_priority = any(keyword in class_name for keyword in priority_keywords)
        
        if is_priority and line_rate < 0.8:  # –ú–µ–Ω—å—à–µ 80% –ø–æ–∫—Ä—ã—Ç–∏—è
            priority_classes.append({
                'name': class_name,
                'filename': filename,
                'line_rate': line_rate,
                'priority': 'HIGH' if line_rate < 0.3 else 'MEDIUM',
                'uncovered_lines': class_info.get('uncovered_lines', [])
            })
    
    return sorted(priority_classes, key=lambda x: x['line_rate'])

def main():
    try:
        # –ù–∞—Ö–æ–¥–∏–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        coverage_file = find_latest_coverage_report()
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç: {coverage_file}")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
        stats = parse_coverage_report(coverage_file)
        
        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "="*60)
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–†–´–¢–ò–Ø")
        print("="*60)
        
        line_coverage = (stats['covered_lines'] / stats['total_lines']) * 100 if stats['total_lines'] > 0 else 0
        branch_coverage = (stats['covered_branches'] / stats['total_branches']) * 100 if stats['total_branches'] > 0 else 0
        
        print(f"–°—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞: {stats['covered_lines']}/{stats['total_lines']} ({line_coverage:.1f}%)")
        print(f"–í–µ—Ç–∫–∏ –∫–æ–¥–∞: {stats['covered_branches']}/{stats['total_branches']} ({branch_coverage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –∫–ª–∞—Å—Å—ã
        print(f"\nüî¥ –ù–ï–ü–û–ö–†–´–¢–´–ï –ö–õ–ê–°–°–´: {len(stats['uncovered_classes'])}")
        print("-" * 60)
        
        for class_info in stats['uncovered_classes'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"‚ùå {class_info['name']}")
            print(f"   –§–∞–π–ª: {class_info['filename']}")
            print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {class_info['line_rate']*100:.1f}%")
            if class_info['uncovered_lines']:
                print(f"   –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {class_info['uncovered_lines'][:5]}...")
            print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        print(f"\nüü° –ö–õ–ê–°–°–´ –° –ù–ò–ó–ö–ò–ú –ü–û–ö–†–´–¢–ò–ï–ú: {len(stats['low_coverage_classes'])}")
        print("-" * 60)
        
        for class_info in stats['low_coverage_classes'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"‚ö†Ô∏è  {class_info['name']}")
            print(f"   –§–∞–π–ª: {class_info['filename']}")
            print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {class_info['line_rate']*100:.1f}%")
            if class_info['uncovered_lines']:
                print(f"   –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {class_info['uncovered_lines']}")
            print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        all_classes = stats['uncovered_classes'] + stats['low_coverage_classes']
        priority_classes = analyze_complexity_for_testing(all_classes)
        
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {len(priority_classes)}")
        print("-" * 60)
        
        for class_info in priority_classes[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15
            priority_icon = "üî¥" if class_info['priority'] == 'HIGH' else "üü°"
            print(f"{priority_icon} {class_info['name']}")
            print(f"   –§–∞–π–ª: {class_info['filename']}")
            print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {class_info['line_rate']*100:.1f}%")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {class_info['priority']}")
            if class_info['uncovered_lines']:
                print(f"   –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {class_info['uncovered_lines'][:5]}...")
            print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("-" * 60)
        
        if priority_classes:
            print("1. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–ª–∞—Å—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (üî¥)")
            print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DX-—É—Ç–∏–ª–∏—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤")
            print("3. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç—è—Ö")
            print("4. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
        
        if line_coverage < 50:
            print("5. –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏–∑–∫–æ–µ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ unit-—Ç–µ—Å—Ç–æ–≤")
        
        if branch_coverage < 40:
            print("6. –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫ –Ω–∏–∑–∫–æ–µ - –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –ø—É—Ç–µ–π")
        
        print(f"\nüìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {coverage_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–∫—Ä—ã—Ç–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 