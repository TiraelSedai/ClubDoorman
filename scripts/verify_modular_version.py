#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—å–Ω–æ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–π TestFactory Generator
"""

import subprocess
import tempfile
import shutil
from pathlib import Path


def run_generator(script_path: str, project_root: str, force: bool = True) -> str:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥"""
    cmd = [script_path, project_root]
    if force:
        cmd.append("--force")
    
    result = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
    return result.stdout


def compare_generated_files(original_output: str, modular_output: str) -> bool:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
    def clean_output(output: str) -> str:
        lines = output.split('\n')
        cleaned = []
        for line in lines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –ø—É—Ç—è–º–∏
            if any(skip in line for skip in ['üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç:', 'üì¶ –ù–∞–π–¥–µ–Ω–æ', 'üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º', '‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏']):
                continue
            if line.strip():
                cleaned.append(line.strip())
        return '\n'.join(cleaned)
    
    return clean_output(original_output) == clean_output(modular_output)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    project_root = Path.cwd()
    original_script = project_root / "scripts" / "generate_test_factory.py"
    modular_script = project_root / "scripts" / "generate_test_factory_new.py"
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—å–Ω–æ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
    original_output = run_generator(str(original_script), str(project_root))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
    modular_output = run_generator(str(modular_script), str(project_root))
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
    print("üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    if compare_generated_files(original_output, modular_output):
        print("‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π!")
        return True
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏!")
        print("\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:")
        print(original_output)
        print("\n–ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è:")
        print(modular_output)
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 