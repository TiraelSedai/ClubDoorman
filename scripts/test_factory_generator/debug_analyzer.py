#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

try:
    from models import ClassInfo, ConstructorParam
    from complexity_analyzer import ComplexityAnalyzer, ComplexityReport
except ImportError:
    from models import ClassInfo, ConstructorParam
    from complexity_analyzer import ComplexityAnalyzer, ComplexityReport


def debug_analyzer():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
    project_root = Path("../../ClubDoorman")
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_root}")
    print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {project_root.exists()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
    handlers_dir = project_root / "Handlers"
    print(f"üìÅ Handlers: {handlers_dir}")
    print(f"üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {handlers_dir.exists()}")
    
    if handlers_dir.exists():
        for file in handlers_dir.glob("*.cs"):
            print(f"üìÑ –§–∞–π–ª: {file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MessageHandler –Ω–∞–ø—Ä—è–º—É—é
    message_handler_file = handlers_dir / "MessageHandler.cs"
    print(f"üìÑ MessageHandler: {message_handler_file}")
    print(f"üìÑ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {message_handler_file.exists()}")
    
    if message_handler_file.exists():
        try:
            content = message_handler_file.read_text(encoding='utf-8')
            print(f"üìÑ –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å
            import re
            class_pattern = r'public\s+(?:sealed\s+)?class\s+(\w+)'
            matches = re.findall(class_pattern, content)
            print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {matches}")
            
            # –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            constructor_pattern = r'public\s+MessageHandler\s*\(([^)]*)\)'
            constructor_match = re.search(constructor_pattern, content)
            if constructor_match:
                print(f"üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {constructor_match.group(1)}")
            else:
                print("‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    debug_analyzer() 