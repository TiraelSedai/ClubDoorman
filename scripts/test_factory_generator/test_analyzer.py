#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ MessageHandler
"""

import re
import sys
from pathlib import Path
from dataclasses import dataclass
from typing import List


@dataclass
class ConstructorParam:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    type: str
    name: str
    is_interface: bool
    is_logger: bool
    is_concrete: bool


@dataclass
class ClassInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ"""
    name: str
    namespace: str
    constructor_params: List[ConstructorParam]
    file_path: str


class SimpleCSharpAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä C# –∫–æ–¥–∞"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        
    def find_message_handler(self) -> ClassInfo:
        """–ù–∞—Ö–æ–¥–∏—Ç MessageHandler –∫–ª–∞—Å—Å"""
        handlers_dir = self.project_root / "Handlers"
        message_handler_file = handlers_dir / "MessageHandler.cs"
        
        if not message_handler_file.exists():
            print(f"‚ùå –§–∞–π–ª {message_handler_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        return self._parse_file(message_handler_file)
    
    def _parse_file(self, file_path: Path) -> ClassInfo:
        """–ü–∞—Ä—Å–∏—Ç C# —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MessageHandler"""
        try:
            content = file_path.read_text(encoding='utf-8')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
        
        # –ò—â–µ–º namespace
        namespace_match = re.search(r'namespace\s+(\S+)', content)
        namespace = namespace_match.group(1) if namespace_match else "Unknown"
        namespace = namespace.rstrip(';')
        
        # –ò—â–µ–º MessageHandler –∫–ª–∞—Å—Å —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
        class_pattern = r'public\s+(?:sealed\s+)?class\s+MessageHandler[^{]*?{.*?public\s+MessageHandler\s*\(([^)]*)\)[^{]*?{'
        class_match = re.search(class_pattern, content, re.DOTALL)
        
        if not class_match:
            print("‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä MessageHandler –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        constructor_params_str = class_match.group(1)
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        params = self._parse_constructor_params(constructor_params_str)
        
        return ClassInfo(
            name="MessageHandler",
            namespace=namespace,
            constructor_params=params,
            file_path=str(file_path.relative_to(self.project_root))
        )
    
    def _parse_constructor_params(self, params_str: str) -> List[ConstructorParam]:
        """–ü–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        params = []
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        params_str = re.sub(r'//.*$', '', params_str, flags=re.MULTILINE)
        params_str = params_str.strip()
        
        if not params_str:
            return params
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, —É—á–∏—Ç—ã–≤–∞—è generic —Ç–∏–ø—ã
        param_parts = self._split_params(params_str)
        
        for part in param_parts:
            if not part:
                continue
                
            # –ò—â–µ–º —Ç–∏–ø –∏ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            param_match = re.search(r'(\w+(?:<[^>]+>)?)\s+(\w+)', part)
            if param_match:
                param_type = param_match.group(1)
                param_name = param_match.group(2)
                
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
                is_interface = self._is_interface_type(param_type)
                is_logger = 'ILogger' in param_type
                is_concrete = not is_interface and not is_logger
                
                params.append(ConstructorParam(
                    type=param_type,
                    name=param_name,
                    is_interface=is_interface,
                    is_logger=is_logger,
                    is_concrete=is_concrete
                ))
        
        return params
    
    def _split_params(self, params_str: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º generic —Ç–∏–ø–æ–≤"""
        parts = []
        current_part = ""
        bracket_count = 0
        
        for char in params_str:
            if char == '<':
                bracket_count += 1
            elif char == '>':
                bracket_count -= 1
            elif char == ',' and bracket_count == 0:
                parts.append(current_part.strip())
                current_part = ""
                continue
            
            current_part += char
        
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts
    
    def _is_interface_type(self, type_name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        known_interfaces = {
            'ITelegramBotClient', 'IUserManager', 'IModerationService', 
            'ICaptchaService', 'IStatisticsService', 'IUpdateDispatcher',
            'IUpdateHandler', 'ICommandHandler', 'ISpamHamClassifier',
            'IMimicryClassifier', 'IBadMessageManager', 'IAiChecks',
            'ISuspiciousUsersStorage', 'ILogger', 'IServiceProvider',
            'IEnumerable', 'ICollection', 'IList', 'IDictionary',
            'IComparable', 'IDisposable', 'IAsyncDisposable',
            'IEquatable', 'IFormattable', 'IConvertible'
        }
        
        # –£–±–∏—Ä–∞–µ–º generic –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        base_type = re.sub(r'<[^>]+>', '', type_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É I + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
        if base_type.startswith('I') and len(base_type) > 1 and base_type[1:2].isupper():
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        return base_type in known_interfaces


def analyze_message_handler():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç MessageHandler –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ DX Tool –æ–ø—Ä–µ–¥–µ–ª–∏—Ç"""
    print("üîç –ê–Ω–∞–ª–∏–∑ MessageHandler...")
    
    analyzer = SimpleCSharpAnalyzer("../../ClubDoorman")
    class_info = analyzer.find_message_handler()
    
    if not class_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ MessageHandler")
        return
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: {class_info.name}")
    print(f"üìÅ Namespace: {class_info.namespace}")
    print(f"üìÑ –§–∞–π–ª: {class_info.file_path}")
    print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞: {len(class_info.constructor_params)}")
    
    print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:")
    for i, param in enumerate(class_info.constructor_params, 1):
        param_type = "interface" if param.is_interface else "concrete" if param.is_concrete else "logger"
        print(f"  {i}. {param.type} {param.name} ({param_type})")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    
    concrete_mocks = [p for p in class_info.constructor_params if p.is_concrete]
    interfaces = [p for p in class_info.constructor_params if p.is_interface]
    loggers = [p for p in class_info.constructor_params if p.is_logger]
    
    print(f"  - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {len(concrete_mocks)}")
    for param in concrete_mocks:
        print(f"    * {param.type} {param.name}")
    
    print(f"  - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {len(interfaces)}")
    for param in interfaces:
        print(f"    * {param.type} {param.name}")
    
    print(f"  - –õ–æ–≥–≥–µ—Ä—ã: {len(loggers)}")
    for param in loggers:
        print(f"    * {param.type} {param.name}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    complexity_score = 0
    if len(concrete_mocks) > 0:
        complexity_score += len(concrete_mocks) * 2
    if len(class_info.constructor_params) > 8:
        complexity_score += 2
    
    print(f"\nüìä –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity_score}/10")
    if complexity_score < 3:
        print("üü¢ –ù–ò–ó–ö–ê–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - DX Tool —Å–ø—Ä–∞–≤–∏—Ç—Å—è")
    elif complexity_score < 7:
        print("üü° –°–†–ï–î–ù–Ø–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –º–∞—Ä–∫–µ—Ä—ã")
    else:
        print("üî¥ –í–´–°–û–ö–ê–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - —Ç–æ—á–Ω–æ –Ω—É–∂–Ω—ã –º–∞—Ä–∫–µ—Ä—ã")


if __name__ == "__main__":
    analyze_message_handler() 