#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ C# —Ñ–∞–π–ª–æ–≤
"""

import sys
import re
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

try:
    from models import ClassInfo, ConstructorParam
except ImportError:
    from models import ClassInfo, ConstructorParam


def debug_parser():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ C# —Ñ–∞–π–ª–æ–≤"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ C# —Ñ–∞–π–ª–æ–≤...")
    
    # –ß–∏—Ç–∞–µ–º MessageHandler.cs
    file_path = Path("../../ClubDoorman/Handlers/MessageHandler.cs")
    
    try:
        content = file_path.read_text(encoding='utf-8')
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º namespace
        namespace_match = re.search(r'namespace\s+(\S+)', content)
        namespace = namespace_match.group(1) if namespace_match else "Unknown"
        namespace = namespace.rstrip(';')
        print(f"üìÅ Namespace: {namespace}")
        
        # –ò—â–µ–º –∫–ª–∞—Å—Å—ã
        class_pattern = r'public\s+(?:sealed\s+)?class\s+(\w+)'
        class_matches = re.findall(class_pattern, content)
        print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {class_matches}")
        
        # –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        for class_name in class_matches:
            print(f"\nüîß –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–∞: {class_name}")
            
            # –ò—â–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
            constructor_pattern = rf'public\s+{class_name}\s*\(([^)]*)\)'
            constructor_match = re.search(constructor_pattern, content)
            
            if constructor_match:
                constructor_params_str = constructor_match.group(1)
                print(f"‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {constructor_params_str}")
                
                # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                params = parse_constructor_params(constructor_params_str)
                print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(params)}")
                for i, param in enumerate(params, 1):
                    print(f"  {i}. {param.type} {param.name} (interface: {param.is_interface}, concrete: {param.is_concrete}, logger: {param.is_logger})")
            else:
                print("‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def parse_constructor_params(params_str: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    params = []
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    params_str = re.sub(r'//.*$', '', params_str, flags=re.MULTILINE)
    params_str = params_str.strip()
    
    if not params_str:
        return params
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π, —É—á–∏—Ç—ã–≤–∞—è generic —Ç–∏–ø—ã
    param_parts = split_params(params_str)
    
    for part in param_parts:
        if not part:
            continue
            
        # –ò—â–µ–º —Ç–∏–ø –∏ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        param_match = re.search(r'(\w+(?:<[^>]+>)?)\s+(\w+)', part)
        if param_match:
            param_type = param_match.group(1)
            param_name = param_match.group(2)
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
            is_interface = is_interface_type(param_type)
            is_logger = 'ILogger' in param_type
            is_concrete = not is_interface and not is_logger
            
            params.append(ConstructorParam(
                type=param_type,
                name=param_name,
                is_interface=is_interface,
                is_logger=is_logger,
                is_concrete=is_concrete
            ))
    
    return params


def split_params(params_str: str) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º generic —Ç–∏–ø–æ–≤"""
    parts = []
    current_part = ""
    bracket_count = 0
    
    for char in params_str:
        if char == '<':
            bracket_count += 1
        elif char == '>':
            bracket_count -= 1
        elif char == ',' and bracket_count == 0:
            parts.append(current_part.strip())
            current_part = ""
            continue
        
        current_part += char
    
    if current_part.strip():
        parts.append(current_part.strip())
    
    return parts


def is_interface_type(type_name: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    known_interfaces = {
        'ITelegramBotClient', 'ITelegramBotClientWrapper', 'IUserManager', 'IModerationService', 
        'ICaptchaService', 'IStatisticsService', 'IUpdateDispatcher',
        'IUpdateHandler', 'ICommandHandler', 'ISpamHamClassifier',
        'IMimicryClassifier', 'IBadMessageManager', 'IAiChecks',
        'ISuspiciousUsersStorage', 'ILogger', 'IServiceProvider',
        'IEnumerable', 'ICollection', 'IList', 'IDictionary',
        'IComparable', 'IDisposable', 'IAsyncDisposable',
        'IEquatable', 'IFormattable', 'IConvertible'
    }
    
    # –£–±–∏—Ä–∞–µ–º generic –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    base_type = re.sub(r'<[^>]+>', '', type_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É I + –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
    if base_type.startswith('I') and len(base_type) > 1 and base_type[1:2].isupper():
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    return base_type in known_interfaces


if __name__ == "__main__":
    debug_parser() 