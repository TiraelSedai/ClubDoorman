#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

try:
    from models import ClassInfo, ConstructorParam
    from complexity_analyzer import ComplexityAnalyzer, ComplexityReport
    from factory_generator import TestFactoryGenerator
except ImportError:
    from models import ClassInfo, ConstructorParam
    from complexity_analyzer import ComplexityAnalyzer, ComplexityReport
    from factory_generator import TestFactoryGenerator


def test_simple_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ DX Tool —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è MessageHandler
    test_params = [
        ConstructorParam(type='ITelegramBotClientWrapper', name='bot', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='IModerationService', name='moderationService', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='ICaptchaService', name='captchaService', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='IUserManager', name='userManager', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='SpamHamClassifier', name='classifier', is_interface=False, is_logger=False, is_concrete=True),
        ConstructorParam(type='BadMessageManager', name='badMessageManager', is_interface=False, is_logger=False, is_concrete=True),
        ConstructorParam(type='AiChecks', name='aiChecks', is_interface=False, is_logger=False, is_concrete=True),
        ConstructorParam(type='GlobalStatsManager', name='globalStatsManager', is_interface=False, is_logger=False, is_concrete=True),
        ConstructorParam(type='IStatisticsService', name='statisticsService', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='IServiceProvider', name='serviceProvider', is_interface=True, is_logger=False, is_concrete=False),
        ConstructorParam(type='ILogger<MessageHandler>', name='logger', is_interface=True, is_logger=True, is_concrete=False),
    ]
    
    message_handler = ClassInfo(
        name="MessageHandler",
        namespace="ClubDoorman.Handlers",
        constructor_params=test_params,
        file_path="Handlers/MessageHandler.cs"
    )
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω {message_handler.name}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    analyzer = ComplexityAnalyzer()
    params_dict = []
    for param in message_handler.constructor_params:
        params_dict.append({
            'type': param.type,
            'name': param.name,
            'is_interface': param.is_interface,
            'is_logger': param.is_logger,
            'is_concrete': param.is_concrete
        })
    
    complexity_report = analyzer.analyze_constructor(
        class_name=message_handler.name,
        namespace=message_handler.namespace,
        constructor_params=params_dict
    )
    
    print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_report.complexity_score}/10 ({complexity_report.complexity_level.value})")
    print(f"üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã: {[marker.value for marker in complexity_report.suggested_markers]}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = TestFactoryGenerator(Path("../../ClubDoorman/ClubDoorman.Test"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    generator.set_complexity_analysis(complexity_report, [])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestFactory
    factory_code = generator.generate_test_factory(message_handler)
    
    print(f"\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TestFactory:")
    print("=" * 80)
    print(factory_code)
    print("=" * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FakeTelegramClient
    if "FakeTelegramClient" in factory_code:
        print("‚úÖ –ï—Å—Ç—å FakeTelegramClient (—É—Ç–∏–ª–∏—Ç–∞)")
    else:
        print("‚ùå –ù–µ—Ç FakeTelegramClient")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    concrete_mocks = []
    for param in message_handler.constructor_params:
        if param.is_concrete and f"Mock<{param.type}>" in factory_code:
            concrete_mocks.append(param.type)
    
    if concrete_mocks:
        print(f"‚úÖ –ï—Å—Ç—å –º–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {', '.join(concrete_mocks)}")
    else:
        print("‚ùå –ù–µ—Ç –º–æ–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if "public MessageHandlerTestFactory()" in factory_code:
        print("‚úÖ –ï—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")
    else:
        print("‚ùå –ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    if "CreateMessageHandlerWithFake" in factory_code:
        print("‚úÖ –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
    else:
        print("‚ùå –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:")
    print(f"  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_report.complexity_score}/10")
    print(f"  - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {len(complexity_report.concrete_types)}")
    print(f"  - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {len(complexity_report.interface_types)}")
    
    if complexity_report.complexity_score >= 7:
        print("üî¥ –í–´–°–û–ö–ê–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω—ã –º–∞—Ä–∫–µ—Ä—ã")
    elif complexity_report.complexity_score >= 3:
        print("üü° –°–†–ï–î–ù–Ø–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –º–∞—Ä–∫–µ—Ä—ã")
    else:
        print("üü¢ –ù–ò–ó–ö–ê–Ø —Å–ª–æ–∂–Ω–æ—Å—Ç—å - DX Tool —Å–ø—Ä–∞–≤–∏—Ç—Å—è")


if __name__ == "__main__":
    test_simple_generator() 