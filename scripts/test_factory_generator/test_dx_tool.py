#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ DX —É—Ç–∏–ª–∏—Ç—ã
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from csharp_analyzer import CSharpAnalyzer
from factory_generator import TestFactoryGenerator
from business_logic_analyzer import BusinessLogicAnalyzer
from complexity_analyzer import ComplexityAnalyzer

def test_dx_tool():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º DX —É—Ç–∏–ª–∏—Ç—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DX –£–¢–ò–õ–ò–¢–´")
    print("=" * 50)
    
    # –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_root = Path("../../ClubDoorman")
    test_project_root = Path("../../ClubDoorman.Test")
    
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_root}")
    print(f"üìÅ –¢–µ—Å—Ç—ã: {test_project_root}")
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤
    print("\nüîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤")
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏:")
    print(f"  - project_root: {project_root} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {project_root.exists()})")
    print(f"  - Services: {project_root / 'Services'} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {(project_root / 'Services').exists()})")
    print(f"  - Handlers: {project_root / 'Handlers'} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {(project_root / 'Handlers').exists()})")
    
    analyzer = CSharpAnalyzer(str(project_root), force_overwrite=False)
    services = analyzer.find_service_classes()
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(services)} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤:")
    for service in services:
        print(f"  - {service.name} ({len(service.constructor_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
    
    # 2. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\nüß† –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    complexity_analyzer = ComplexityAnalyzer()
    
    for service in services:
        complexity_report = analyzer.analyze_class_complexity(service)
        print(f"  {service.name}: {complexity_report.complexity_score}/10 ({complexity_report.complexity_level.value})")
        print(f"    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {', '.join(complexity_report.reasoning)}")
    
    # 3. –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    print("\nüíº –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏")
    business_analyzer = BusinessLogicAnalyzer(project_root)
    
    for service in services:
        logic_info = business_analyzer.analyze_service_logic(service)
        print(f"  {service.name}:")
        print(f"    - Telegram –∫–ª–∏–µ–Ω—Ç: {logic_info.has_telegram_client}")
        print(f"    - –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {logic_info.has_moderation_logic}")
        print(f"    - –ö–∞–ø—á–∞: {logic_info.has_captcha_logic}")
        print(f"    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {logic_info.has_user_management}")
        print(f"    - AI –ø—Ä–æ–≤–µ—Ä–∫–∏: {logic_info.has_ai_checks}")
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestFactory
    print("\nüöÄ –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestFactory")
    generator = TestFactoryGenerator(test_project_root, force_overwrite=False)
    
    success_count = 0
    for service in services:
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
            complexity_report = analyzer.analyze_class_complexity(service)
            logic_info = business_analyzer.analyze_service_logic(service)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestFactory
            factory_code = generator.generate_test_factory(service)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            smart_methods = business_analyzer.generate_smart_test_factory_methods(service, logic_info)
            if smart_methods.strip():
                factory_code = factory_code.replace("    #endregion\n}", 
                    f"    #endregion\n\n    #region Smart Methods Based on Business Logic\n{smart_methods}\n    #endregion\n}}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            if generator.save_files(service, factory_code, ""):
                success_count += 1
                print(f"  ‚úÖ {service.name} - —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"  ‚ö†Ô∏è  {service.name} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"  ‚ùå {service.name} - –æ—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  - –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {len(services)}")
    print(f"  - –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}")
    if len(services) > 0:
        print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count/len(services)*100:.1f}%")
    else:
        print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: N/A (–Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)")

if __name__ == "__main__":
    test_dx_tool() 