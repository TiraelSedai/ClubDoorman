#!/usr/bin/env python3
"""
–¢–µ—Å—Ç DX Tool –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–ª–∞—Å—Å–æ–≤
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

try:
    import csharp_analyzer
    import factory_generator
    import complexity_analyzer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def test_multiple_classes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç DX Tool –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–ª–∞—Å—Å–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DX Tool –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–ª–∞—Å—Å–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = csharp_analyzer.CSharpAnalyzer("../../ClubDoorman")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
    services = analyzer.find_service_classes()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(services)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞—Å—Å–æ–≤
    test_classes = [
        "MessageHandler",      # –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (11 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        "ModerationService",   # –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        "CaptchaService",      # –ù–∏–∑–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
        "SpamHamClassifier",   # –ü—Ä–æ—Å—Ç–æ–π (1 –ø–∞—Ä–∞–º–µ—Ç—Ä)
        "CallbackQueryHandler" # –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (8 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    ]
    
    results = []
    
    for class_name in test_classes:
        print(f"\n{'='*60}")
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {class_name}")
        print(f"{'='*60}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å
        target_class = None
        for service in services:
            if service.name == class_name:
                target_class = service
                break
        
        if not target_class:
            print(f"‚ùå –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity_report = analyzer.analyze_class_complexity(target_class)
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_report.complexity_score}/10 ({complexity_report.complexity_level.value})")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(target_class.constructor_params)}")
        
        # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã
        file_path = Path("../../ClubDoorman") / target_class.file_path
        markers = analyzer.find_test_markers(file_path)
        test_markers = markers.get(target_class.name, [])
        print(f"üè∑Ô∏è –ú–∞—Ä–∫–µ—Ä—ã: {test_markers}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = factory_generator.TestFactoryGenerator(Path("../../ClubDoorman/ClubDoorman.Test"))
        generator.set_complexity_analysis(complexity_report, test_markers)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestFactory
        factory_code = generator.generate_test_factory(target_class)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analysis = analyze_generated_factory(factory_code, target_class, complexity_report)
        results.append({
            'class_name': class_name,
            'complexity_score': complexity_report.complexity_score,
            'complexity_level': complexity_report.complexity_level.value,
            'params_count': len(target_class.constructor_params),
            'concrete_params': len(complexity_report.concrete_types),
            'interface_params': len(complexity_report.interface_types),
            'has_fake_telegram': "FakeTelegramClient" in factory_code,
            'has_concrete_mocks': any(f"Mock<{param.type}>" in factory_code for param in target_class.constructor_params if param.is_concrete),
            'has_custom_constructor': f"public {class_name}TestFactory()" in factory_code,
            'has_additional_methods': "Additional Methods" in factory_code,
            'suggested_markers': [marker.value for marker in complexity_report.suggested_markers]
        })
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"  - FakeTelegramClient: {'‚úÖ' if analysis['has_fake_telegram'] else '‚ùå'}")
        print(f"  - –ú–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {'‚úÖ' if analysis['has_concrete_mocks'] else '‚ùå'}")
        print(f"  - –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: {'‚úÖ' if analysis['has_custom_constructor'] else '‚ùå'}")
        print(f"  - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {'‚úÖ' if analysis['has_additional_methods'] else '‚ùå'}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}")
    
    for result in results:
        print(f"\nüîç {result['class_name']}:")
        print(f"  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['complexity_score']}/10 ({result['complexity_level']})")
        print(f"  - –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {result['params_count']} (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ: {result['concrete_params']}, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {result['interface_params']})")
        print(f"  - FakeTelegramClient: {'‚úÖ' if result['has_fake_telegram'] else '‚ùå'}")
        print(f"  - –ú–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {'‚úÖ' if result['has_concrete_mocks'] else '‚ùå'}")
        print(f"  - –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: {'‚úÖ' if result['has_custom_constructor'] else '‚ùå'}")
        print(f"  - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {'‚úÖ' if result['has_additional_methods'] else '‚ùå'}")
        print(f"  - –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã: {result['suggested_markers']}")
    
    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–ò:")
    
    high_complexity = [r for r in results if r['complexity_score'] >= 7]
    medium_complexity = [r for r in results if 3 <= r['complexity_score'] < 7]
    low_complexity = [r for r in results if r['complexity_score'] < 3]
    
    print(f"  - –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {len(high_complexity)} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {len(medium_complexity)} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  - –ù–∏–∑–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {len(low_complexity)} –∫–ª–∞—Å—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    classes_with_fake_telegram = [r for r in results if r['has_fake_telegram']]
    classes_with_concrete_mocks = [r for r in results if r['has_concrete_mocks']]
    classes_with_custom_constructor = [r for r in results if r['has_custom_constructor']]
    classes_with_additional_methods = [r for r in results if r['has_additional_methods']]
    
    print(f"\nüìà –ü–û–ö–†–´–¢–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:")
    print(f"  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ FakeTelegramClient: {len(classes_with_fake_telegram)}/{len(results)} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  - –ú–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(classes_with_concrete_mocks)}/{len(results)} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: {len(classes_with_custom_constructor)}/{len(results)} –∫–ª–∞—Å—Å–æ–≤")
    print(f"  - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {len(classes_with_additional_methods)}/{len(results)} –∫–ª–∞—Å—Å–æ–≤")


def analyze_generated_factory(factory_code: str, class_info, complexity_report) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TestFactory"""
    return {
        'has_fake_telegram': "FakeTelegramClient" in factory_code,
        'has_concrete_mocks': any(f"Mock<{param.type}>" in factory_code for param in class_info.constructor_params if param.is_concrete),
        'has_custom_constructor': f"public {class_info.name}TestFactory()" in factory_code,
        'has_additional_methods': "Additional Methods" in factory_code
    }


if __name__ == "__main__":
    test_multiple_classes() 