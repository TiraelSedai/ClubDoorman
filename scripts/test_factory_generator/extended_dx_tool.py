#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π DX Tool - –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
from pathlib import Path
from typing import List, Dict, Optional
from dataclasses import dataclass

try:
    from csharp_analyzer import CSharpAnalyzer
    from factory_generator import TestFactoryGenerator
    from complexity_analyzer import ComplexityAnalyzer
    from test_data_generator import TestDataGenerator
    from .mock_scenario_generator import MockScenarioGenerator
    from .models import ClassInfo
except ImportError:
    from csharp_analyzer import CSharpAnalyzer
    from factory_generator import TestFactoryGenerator
    from complexity_analyzer import ComplexityAnalyzer
    from test_data_generator import TestDataGenerator
    from mock_scenario_generator import MockScenarioGenerator
    from models import ClassInfo


@dataclass
class TestSuite:
    """–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞"""
    factory: str
    test_data: str
    mock_scenarios: str
    test_methods: str
    asserts: str
    scenarios: str
    documentation: str


class ExtendedDXTool:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π DX Tool —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, project_root: Path, test_project_root: Path):
        self.project_root = project_root
        self.test_project_root = test_project_root
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        self.analyzer = CSharpAnalyzer(str(project_root))
        self.factory_generator = TestFactoryGenerator(test_project_root)
        self.complexity_analyzer = ComplexityAnalyzer()
        self.test_data_generator = TestDataGenerator(project_root / "ClubDoorman" / "Models")
        self.mock_scenario_generator = MockScenarioGenerator()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "enabled_generators": [
                "test_factory",
                "test_data",
                "mock_scenarios"
            ],
            "test_data": {
                "generate_edge_cases": True,
                "generate_scenario_data": True,
                "unified_factory": True
            },
            "mock_scenarios": {
                "generate_happy_path": True,
                "generate_error_scenarios": True,
                "generate_edge_cases": True
            }
        }
    
    def generate_complete_test_suite(self, class_name: str) -> TestSuite:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞"""
        print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {class_name}...")
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
        services = self.analyzer.find_service_classes()
        target_class = next((s for s in services if s.name == class_name), None)
        
        if not target_class:
            raise ValueError(f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity_report = self.analyzer.analyze_class_complexity(target_class)
        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_report.complexity_score}/10 ({complexity_report.complexity_level})")
        
        # 3. –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã
        source_file = self.analyzer.find_source_file(target_class)
        markers = []
        if source_file:
            markers = self.analyzer.find_test_markers(source_file)
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        factory = ""
        test_data = ""
        mock_scenarios = ""
        
        if "test_factory" in self.config["enabled_generators"]:
            print("üè≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestFactory...")
            self.factory_generator.set_complexity_analysis(complexity_report, markers)
            factory = self.factory_generator.generate_test_factory(target_class)
        
        if "test_data" in self.config["enabled_generators"]:
            print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            test_data = self.test_data_generator.generate_test_data_factory()
        
        if "mock_scenarios" in self.config["enabled_generators"]:
            print("üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–∫–æ–≤...")
            mock_scenarios = self._generate_mock_scenarios(target_class)
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
        test_methods = "// Test Method Generator - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        asserts = "// Assert Generator - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        scenarios = "// Test Scenario Generator - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        documentation = "// Test Documentation Generator - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        return TestSuite(
            factory=factory,
            test_data=test_data,
            mock_scenarios=mock_scenarios,
            test_methods=test_methods,
            asserts=asserts,
            scenarios=scenarios,
            documentation=documentation
        )
    
    def _generate_mock_scenarios(self, class_info: ClassInfo) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∫–ª–∞—Å—Å–∞"""
        scenarios_code = ""
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å—Ä–µ–¥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        interface_params = [p for p in class_info.constructor_params if p.is_interface]
        
        for param in interface_params:
            interface_name = param.type
            interface_file = self._find_interface_file(interface_name)
            
            if interface_file:
                print(f"  üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è {interface_name}...")
                scenarios = self.mock_scenario_generator.generate_scenarios_for_interface(interface_file)
                
                if scenarios:
                    scenarios_code += f"\n// –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è {interface_name}\n"
                    scenarios_code += self.mock_scenario_generator.generate_scenario_methods(scenarios, interface_name)
                    scenarios_code += self.mock_scenario_generator.generate_fluent_api(scenarios, interface_name)
        
        return scenarios_code
    
    def _find_interface_file(self, interface_name: str) -> Optional[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –£–±–∏—Ä–∞–µ–º 'I' –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
        if interface_name.startswith('I'):
            file_name = interface_name[1:] + ".cs"
        else:
            file_name = interface_name + ".cs"
        
        # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ Services
        services_dir = self.project_root / "ClubDoorman" / "Services"
        interface_file = services_dir / file_name
        
        if interface_file.exists():
            return interface_file
        
        # –ò—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–∫–∞—Ö
        for search_dir in [self.project_root / "ClubDoorman"]:
            for file_path in search_dir.rglob("*.cs"):
                if file_path.name == file_name:
                    return file_path
        
        return None
    
    def save_test_suite(self, test_suite: TestSuite, class_name: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        test_infrastructure_dir = self.test_project_root / "TestInfrastructure"
        test_data_dir = self.test_project_root / "TestData"
        
        test_infrastructure_dir.mkdir(parents=True, exist_ok=True)
        test_data_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º TestFactory
        if test_suite.factory:
            factory_file = test_infrastructure_dir / f"{class_name}TestFactory.Generated.cs"
            with open(factory_file, 'w', encoding='utf-8') as f:
                f.write(test_suite.factory)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {factory_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if test_suite.test_data:
            test_data_file = test_data_dir / "TestDataFactory.Generated.cs"
            with open(test_data_file, 'w', encoding='utf-8') as f:
                f.write(test_suite.test_data)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {test_data_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∫–æ–≤
        if test_suite.mock_scenarios:
            scenarios_file = test_infrastructure_dir / f"{class_name}MockScenarios.Generated.cs"
            with open(scenarios_file, 'w', encoding='utf-8') as f:
                f.write(self._generate_mock_scenarios_wrapper(class_name, test_suite.mock_scenarios))
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {scenarios_file}")
    
    def _generate_mock_scenarios_wrapper(self, class_name: str, scenarios_code: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–∫–æ–≤"""
        return f"""using Moq;
using System;
using System.Threading.Tasks;
using ClubDoorman.Services;

namespace ClubDoorman.TestInfrastructure;

/// <summary>
/// –°—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∫–æ–≤ –¥–ª—è {class_name}
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
/// </summary>
public static class {class_name}MockScenarios
{{
{scenarios_code}
}}"""
    
    def list_available_classes(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
        services = self.analyzer.find_service_classes()
        return [s.name for s in services]
    
    def generate_for_all_classes(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
        classes = self.list_available_classes()
        print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {len(classes)} –∫–ª–∞—Å—Å–æ–≤...")
        
        for class_name in classes:
            try:
                print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ {class_name}...")
                test_suite = self.generate_complete_test_suite(class_name)
                self.save_test_suite(test_suite, class_name)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {class_name}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python extended_dx_tool.py <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  list                    - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
        print("  generate <–∫–ª–∞—Å—Å>        - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞")
        print("  generate-all            - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤")
        return
    
    command = sys.argv[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    project_root = Path("../../ClubDoorman")
    test_project_root = Path("../../ClubDoorman.Test")
    
    if not project_root.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {project_root}")
        return
    
    if not test_project_root.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_project_root}")
        return
    
    tool = ExtendedDXTool(project_root, test_project_root)
    
    if command == "list":
        classes = tool.list_available_classes()
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
        for class_name in classes:
            print(f"  - {class_name}")
    
    elif command == "generate":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞")
            return
        
        class_name = sys.argv[2]
        try:
            test_suite = tool.generate_complete_test_suite(class_name)
            tool.save_test_suite(test_suite, class_name)
            print(f"‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è {class_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif command == "generate-all":
        tool.generate_for_all_classes()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == "__main__":
    main() 