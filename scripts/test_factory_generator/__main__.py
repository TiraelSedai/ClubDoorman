"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å TestFactory Generator
"""

import sys
import argparse
from pathlib import Path

from .csharp_analyzer import CSharpAnalyzer
from .factory_generator import TestFactoryGenerator
from .test_data_generator import TestDataGenerator


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä TestFactory –¥–ª—è C# –ø—Ä–æ–µ–∫—Ç–æ–≤')
    parser.add_argument('project_root', help='–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--force', '-f', action='store_true', 
                       help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--generate-test-data', action='store_true',
                       help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TestDataFactory')
    parser.add_argument('--generate-test-base', action='store_true',
                       help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TestBase')
    parser.add_argument('--full-setup', action='store_true',
                       help='–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: TestFactory + TestData + TestBase')
    
    args = parser.parse_args()
    
    if args.verbose:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: {args.project_root}")
    
    analyzer = CSharpAnalyzer(args.project_root, args.force)
    services = analyzer.find_service_classes()
    
    if not services:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏")
        sys.exit(1)
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(services)} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤:")
    for service in services:
        print(f"  - {service.name} ({len(service.constructor_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        if args.verbose:
            for param in service.constructor_params:
                param_type = "interface" if param.is_interface else "concrete" if param.is_concrete else "logger"
                print(f"    ‚îî‚îÄ {param.type} {param.name} ({param_type})")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    generate_test_factory = not (args.generate_test_data or args.generate_test_base)
    generate_test_data = args.generate_test_data or args.full_setup
    generate_test_base = args.generate_test_base or args.full_setup
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestFactory
    if generate_test_factory:
        generator = TestFactoryGenerator(analyzer.test_project_root, args.force)
        
        print(f"\nüöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestFactory... {'(—Ä–µ–∂–∏–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)' if args.force else ''}")
        success_count = 0
        
        for service in services:
            try:
                factory_code = generator.generate_test_factory(service)
                tests_code = generator.generate_test_factory_tests(service)
                if generator.save_files(service, factory_code, tests_code):
                    success_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {service.name}: {e}")
        
        print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestFactory –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {success_count} –∏–∑ {len(services)} TestFactory")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestDataFactory
    if generate_test_data:
        print(f"\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestDataFactory... {'(—Ä–µ–∂–∏–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)' if args.force else ''}")
        test_data_generator = TestDataGenerator(args.project_root, analyzer.test_project_root)
        if test_data_generator.save_test_data_factory(args.force):
            print("‚úÖ TestDataFactory —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  TestDataFactory –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestBase
    if generate_test_base:
        print(f"\nüîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TestBase... {'(—Ä–µ–∂–∏–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)' if args.force else ''}")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TestBase
        print("‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TestBase –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: dotnet test --filter Category=test-infrastructure")
    print("3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–∫–∏ –≤ TestFactory")


if __name__ == "__main__":
    main() 